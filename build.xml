<?xml version="1.0"?>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~ Copyright (C) 2010-2011 Lastrix                                           ~
  ~ This file is part of ASN1S.                                               ~
  ~                                                                           ~
  ~ ASN1S is free software: you can redistribute it and/or modify             ~
  ~ it under the terms of the GNU General Public License as published by      ~
  ~ the Free Software Foundation, either version 2 of the License, or         ~
  ~ (at your option) any later version.                                       ~
  ~                                                                           ~
  ~ ASN1S is distributed in the hope that it will be useful,                  ~
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of            ~
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              ~
  ~ GNU General Public License for more details.                              ~
  ~                                                                           ~
  ~ You should have received a copy of the GNU General Public License         ~
  ~ along with ASN1S. If not, see <http://www.gnu.org/licenses/>.             ~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<!-- This file includes targets for building ASN1S,
     the metaserver, distribution packages, running tests
     and creating documentation. -->
<project name="ASN1S" default="package">
    <description>
        This file includes targets for building ASN1S,
        distribution packages, running tests
        and creating documentation.
    </description>
    <property name="java.target.version" value="1.5"/>
    <property name="ASN1S.name" value="ASN1S"/>
    <property environment="env"/>
    <property name="ASN1S.resources.dir" value="${basedir}/resources"/>
    <property name="ASN1S.src.dir" value="${basedir}/src"/>
    <property name="ASN1S.jars.dir" value="${basedir}/jars"/>
    <property name="ASN1S.packaging.dir" value="${basedir}/packaging"/>
    <property name="ASN1S.build.dir" value="${basedir}/build"/>
    <property name="ASN1S.release.dir" value="${basedir}/dist"/>
    <property name="ASN1S.doc.dir" value="${basedir}/doc"/>
    <property name="ASN1S.javadoc.dir" value="${ASN1S.doc.dir}/javadoc"/>
    <property name="ASN1S.jar.file" value="${basedir}/ASN1S.jar"/>
    <property name="ASN1S.overview.file" value="overview.html"/>

    <property name="test" value="AllTests"/>

    <property name="log4j.jar" value="log4j-1.2.16.jar"/>
    <path id="libraries.classpath">
        <!-- Log4j  -->
        <pathelement location="${ASN1S.jars.dir}/${log4j.jar}"/>
    </path>

    <path id="junit.classpath">
        <pathelement location="${basedir}/test/lib/junit.jar"/>
    </path>

    <path id="ASN1S.build.classpath">
        <path refid="libraries.classpath"/>
    </path>

    <path id="test.build.classpath">
        <path refid="junit.classpath"/>
        <path refid="libraries.classpath"/>
    </path>

    <path id="test.run.classpath">
        <pathelement location="${ASN1S.build.dir}"/>
        <path refid="junit.classpath"/>
        <path refid="libraries.classpath"/>
    </path>

    <target name="init" unless="TSTAMP">
        <tstamp/>
    </target>

    <!-- Compiles the java source files. -->
    <target name="compile" depends="init">
        <mkdir dir="${ASN1S.build.dir}"/>
        <javac srcdir="${ASN1S.src.dir}" destdir="${ASN1S.build.dir}" classpathref="ASN1S.build.classpath" debug="on"
               optimize="on" deprecation="off" source="${java.target.version}" target="${java.target.version}" includeantruntime="false">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-g"/>
        </javac>
    </target>

    <!-- Compile the JUnit tests -->
    <target name="compile-test" depends="init">
        <mkdir dir="${ASN1S.build.dir}"/>
        <javac srcdir="test/src" destdir="${ASN1S.build.dir}" classpathref="test.build.classpath" debug="on" optimize="on" deprecation="off"
               source="${java.target.version}" target="${java.target.version}" includeantruntime="false"/>
    </target>

    <target name="build" depends="init,compile" description="Compiles the source files.">
        <copy todir="${ASN1S.build.dir}">
            <fileset dir="${ASN1S.src.dir}" includes="**/*.xml"/>
        </copy>
    </target>

    <target name="gitInfo">
        <exec executable="git" outputproperty="git.tag">
            <arg value="describe"/>
        </exec>
        <exec executable="git" outputproperty="git.revision">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
    </target>

    <target name="manifest" description="Creates the Manifest file." depends="gitInfo">
        <manifest file="${basedir}/src/MANIFEST.MF">
            <attribute name="Created-By" value="Lastrix"/>
            <attribute name="Main-Class" value="org.lastrix.ASN1S.ASN1S"/>
            <attribute name="Class-Path"
                       value="${ASN1S.jars.dir}/${log4j.jar}"/>
            <attribute name="Revision" value="${git.revision}"/>
            <attribute name="Tag" value="${git.tag}"/>
        </manifest>
    </target>

    <!-- Compiles the source files and creates a JAR-file. -->
    <target name="package" depends="init,build,manifest" description="Compiles the source files and creates a JAR-file.">
        <jar jarfile="${ASN1S.jar.file}" basedir="${ASN1S.build.dir}" manifest="${basedir}/src/MANIFEST.MF" includes="jsyntaxpane/**, net/**, org/**"
             excludes="**/.svn/**"/>
    </target>

    <target name="dist" description="Creates archives and installers for distribution."
            depends="init,initDist,zipJavaBundle,zipSourceBundle">

        <echo message=""/>
        <echo message="-------------------------------------------------"/>
        <echo message="Distribution files created:"/>
        <echo message="${ASN1S.release.dir}"/>
        <echo message="-------------------------------------------------"/>
    </target>

    <target name="initDist" depends="init, gitInfo">
        <mkdir dir="${ASN1S.release.dir}"/>
    </target>

    <target name="prepareManual" depends="initDist,print-manual">
        <mkdir dir="${ASN1S.release.dir}/manual/${ASN1S.name}"/>
        <copy todir="${ASN1S.release.dir}/manual/${ASN1S.name}">
            <fileset dir="${ASN1S.doc.dir}" includes="manual.pdf"/>
        </copy>
    </target>

    <target name="prepareBaseFiles" depends="initDist">
        <antcall target="clean"/>
        <antcall target="package"/>
        <mkdir dir="${ASN1S.release.dir}/base/${ASN1S.name}"/>
        <copy todir="${ASN1S.release.dir}/base/${ASN1S.name}">
            <fileset dir="${basedir}" includes="ASN1S.jar"/>
            <fileset dir="${basedir}" includes="COPYING"/>
            <fileset dir="${basedir}" includes="README**"/>
            <fileset dir="${basedir}" includes="resources/**"/>
            <fileset dir="${basedir}" includes="jars/**"/>
        </copy>
    </target>

    <target name="prepareSourceFiles" depends="initDist">
        <antcall target="clean"/>
        <mkdir dir="${ASN1S.release.dir}/source/${ASN1S.name}"/>
        <copy todir="${ASN1S.release.dir}/source/${ASN1S.name}">
            <fileset dir="${basedir}"
                     excludes="**/.git/**,**/dist/**,**/.settings/**,**/.classpath,**/.project,**/.directory,**/resources/**,jars/**,**/build/**"/>
        </copy>
    </target>

    <target name="zipJavaBundle" unless="skip.dist.java" depends="initDist,prepareManual,prepareBaseFiles">
        <zip destfile="${ASN1S.release.dir}/ASN1S-${git.tag}.zip">
            <fileset dir="${ASN1S.release.dir}/base" includes="${ASN1S.name}/**"/>
            <fileset dir="${ASN1S.release.dir}/manual" includes="${ASN1S.name}/**"/>
        </zip>
    </target>

    <target name="zipSourceBundle" unless="skip.dist.source" depends="initDist,prepareSourceFiles">
        <zip destfile="${ASN1S.release.dir}/ASN1S-${git.tag}-src.zip">
            <fileset dir="${ASN1S.release.dir}/base" includes="${ASN1S.name}/**"/>
            <fileset dir="${ASN1S.release.dir}/source" includes="${ASN1S.name}/**"/>
        </zip>
    </target>

    <!-- Cleans the directories by removing auto-generated files. -->
    <target name="clean" depends="init" description="Cleans the directories by removing auto-generated files.">
        <!--<delete quiet="true" dir="${ASN1S.build.dir}"/>
            <delete quiet="true" dir="${ASN1S.release.dir}"/>-->
        <delete quiet="true" file="${ASN1S.jar.file}"/>
        <delete quiet="true" file="TESTS-TestSuites.xml"/>
        <delete quiet="true" dir="${ASN1S.javadoc.dir}"/>
        <delete quiet="true" file="ASN1S.log"/>
    </target>

    <target name="distclean" depends="init,clean" description="Cleans the directories and removes the distribution directory.">
        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${ASN1S.release.dir}"/>
        </delete>
    </target>

    <target name="fix" depends="init">
        <fixcrlf srcdir="${ASN1S.src.dir}" includes="**/*.java" eol="asis" tab="remove" javafiles="yes" tablength="4" eof="asis"/>
    </target>

    <!-- Generate JavaDoc documentation. -->
    <target name="javadoc" depends="init" description="Generate JavaDoc documentation.">
        <mkdir dir="${ASN1S.javadoc.dir}"/>
        <javadoc sourcepath="${ASN1S.src.dir}" overview="${ASN1S.overview.file}" destdir="${ASN1S.javadoc.dir}" packagenames="org.lastrix.ASN1S.*"
                 private="true" classpathref="ASN1S.build.classpath" Author="true" Windowtitle="ASN1S Code Documentation"/>
        <echo message=""/>
        <echo message="-------------------------------------------------"/>
        <echo message="JavaDoc-generated documentation created:"/>
        <echo message="${ASN1S.javadoc.dir}"/>
        <echo message="-------------------------------------------------"/>
    </target>


    <!-- example:
            ant -lib test/lib/junit.jar -Dtest=common.model.BuildingTest test
            -->
    <target name="test" depends="build-unit-tests" description="Runs a particular unit test">
        <echo message="if the next task fails then please read the build script"/>
        <!-- if the next fails then here is the long answer:
                    http://ant.apache.org/faq.html#delegating-classloader
                    the short answer depends.
                    if you have Ant 1.7, the junit.jar can exist on the classpath.
                    upgrading to 1.7 may be the best solution.

                    if you have Ant 1.6:
                    ant -lib test/lib/junit.jar testall
                    if you have a version of Ant prior to 1.6 on Windows:
                    set CLASSPATH=%CLASSPATH%;test\lib\junit.jar
                    ant testall
                    if you have a version of Ant prior to 1.6 on UNIX:
                    export CLASSPATH=${CLASSPATH}:test/lib/junit.jar; ant testall
                    -->
        <junit printsummary="yes">
            <classpath refid="test.run.classpath"/>
            <formatter type="brief" usefile="false"/>
            <formatter type="plain"/>
            <test todir="${ASN1S.build.dir}" name="org.lastrix.ASN1S.${test}"/>
            <sysproperty key="java.awt.headless" value="true"/>
        </junit>
        <echo message="For more detailed information about this test run see:"/>
        <echo message="${ASN1S.build.dir}/TEST-org.lastrix.ASN1S.${test}.txt"/>
    </target>

    <target name="testall" depends="build-unit-tests" unless="skip.dist.test" description="Runs all unit tests">

        <delete dir="${ASN1S.build.dir}/report"/>
        <mkdir dir="${ASN1S.build.dir}/report"/>
        <mkdir dir="${ASN1S.build.dir}/report/xml"/>

        <echo message="if the next task fails then please read the build script"/>
        <!-- if the next fails then here is the long answer:
                    http://ant.apache.org/faq.html#delegating-classloader
                    the short answer depends.
                    if you have Ant 1.7, the junit.jar can exist on the classpath.
                    upgrading to 1.7 may be the best solution.

                    if you have Ant 1.6:
                    ant -lib test/lib/junit.jar testall
                    if you have a version of Ant prior to 1.6 on Windows:
                    set CLASSPATH=%CLASSPATH%;test\lib\junit.jar
                    ant testall
                    if you have a version of Ant prior to 1.6 on UNIX:
                    export CLASSPATH=${CLASSPATH}:test/lib/junit.jar; ant testall
                    -->
        <junit printsummary="on" errorProperty="error.junit" failureProperty="error.junit" fork="yes" maxmemory="48m">
            <classpath refid="test.run.classpath"/>
            <formatter type="xml"/>

            <test todir="${ASN1S.build.dir}/report/xml" name="org.lastrix.ASN1S.AllTests" fork="yes"/>

            <sysproperty key="java.awt.headless" value="true"/>
        </junit>

        <junitreport>
            <fileset dir="${ASN1S.build.dir}/report/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${ASN1S.build.dir}/report"/>
        </junitreport>

        <echo message="For detailed results of the test run see: ${ASN1S.build.dir}/report/index.html"/>

        <fail if="error.junit" message="Automated Unit Tests failed."/>
    </target>

    <target name="build-unit-tests" depends="build">
        <depend srcDir="test/src" destDir="${ASN1S.build.dir}" cache="${ASN1S.build.dir}"/>
        <javac srcdir="test/src" destdir="${ASN1S.build.dir}" classpathref="test.build.classpath" debug="on" deprecation="off"
               source="${java.target.version}" target="${java.target.version}" includeantruntime="false"/>
    </target>

    <target name="validate" description="Validates the specification and resource files.">
    </target>

    <target name="print-manual" description="Creates the printable user guide.">
        <delete file="doc/manual/manual.ind"/>
        <exec executable="latex" dir="doc/manual">
            <arg file="doc/manual/manual.tex"/>
        </exec>
        <exec executable="makeindex" dir="doc/manual">
            <arg file="doc/manual/FreeCol.idx"/>
        </exec>
        <exec executable="latex" dir="doc/manual">
            <arg file="doc/manual/manual.tex"/>
        </exec>
        <exec executable="dvipdf" dir="doc/manual">
            <arg file="doc/manual/manual.dvi"/>
            <arg file="doc/manual.pdf"/>
        </exec>
    </target>

    <target name="online-manual" description="Creates the online user guide.">
        <!--	<delete file="doc/manual/FreeCol.ind" />
   <exec executable="htlatex" dir="doc">
       <arg file="doc/FreeCol.tex" />
   </exec>
   <exec executable="tex" dir="doc">
       <arg line="\def\filename{{FreeCol}{idx}{4dx}{ind}} \input  idxmake.4ht" />
   </exec>
   <exec executable="makeindex" dir="doc">
       <arg file="doc/FreeCol.4dx" />
   </exec>
   <exec executable="htlatex" dir="doc">
       <arg file="doc/FreeCol.tex" />
   </exec>-->
    </target>

    <target name="manual" depends="print-manual,online-manual" description="Creates the printable and online user guides.">
    </target>

    <target name="fixTabsWindows">
        <fixcrlf srcdir="${ASN1S.src.dir}" tab="remove" tablength="4" includes="**/*.java" eol="crlf"/>
    </target>

    <target name="fixTabsUnix">
        <fixcrlf srcdir="${ASN1S.src.dir}" tab="remove" tablength="4" includes="**/*.java" eol="lf"/>
    </target>

    <!-- Prints a report on certain translations, which you can specify
            by setting the localeKey property ("-DlocaleKey=fi", for example),
            or all translations. Use "-emacs" in order to suppress extensive
            logging.  -->
    <target name="translation-report" depends="build" description="Creates report on translations.">
        <condition property="localeKey" else="">
            <isset property="localeKey"/>
        </condition>
        <java classname="org.lastrix.ASN1S.tools.TranslationReport" classpath="build/">
            <arg value="src/org/lastrix/ASN1S/gui/i18n/"/>
            <arg value="${localeKey}"/>
        </java>
    </target>


    <!-- Creates installer strings. -->
    <target name="installer-translations" depends="build" description="Creates properties files for installer translations.">
        <!--	<java classname="org.lastrix.ASN1S.tools.InstallerTranslations" classpath="build/" />-->
    </target>


    <target name="prepare-commit" description="Rebuild from scratch and run all tests." depends="clean,package,validate,testall"/>

    <!-- This is a shortcut for NetBeans, and possibly other IDEs. -->
    <target name="run" depends="package" description="Runs the software">
        <java jar="ASN1S.jar" fork="true">
            <jvmarg value="-Xmx256m"/>
        </java>
    </target>
</project>
