/******************************************************************************
 * Copyright (C) 2010-2011 Lastrix                                            *
 * This file is part of ASN1S.                                                *
 *                                                                            *
 * ASN1S is free software: you can redistribute it and/or modify              *
 * it under the terms of the GNU General Public License as published by       *
 * the Free Software Foundation, either version 2 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * ASN1S is distributed in the hope that it will be useful,                   *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with ASN1S. If not, see <http://www.gnu.org/licenses/>.              *
 ******************************************************************************/

/* Generated By:JJTree: Do not edit this line. Node.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.lastrix.asn1s.schema.parser;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

public interface Node {

	/**
	 * This method is called after the node has been made the current
	 * node.  It indicates that child nodes can now be added to it.
	 */
	public void jjtOpen();

	/**
	 * This method is called after all the child nodes have been
	 * added.
	 */
	public void jjtClose();

	/**
	 * This pair of methods are used to inform the node of its
	 * parent.
	 */
	public void jjtSetParent(Node n);

	public Node jjtGetParent();

	/**
	 * This method tells the node to add its argument to the node's
	 * list of children.
	 */
	public void jjtAddChild(Node n, int i);

	/**
	 * This method returns a child node.  The children are numbered
	 * from zero, left to right.
	 */
	public Node jjtGetChild(int i);

	/**
	 * Return the number of children the node has.
	 */
	public int jjtGetNumChildren();

	/**
	 * Accept the visitor. *
	 */
	public Object jjtAccept(ASN1SchemaCompilerVisitor visitor, Object data);
}
/* JavaCC - OriginalChecksum=c300294cc570fb8ac74f1ec6297e0115 (do not edit this line) */
