/******************************************************************************
 * Copyright (C) 2010-2011 Lastrix                                            *
 * This file is part of ASN1S.                                                *
 *                                                                            *
 * ASN1S is free software: you can redistribute it and/or modify              *
 * it under the terms of the GNU General Public License as published by       *
 * the Free Software Foundation, either version 2 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * ASN1S is distributed in the hope that it will be useful,                   *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with ASN1S. If not, see <http://www.gnu.org/licenses/>.              *
 ******************************************************************************/

/* Generated By:JJTree&JavaCC: Do not edit this line. ASN1SchemaCompiler.java */
package org.lastrix.asn1s.schema.parser;

import java.io.FileInputStream;

public class ASN1SchemaCompiler/*@bgen(jjtree)*/ implements ASN1SchemaCompilerTreeConstants, ASN1SchemaCompilerConstants {/*@bgen(jjtree)*/
	protected static JJTASN1SchemaCompilerState jjtree = new JJTASN1SchemaCompilerState();

	public static void main(String args[]) throws ParseException {
		boolean showUsage = true;

		ASN1SchemaCompiler parser;
		try {
			int i;
			for (i = 0; i < args.length; i++) {

				parser = new ASN1SchemaCompiler(new FileInputStream(args[i]));
				parser.Parse();
				System.out.println("ASN.1 file parsed successfully.");


				SimpleNode root = (SimpleNode) jjtree.rootNode();
				root.dump("\u005ct");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	static void jjtreeOpenNodeScope(Node n) {
		((SimpleNode) n).first_token = getToken(1);
	}

	static void jjtreeCloseNodeScope(Node n) {
		((SimpleNode) n).last_token = getToken(0);
	}

	public final static String[] usefulTypes = new String[]{
	                                                       "GeneralizedTime", "UTCTime", "ObjectDescriptor"
	};

	public final static String[] characterStringTypes = new String[]{
	                                                                "NumericString",
	                                                                "PrintableString",
	                                                                "TeletexString",
	                                                                "T61String",
	                                                                "VideotexString",
	                                                                "UniversalString",
	                                                                "VisibleString",
	                                                                "ISO646String",
	                                                                "IA5String",
	                                                                "GraphicString",
	                                                                "GeneralString",
	                                                                "BMPString"
	};

/**************************************/
/**********  ENTRY POINT  *************/
	/**
	 * **********************************
	 */
	static final public void Parse() throws ParseException {
		/*@bgen(jjtree) Parse */
		ASTParse jjtn000 = new ASTParse(JJTPARSE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			label_1:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
						;
						break;
					default:
						jj_la1[0] = jj_gen;
						break label_1;
				}
				ModuleDefinition();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ModuleDefinition() throws ParseException {
		/*@bgen(jjtree) ModuleDefinition */
		ASTModuleDefinition jjtn000 = new ASTModuleDefinition(JJTMODULEDEFINITION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ModuleIdentifier();
			jj_consume_token(RESERVED_DEFINITIONS);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_AUTOMATIC:
				case RESERVED_EXPLICIT:
				case RESERVED_IMPLICIT:
					TagDefault();
					break;
				default:
					jj_la1[1] = jj_gen;
					;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_EXTENSIBILITY:
					ExtensionDefault();
					break;
				default:
					jj_la1[2] = jj_gen;
					;
			}
			jj_consume_token(TOKEN_ASSIGNMENT);
			jj_consume_token(RESERVED_BEGIN);
			ModuleBody();
			jj_consume_token(RESERVED_END);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExternalValueReference() throws ParseException {
		/*@bgen(jjtree) ExternalValueReference */
		ASTExternalValueReference jjtn000 = new ASTExternalValueReference(JJTEXTERNALVALUEREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ModuleReference();
			jj_consume_token(TOKEN_DOT);
			ValueReference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SignedNumber() throws ParseException {
		/*@bgen(jjtree) SignedNumber */
		ASTSignedNumber jjtn000 = new ASTSignedNumber(JJTSIGNEDNUMBER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_MINUS:
				case NUMBER:
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case TOKEN_MINUS:
							jj_consume_token(TOKEN_MINUS);
							break;
						default:
							jj_la1[3] = jj_gen;
							;
					}
					jj_consume_token(NUMBER);
					break;
				case ZERO:
					jj_consume_token(ZERO);
					break;
				default:
					jj_la1[4] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

/*************************************************/
/**********  MODULE IDENTIFIER PART  *************/
	/**
	 * *********************************************
	 */
	static final public void ModuleIdentifier() throws ParseException {
		/*@bgen(jjtree) ModuleIdentifier */
		ASTModuleIdentifier jjtn000 = new ASTModuleIdentifier(JJTMODULEIDENTIFIER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ModuleReference();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_BRACE_LEFT:
					DefiniteIdentifier();
					break;
				default:
					jj_la1[5] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void DefiniteIdentifier() throws ParseException {
		/*@bgen(jjtree) DefiniteIdentifier */
		ASTDefiniteIdentifier jjtn000 = new ASTDefiniteIdentifier(JJTDEFINITEIDENTIFIER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			ObjIdComponentsList();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ObjIdComponentsList() throws ParseException {
		/*@bgen(jjtree) ObjIdComponentsList */
		ASTObjIdComponentsList jjtn000 = new ASTObjIdComponentsList(JJTOBJIDCOMPONENTSLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ObjIdComponent();
			label_2:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
					case ZERO:
					case NUMBER:
						;
						break;
					default:
						jj_la1[6] = jj_gen;
						break label_2;
				}
				ObjIdComponent();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ObjIdComponent() throws ParseException {
		/*@bgen(jjtree) ObjIdComponent */
		ASTObjIdComponent jjtn000 = new ASTObjIdComponent(JJTOBJIDCOMPONENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_1(2)) {
				NameAndNumberForm();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case ZERO:
					case NUMBER:
						NumberForm();
						break;
					default:
						jj_la1[7] = jj_gen;
						if (jj_2_2(2)) {
							DefinedValue();
						} else if (jj_2_3(2)) {
							identifier();
						} else {
							jj_consume_token(-1);
							throw new ParseException();
						}
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NumberForm() throws ParseException {
		/*@bgen(jjtree) NumberForm */
		ASTNumberForm jjtn000 = new ASTNumberForm(JJTNUMBERFORM);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Number();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Number() throws ParseException {
		/*@bgen(jjtree) Number */
		ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NUMBER:
					jj_consume_token(NUMBER);
					break;
				case ZERO:
					jj_consume_token(ZERO);
					break;
				default:
					jj_la1[8] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NameAndNumberForm() throws ParseException {
		/*@bgen(jjtree) NameAndNumberForm */
		ASTNameAndNumberForm jjtn000 = new ASTNameAndNumberForm(JJTNAMEANDNUMBERFORM);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_PAREN_LEFT:
					jj_consume_token(TOKEN_PAREN_LEFT);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case ZERO:
						case NUMBER:
							NumberForm();
							break;
						case UPPERCASE_START:
						case LOWERCASE_START:
							DefinedValue();
							break;
						default:
							jj_la1[9] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					jj_consume_token(TOKEN_PAREN_RIGHT);
					break;
				default:
					jj_la1[10] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TagDefault() throws ParseException {
		/*@bgen(jjtree) TagDefault */
		ASTTagDefault jjtn000 = new ASTTagDefault(JJTTAGDEFAULT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_EXPLICIT:
					jj_consume_token(RESERVED_EXPLICIT);
					break;
				case RESERVED_IMPLICIT:
					jj_consume_token(RESERVED_IMPLICIT);
					break;
				case RESERVED_AUTOMATIC:
					jj_consume_token(RESERVED_AUTOMATIC);
					break;
				default:
					jj_la1[11] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			jj_consume_token(RESERVED_TAGS);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionDefault() throws ParseException {
		/*@bgen(jjtree) ExtensionDefault */
		ASTExtensionDefault jjtn000 = new ASTExtensionDefault(JJTEXTENSIONDEFAULT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_EXTENSIBILITY);
			jj_consume_token(RESERVED_IMPLIED);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	/**
	 * *******  MODULE BODY PART  ************
	 */
	static final public void ModuleBody() throws ParseException {
		/*@bgen(jjtree) ModuleBody */
		ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_EXPORTS:
				case RESERVED_IMPORTS:
				case UPPERCASE_START:
				case LOWERCASE_START:
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case RESERVED_EXPORTS:
							Exports();
							break;
						default:
							jj_la1[12] = jj_gen;
							;
					}
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case RESERVED_IMPORTS:
							Imports();
							break;
						default:
							jj_la1[13] = jj_gen;
							;
					}
					AssignmentList();
					break;
				default:
					jj_la1[14] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	/**
	 * *******  EXPORTS PART  ************
	 */
	static final public void Exports() throws ParseException {
		/*@bgen(jjtree) Exports */
		ASTExports jjtn000 = new ASTExports(JJTEXPORTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_EXPORTS);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_ALL:
					jj_consume_token(RESERVED_ALL);
					break;
				default:
					jj_la1[15] = jj_gen;
					SymbolsExported();
			}
			jj_consume_token(TOKEN_SEMICOLON);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SymbolsExported() throws ParseException {
		/*@bgen(jjtree) SymbolsExported */
		ASTSymbolsExported jjtn000 = new ASTSymbolsExported(JJTSYMBOLSEXPORTED);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case UPPERCASE_START:
				case LOWERCASE_START:
				case UPPERCASE:
					SymbolList();
					break;
				default:
					jj_la1[16] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Imports() throws ParseException {
		/*@bgen(jjtree) Imports */
		ASTImports jjtn000 = new ASTImports(JJTIMPORTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_IMPORTS);
			SymbolsImported();
			jj_consume_token(TOKEN_SEMICOLON);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	/**
	 * *******  IMPORTS PART  ************
	 */
	static final public void SymbolsImported() throws ParseException {
		/*@bgen(jjtree) SymbolsImported */
		ASTSymbolsImported jjtn000 = new ASTSymbolsImported(JJTSYMBOLSIMPORTED);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case UPPERCASE_START:
				case LOWERCASE_START:
				case UPPERCASE:
					SymbolsFromModuleList();
					break;
				default:
					jj_la1[17] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SymbolsFromModuleList() throws ParseException {
		/*@bgen(jjtree) SymbolsFromModuleList */
		ASTSymbolsFromModuleList jjtn000 = new ASTSymbolsFromModuleList(JJTSYMBOLSFROMMODULELIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SymbolsFromModule();
			label_3:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
					case UPPERCASE:
						;
						break;
					default:
						jj_la1[18] = jj_gen;
						break label_3;
				}
				SymbolsFromModule();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SymbolsFromModule() throws ParseException {
		/*@bgen(jjtree) SymbolsFromModule */
		ASTSymbolsFromModule jjtn000 = new ASTSymbolsFromModule(JJTSYMBOLSFROMMODULE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SymbolList();
			jj_consume_token(RESERVED_FROM);
			GlobalModuleReference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void GlobalModuleReference() throws ParseException {
		/*@bgen(jjtree) GlobalModuleReference */
		ASTGlobalModuleReference jjtn000 = new ASTGlobalModuleReference(JJTGLOBALMODULEREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ModuleReference();
			if (jj_2_4(5)) {
				AssignedIdentifier();
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void AssignedIdentifier() throws ParseException {
		/*@bgen(jjtree) AssignedIdentifier */
		ASTAssignedIdentifier jjtn000 = new ASTAssignedIdentifier(JJTASSIGNEDIDENTIFIER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_BRACE_LEFT:
					ObjectIdentifierValue();
					break;
				case UPPERCASE_START:
				case LOWERCASE_START:
					DefinedValue();
					break;
				default:
					jj_la1[19] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SymbolList() throws ParseException {
		/*@bgen(jjtree) SymbolList */
		ASTSymbolList jjtn000 = new ASTSymbolList(JJTSYMBOLLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Symbol();
			label_4:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[20] = jj_gen;
						break label_4;
				}
				jj_consume_token(TOKEN_COMMA);
				Symbol();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Symbol() throws ParseException {
		/*@bgen(jjtree) Symbol */
		ASTSymbol jjtn000 = new ASTSymbol(JJTSYMBOL);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Reference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Reference() throws ParseException {
		/*@bgen(jjtree) Reference */
		ASTReference jjtn000 = new ASTReference(JJTREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_5(2)) {
				TypeReference();
			} else if (jj_2_6(2)) {
				ValueReference();
			} else if (jj_2_7(2)) {
				ObjectClassReference();
			} else if (jj_2_8(2)) {
				ObjectReference();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	/**
	 * *******  ASSIGNMENTS LIST PART  ************
	 */
	static final public void AssignmentList() throws ParseException {
		/*@bgen(jjtree) AssignmentList */
		ASTAssignmentList jjtn000 = new ASTAssignmentList(JJTASSIGNMENTLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Assignment();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_SEMICOLON:
					jj_consume_token(TOKEN_SEMICOLON);
					break;
				default:
					jj_la1[21] = jj_gen;
					;
			}
			label_5:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
						;
						break;
					default:
						jj_la1[22] = jj_gen;
						break label_5;
				}
				Assignment();
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_SEMICOLON:
						jj_consume_token(TOKEN_SEMICOLON);
						break;
					default:
						jj_la1[23] = jj_gen;
						;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Assignment() throws ParseException {
		if (jj_2_9(2)) {
			TypeAssignment();
		} else if (jj_2_10(2)) {
			ValueAssignment();
		} else if (jj_2_11(2)) {
			ValueSetTypeAssignment();
		} else if (jj_2_12(2)) {
			ParametrizedAssignment();
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void DefinedType() throws ParseException {
		/*@bgen(jjtree) DefinedType */
		ASTDefinedType jjtn000 = new ASTDefinedType(JJTDEFINEDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_13(2)) {
				ExternalTypeReference();
			} else if (jj_2_14(2)) {
				TypeReference();
			} else if (jj_2_15(2)) {
				ParametrizedType();
			} else if (jj_2_16(2)) {
				ParametrizedValueSetType();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExternalTypeReference() throws ParseException {
		/*@bgen(jjtree) ExternalTypeReference */
		ASTExternalTypeReference jjtn000 = new ASTExternalTypeReference(JJTEXTERNALTYPEREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ModuleReference();
			jj_consume_token(TOKEN_DOT);
			TypeReference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void AbsoluteReference() throws ParseException {
		/*@bgen(jjtree) AbsoluteReference */
		ASTAbsoluteReference jjtn000 = new ASTAbsoluteReference(JJTABSOLUTEREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_REF);
			ModuleIdentifier();
			jj_consume_token(TOKEN_DOT);
			ItemSpec();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ItemSpec() throws ParseException {
		/*@bgen(jjtree) ItemSpec */
		ASTItemSpec jjtn000 = new ASTItemSpec(JJTITEMSPEC);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			label_6:
			while (true) {
				TypeReference();
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
						;
						break;
					default:
						jj_la1[24] = jj_gen;
						break label_6;
				}
			}
			jj_consume_token(TOKEN_DOT);
			ComponentId();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ComponentId() throws ParseException {
		/*@bgen(jjtree) ComponentId */
		ASTComponentId jjtn000 = new ASTComponentId(JJTCOMPONENTID);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LOWERCASE_START:
					identifier();
					break;
				case ZERO:
				case NUMBER:
					Number();
					break;
				case TOKEN_STAR:
					jj_consume_token(TOKEN_STAR);
					break;
				default:
					jj_la1[25] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TypeAssignment() throws ParseException {
		/*@bgen(jjtree) TypeAssignment */
		ASTTypeAssignment jjtn000 = new ASTTypeAssignment(JJTTYPEASSIGNMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			TypeReference();
			jj_consume_token(TOKEN_ASSIGNMENT);
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueAssignment() throws ParseException {
		/*@bgen(jjtree) ValueAssignment */
		ASTValueAssignment jjtn000 = new ASTValueAssignment(JJTVALUEASSIGNMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ValueReference();
			Type();
			jj_consume_token(TOKEN_ASSIGNMENT);
			Value();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueSetTypeAssignment() throws ParseException {
		/*@bgen(jjtree) ValueSetTypeAssignment */
		ASTValueSetTypeAssignment jjtn000 = new ASTValueSetTypeAssignment(JJTVALUESETTYPEASSIGNMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			TypeReference();
			Type();
			jj_consume_token(TOKEN_ASSIGNMENT);
			ValueSet();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueSet() throws ParseException {
		/*@bgen(jjtree) ValueSet */
		ASTValueSet jjtn000 = new ASTValueSet(JJTVALUESET);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			ElementSetSpecs();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Type() throws ParseException {
		/*@bgen(jjtree) Type */
		ASTType jjtn000 = new ASTType(JJTTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_20(4)) {
				TypeWithConstraint();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_BRACKET_LEFT:
					case RESERVED_BIT:
					case RESERVED_BMP_STRING:
					case RESERVED_BOOLEAN:
					case RESERVED_CHARACTER:
					case RESERVED_CHOICE:
					case RESERVED_EMBEDDED:
					case RESERVED_ENUMERATED:
					case RESERVED_EXTERNAL:
					case RESERVED_GENERAL_STRING:
					case RESERVED_GRAPHIC_STRING:
					case RESERVED_IA5_STRING:
					case RESERVED_INTEGER:
					case RESERVED_ISO646_STRING:
					case RESERVED_NULL:
					case RESERVED_NUMERIC_STRING:
					case RESERVED_OBJECT:
					case RESERVED_OCTET:
					case RESERVED_PRINTABLE_STRING:
					case RESERVED_REAL:
					case RESERVED_RELATIVE_OID:
					case RESERVED_SEQUENCE:
					case RESERVED_SET:
					case RESERVED_T61_STRING:
					case RESERVED_TELETEX_STRING:
					case RESERVED_UNIVERSAL_STRING:
					case RESERVED_UTF8_STRING:
					case RESERVED_VIDEOTEX_STRING:
					case RESERVED_VISIBLE_STRING:
					case UPPERCASE_START:
						if (jj_2_17(2)) {
							BuiltinType();
						} else if (jj_2_18(2)) {
							DefinedType();
						} else {
							jj_consume_token(-1);
							throw new ParseException();
						}
						if (jj_2_19(2)) {
							Constraint();
						} else {
							;
						}
						break;
					default:
						jj_la1[26] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void BuiltinType() throws ParseException {
		/*@bgen(jjtree) BuiltinType */
		ASTBuiltinType jjtn000 = new ASTBuiltinType(JJTBUILTINTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_BIT:
					BitStringType();
					break;
				case RESERVED_BOOLEAN:
					BooleanType();
					break;
				case RESERVED_BMP_STRING:
				case RESERVED_CHARACTER:
				case RESERVED_GENERAL_STRING:
				case RESERVED_GRAPHIC_STRING:
				case RESERVED_IA5_STRING:
				case RESERVED_ISO646_STRING:
				case RESERVED_NUMERIC_STRING:
				case RESERVED_PRINTABLE_STRING:
				case RESERVED_T61_STRING:
				case RESERVED_TELETEX_STRING:
				case RESERVED_UNIVERSAL_STRING:
				case RESERVED_UTF8_STRING:
				case RESERVED_VIDEOTEX_STRING:
				case RESERVED_VISIBLE_STRING:
					CharacterStringType();
					break;
				case RESERVED_CHOICE:
					ChoiceType();
					break;
				case RESERVED_EMBEDDED:
					EmbeddedPDVType();
					break;
				case RESERVED_ENUMERATED:
					EnumeratedType();
					break;
				case RESERVED_EXTERNAL:
					ExternalType();
					break;
				default:
					jj_la1[27] = jj_gen;
					if (jj_2_21(3)) {
						IntegerType();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case RESERVED_NULL:
								NullType();
								break;
							case RESERVED_OBJECT:
								ObjectIdentifierType();
								break;
							case RESERVED_OCTET:
								OctetStringType();
								break;
							case RESERVED_REAL:
								RealType();
								break;
							case RESERVED_RELATIVE_OID:
								RelativeOIDType();
								break;
							default:
								jj_la1[28] = jj_gen;
								if (jj_2_22(3)) {
									SequenceType();
								} else if (jj_2_23(3)) {
									SequenceOfType();
								} else if (jj_2_24(3)) {
									SetType();
								} else if (jj_2_25(3)) {
									SetOfType();
								} else {
									switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
										case TOKEN_BRACKET_LEFT:
											TaggedType();
											break;
										default:
											jj_la1[29] = jj_gen;
											jj_consume_token(-1);
											throw new ParseException();
									}
								}
						}
					}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedType() throws ParseException {
		/*@bgen(jjtree) NamedType */
		ASTNamedType jjtn000 = new ASTNamedType(JJTNAMEDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ReferencedType() throws ParseException {
		/*@bgen(jjtree) ReferencedType */
		ASTReferencedType jjtn000 = new ASTReferencedType(JJTREFERENCEDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_26(2)) {
				DefinedType();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
						UsefulType();
						break;
					case LOWERCASE_START:
						SelectionType();
						break;
					default:
						jj_la1[30] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void BooleanType() throws ParseException {
		/*@bgen(jjtree) BooleanType */
		ASTBooleanType jjtn000 = new ASTBooleanType(JJTBOOLEANTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_BOOLEAN);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void IntegerType() throws ParseException {
		/*@bgen(jjtree) IntegerType */
		ASTIntegerType jjtn000 = new ASTIntegerType(JJTINTEGERTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_INTEGER);
			if (jj_2_27(2)) {
				jj_consume_token(TOKEN_BRACE_LEFT);
				NamedNumberList();
				jj_consume_token(TOKEN_BRACE_RIGHT);
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedNumberList() throws ParseException {
		/*@bgen(jjtree) NamedNumberList */
		ASTNamedNumberList jjtn000 = new ASTNamedNumberList(JJTNAMEDNUMBERLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			NamedNumber();
			label_7:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[31] = jj_gen;
						break label_7;
				}
				jj_consume_token(TOKEN_COMMA);
				NamedNumber();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedNumber() throws ParseException {
		/*@bgen(jjtree) NamedNumber */
		ASTNamedNumber jjtn000 = new ASTNamedNumber(JJTNAMEDNUMBER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			jj_consume_token(TOKEN_PAREN_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_MINUS:
				case ZERO:
				case NUMBER:
					SignedNumber();
					break;
				case UPPERCASE_START:
				case LOWERCASE_START:
					DefinedValue();
					break;
				default:
					jj_la1[32] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			jj_consume_token(TOKEN_PAREN_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void EnumeratedType() throws ParseException {
		/*@bgen(jjtree) EnumeratedType */
		ASTEnumeratedType jjtn000 = new ASTEnumeratedType(JJTENUMERATEDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_ENUMERATED);
			jj_consume_token(TOKEN_BRACE_LEFT);
			Enumerations();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Enumerations() throws ParseException {
		/*@bgen(jjtree) Enumerations */
		ASTEnumerations jjtn000 = new ASTEnumerations(JJTENUMERATIONS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Enumeration();
			if (jj_2_28(2)) {
				jj_consume_token(TOKEN_COMMA);
				jj_consume_token(TOKEN_ELLIPSIS);
				ExceptionSpec();
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						jj_consume_token(TOKEN_COMMA);
						Enumeration();
						break;
					default:
						jj_la1[33] = jj_gen;
						;
				}
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Enumeration() throws ParseException {
		/*@bgen(jjtree) Enumeration */
		ASTEnumeration jjtn000 = new ASTEnumeration(JJTENUMERATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			EnumerationItem();
			label_8:
			while (true) {
				if (jj_2_29(2)) {
					;
				} else {
					break label_8;
				}
				jj_consume_token(TOKEN_COMMA);
				EnumerationItem();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void EnumerationItem() throws ParseException {
		/*@bgen(jjtree) EnumerationItem */
		ASTEnumerationItem jjtn000 = new ASTEnumerationItem(JJTENUMERATIONITEM);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_30(2)) {
				NamedNumber();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case LOWERCASE_START:
						identifier();
						break;
					default:
						jj_la1[34] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void RealType() throws ParseException {
		/*@bgen(jjtree) RealType */
		ASTRealType jjtn000 = new ASTRealType(JJTREALTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_REAL);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void BitStringType() throws ParseException {
		/*@bgen(jjtree) BitStringType */
		ASTBitStringType jjtn000 = new ASTBitStringType(JJTBITSTRINGTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_BIT);
			jj_consume_token(RESERVED_STRING);
			if (jj_2_31(2)) {
				jj_consume_token(TOKEN_BRACE_LEFT);
				NamedBitList();
				jj_consume_token(TOKEN_BRACE_RIGHT);
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedBitList() throws ParseException {
		/*@bgen(jjtree) NamedBitList */
		ASTNamedBitList jjtn000 = new ASTNamedBitList(JJTNAMEDBITLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			NamedBit();
			label_9:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[35] = jj_gen;
						break label_9;
				}
				jj_consume_token(TOKEN_COMMA);
				NamedBit();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedBit() throws ParseException {
		/*@bgen(jjtree) NamedBit */
		ASTNamedBit jjtn000 = new ASTNamedBit(JJTNAMEDBIT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			jj_consume_token(TOKEN_PAREN_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case ZERO:
				case NUMBER:
					Number();
					break;
				case UPPERCASE_START:
				case LOWERCASE_START:
					DefinedValue();
					break;
				default:
					jj_la1[36] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			jj_consume_token(TOKEN_PAREN_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void OctetStringType() throws ParseException {
		/*@bgen(jjtree) OctetStringType */
		ASTOctetStringType jjtn000 = new ASTOctetStringType(JJTOCTETSTRINGTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_OCTET);
			jj_consume_token(RESERVED_STRING);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NullType() throws ParseException {
		/*@bgen(jjtree) NullType */
		ASTNullType jjtn000 = new ASTNullType(JJTNULLTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_NULL);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SequenceType() throws ParseException {
		/*@bgen(jjtree) SequenceType */
		ASTSequenceType jjtn000 = new ASTSequenceType(JJTSEQUENCETYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_SEQUENCE);
			jj_consume_token(TOKEN_BRACE_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_ELLIPSIS:
				case RESERVED_COMPONENTS:
				case LOWERCASE_START:
					if (jj_2_32(3)) {
						ExtensionAndException();
						OptionalExtensionMarker();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case TOKEN_ELLIPSIS:
							case RESERVED_COMPONENTS:
							case LOWERCASE_START:
								ComponentTypeLists();
								break;
							default:
								jj_la1[37] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
					break;
				default:
					jj_la1[38] = jj_gen;
					;
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAndException() throws ParseException {
		/*@bgen(jjtree) ExtensionAndException */
		ASTExtensionAndException jjtn000 = new ASTExtensionAndException(JJTEXTENSIONANDEXCEPTION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_ELLIPSIS);
			ExceptionSpec();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void OptionalExtensionMarker() throws ParseException {
		/*@bgen(jjtree) OptionalExtensionMarker */
		ASTOptionalExtensionMarker jjtn000 = new ASTOptionalExtensionMarker(JJTOPTIONALEXTENSIONMARKER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_COMMA:
					jj_consume_token(TOKEN_COMMA);
					jj_consume_token(TOKEN_ELLIPSIS);
					break;
				default:
					jj_la1[39] = jj_gen;
					;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ComponentTypeLists() throws ParseException {
		/*@bgen(jjtree) ComponentTypeLists */
		ASTComponentTypeLists jjtn000 = new ASTComponentTypeLists(JJTCOMPONENTTYPELISTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_COMPONENTS:
				case LOWERCASE_START:
					ComponentTypeList();
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case TOKEN_COMMA:
							jj_consume_token(TOKEN_COMMA);
							ExtensionAndException();
							ExtensionAdditions();
							OptionalExtensionMarker();
							break;
						default:
							jj_la1[40] = jj_gen;
							;
					}
					break;
				case TOKEN_ELLIPSIS:
					ExtensionAndException();
					ExtensionAdditions();
					OptionalExtensionMarker();
					break;
				default:
					jj_la1[41] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionEndMarker() throws ParseException {
		/*@bgen(jjtree) ExtensionEndMarker */
		ASTExtensionEndMarker jjtn000 = new ASTExtensionEndMarker(JJTEXTENSIONENDMARKER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_COMMA);
			jj_consume_token(TOKEN_ELLIPSIS);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAdditions() throws ParseException {
		/*@bgen(jjtree) ExtensionAdditions */
		ASTExtensionAdditions jjtn000 = new ASTExtensionAdditions(JJTEXTENSIONADDITIONS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_33(2)) {
				jj_consume_token(TOKEN_COMMA);
				ExtensionAdditionsList();
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAdditionsList() throws ParseException {
		/*@bgen(jjtree) ExtensionAdditionsList */
		ASTExtensionAdditionsList jjtn000 = new ASTExtensionAdditionsList(JJTEXTENSIONADDITIONSLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ExtensionAddition();
			label_10:
			while (true) {
				if (jj_2_34(2)) {
					;
				} else {
					break label_10;
				}
				jj_consume_token(TOKEN_COMMA);
				ExtensionAddition();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAddition() throws ParseException {
		/*@bgen(jjtree) ExtensionAddition */
		ASTExtensionAddition jjtn000 = new ASTExtensionAddition(JJTEXTENSIONADDITION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_COMPONENTS:
				case LOWERCASE_START:
					ComponentType();
					break;
				case 123:
					ExtensionAdditionGroup();
					break;
				default:
					jj_la1[42] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAdditionGroup() throws ParseException {
		/*@bgen(jjtree) ExtensionAdditionGroup */
		ASTExtensionAdditionGroup jjtn000 = new ASTExtensionAdditionGroup(JJTEXTENSIONADDITIONGROUP);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(123);
			VersionNumber();
			ComponentTypeList();
			jj_consume_token(124);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void VersionNumber() throws ParseException {
		/*@bgen(jjtree) VersionNumber */
		ASTVersionNumber jjtn000 = new ASTVersionNumber(JJTVERSIONNUMBER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case ZERO:
				case NUMBER:
					Number();
					jj_consume_token(TOKEN_COLON);
					break;
				default:
					jj_la1[43] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ComponentTypeList() throws ParseException {
		/*@bgen(jjtree) ComponentTypeList */
		ASTComponentTypeList jjtn000 = new ASTComponentTypeList(JJTCOMPONENTTYPELIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ComponentType();
			label_11:
			while (true) {
				if (jj_2_35(2)) {
					;
				} else {
					break label_11;
				}
				jj_consume_token(TOKEN_COMMA);
				ComponentType();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ComponentType() throws ParseException {
		/*@bgen(jjtree) ComponentType */
		ASTComponentType jjtn000 = new ASTComponentType(JJTCOMPONENTTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LOWERCASE_START:
					NamedType();
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case RESERVED_DEFAULT:
						case RESERVED_OPTIONAL:
							switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
								case RESERVED_OPTIONAL:
									jj_consume_token(RESERVED_OPTIONAL);
									break;
								case RESERVED_DEFAULT:
									jj_consume_token(RESERVED_DEFAULT);
									Value();
									break;
								default:
									jj_la1[44] = jj_gen;
									jj_consume_token(-1);
									throw new ParseException();
							}
							break;
						default:
							jj_la1[45] = jj_gen;
							;
					}
					break;
				case RESERVED_COMPONENTS:
					jj_consume_token(RESERVED_COMPONENTS);
					jj_consume_token(RESERVED_OF);
					Type();
					break;
				default:
					jj_la1[46] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SequenceOfType() throws ParseException {
		/*@bgen(jjtree) SequenceOfType */
		ASTSequenceOfType jjtn000 = new ASTSequenceOfType(JJTSEQUENCEOFTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_SEQUENCE);
			jj_consume_token(RESERVED_OF);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_BRACKET_LEFT:
				case RESERVED_BIT:
				case RESERVED_BMP_STRING:
				case RESERVED_BOOLEAN:
				case RESERVED_CHARACTER:
				case RESERVED_CHOICE:
				case RESERVED_EMBEDDED:
				case RESERVED_ENUMERATED:
				case RESERVED_EXTERNAL:
				case RESERVED_GENERAL_STRING:
				case RESERVED_GRAPHIC_STRING:
				case RESERVED_IA5_STRING:
				case RESERVED_INTEGER:
				case RESERVED_ISO646_STRING:
				case RESERVED_NULL:
				case RESERVED_NUMERIC_STRING:
				case RESERVED_OBJECT:
				case RESERVED_OCTET:
				case RESERVED_PRINTABLE_STRING:
				case RESERVED_REAL:
				case RESERVED_RELATIVE_OID:
				case RESERVED_SEQUENCE:
				case RESERVED_SET:
				case RESERVED_T61_STRING:
				case RESERVED_TELETEX_STRING:
				case RESERVED_UNIVERSAL_STRING:
				case RESERVED_UTF8_STRING:
				case RESERVED_VIDEOTEX_STRING:
				case RESERVED_VISIBLE_STRING:
				case UPPERCASE_START:
					Type();
					break;
				case LOWERCASE_START:
					NamedType();
					break;
				default:
					jj_la1[47] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SetType() throws ParseException {
		/*@bgen(jjtree) SetType */
		ASTSetType jjtn000 = new ASTSetType(JJTSETTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_SET);
			jj_consume_token(TOKEN_BRACE_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_ELLIPSIS:
				case RESERVED_COMPONENTS:
				case LOWERCASE_START:
					if (jj_2_36(3)) {
						ComponentTypeLists();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case TOKEN_ELLIPSIS:
								ExtensionAndException();
								OptionalExtensionMarker();
								break;
							default:
								jj_la1[48] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
					break;
				default:
					jj_la1[49] = jj_gen;
					;
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SetOfType() throws ParseException {
		/*@bgen(jjtree) SetOfType */
		ASTSetOfType jjtn000 = new ASTSetOfType(JJTSETOFTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_SET);
			jj_consume_token(RESERVED_OF);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_BRACKET_LEFT:
				case RESERVED_BIT:
				case RESERVED_BMP_STRING:
				case RESERVED_BOOLEAN:
				case RESERVED_CHARACTER:
				case RESERVED_CHOICE:
				case RESERVED_EMBEDDED:
				case RESERVED_ENUMERATED:
				case RESERVED_EXTERNAL:
				case RESERVED_GENERAL_STRING:
				case RESERVED_GRAPHIC_STRING:
				case RESERVED_IA5_STRING:
				case RESERVED_INTEGER:
				case RESERVED_ISO646_STRING:
				case RESERVED_NULL:
				case RESERVED_NUMERIC_STRING:
				case RESERVED_OBJECT:
				case RESERVED_OCTET:
				case RESERVED_PRINTABLE_STRING:
				case RESERVED_REAL:
				case RESERVED_RELATIVE_OID:
				case RESERVED_SEQUENCE:
				case RESERVED_SET:
				case RESERVED_T61_STRING:
				case RESERVED_TELETEX_STRING:
				case RESERVED_UNIVERSAL_STRING:
				case RESERVED_UTF8_STRING:
				case RESERVED_VIDEOTEX_STRING:
				case RESERVED_VISIBLE_STRING:
				case UPPERCASE_START:
					Type();
					break;
				case LOWERCASE_START:
					NamedType();
					break;
				default:
					jj_la1[50] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ChoiceType() throws ParseException {
		/*@bgen(jjtree) ChoiceType */
		ASTChoiceType jjtn000 = new ASTChoiceType(JJTCHOICETYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_CHOICE);
			jj_consume_token(TOKEN_BRACE_LEFT);
			AlternativeTypeLists();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void AlternativeTypeLists() throws ParseException {
		/*@bgen(jjtree) AlternativeTypeLists */
		ASTAlternativeTypeLists jjtn000 = new ASTAlternativeTypeLists(JJTALTERNATIVETYPELISTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			AlternativeTypeList();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_COMMA:
					jj_consume_token(TOKEN_COMMA);
					ExtensionAndException();
					ExtensionAdditionAlternatives();
					OptionalExtensionMarker();
					break;
				default:
					jj_la1[51] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAdditionAlternatives() throws ParseException {
		/*@bgen(jjtree) ExtensionAdditionAlternatives */
		ASTExtensionAdditionAlternatives jjtn000 = new ASTExtensionAdditionAlternatives(JJTEXTENSIONADDITIONALTERNATIVES);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_37(2)) {
				jj_consume_token(TOKEN_COMMA);
				ExtensionAdditionAlternativesList();
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAdditionAlternativesList() throws ParseException {
		/*@bgen(jjtree) ExtensionAdditionAlternativesList */
		ASTExtensionAdditionAlternativesList jjtn000 = new ASTExtensionAdditionAlternativesList(JJTEXTENSIONADDITIONALTERNATIVESLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ExtensionAdditionAlternative();
			label_12:
			while (true) {
				if (jj_2_38(2)) {
					;
				} else {
					break label_12;
				}
				jj_consume_token(TOKEN_COMMA);
				ExtensionAdditionAlternative();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAdditionAlternative() throws ParseException {
		/*@bgen(jjtree) ExtensionAdditionAlternative */
		ASTExtensionAdditionAlternative jjtn000 = new ASTExtensionAdditionAlternative(JJTEXTENSIONADDITIONALTERNATIVE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LOWERCASE_START:
					NamedType();
					break;
				case 123:
					ExtensionAdditionAlternativesGroup();
					break;
				default:
					jj_la1[52] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExtensionAdditionAlternativesGroup() throws ParseException {
		/*@bgen(jjtree) ExtensionAdditionAlternativesGroup */
		ASTExtensionAdditionAlternativesGroup jjtn000 = new ASTExtensionAdditionAlternativesGroup(JJTEXTENSIONADDITIONALTERNATIVESGROUP);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(123);
			VersionNumber();
			AlternativeTypeList();
			jj_consume_token(124);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void AlternativeTypeList() throws ParseException {
		/*@bgen(jjtree) AlternativeTypeList */
		ASTAlternativeTypeList jjtn000 = new ASTAlternativeTypeList(JJTALTERNATIVETYPELIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			NamedType();
			label_13:
			while (true) {
				if (jj_2_39(2)) {
					;
				} else {
					break label_13;
				}
				jj_consume_token(TOKEN_COMMA);
				NamedType();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SelectionType() throws ParseException {
		/*@bgen(jjtree) SelectionType */
		ASTSelectionType jjtn000 = new ASTSelectionType(JJTSELECTIONTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			jj_consume_token(TOKEN_LESS);
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TaggedType() throws ParseException {
		/*@bgen(jjtree) TaggedType */
		ASTTaggedType jjtn000 = new ASTTaggedType(JJTTAGGEDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Tag();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_EXPLICIT:
				case RESERVED_IMPLICIT:
					TaggingMethod();
					break;
				default:
					jj_la1[53] = jj_gen;
					;
			}
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TaggingMethod() throws ParseException {
		/*@bgen(jjtree) TaggingMethod */
		ASTTaggingMethod jjtn000 = new ASTTaggingMethod(JJTTAGGINGMETHOD);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_EXPLICIT:
					jj_consume_token(RESERVED_EXPLICIT);
					break;
				case RESERVED_IMPLICIT:
					jj_consume_token(RESERVED_IMPLICIT);
					break;
				default:
					jj_la1[54] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Tag() throws ParseException {
		/*@bgen(jjtree) Tag */
		ASTTag jjtn000 = new ASTTag(JJTTAG);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACKET_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_APPLICATION:
				case RESERVED_PRIVATE:
				case RESERVED_UNIVERSAL:
					Class();
					break;
				default:
					jj_la1[55] = jj_gen;
					;
			}
			ClassNumber();
			jj_consume_token(TOKEN_BRACKET_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ClassNumber() throws ParseException {
		/*@bgen(jjtree) ClassNumber */
		ASTClassNumber jjtn000 = new ASTClassNumber(JJTCLASSNUMBER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case ZERO:
				case NUMBER:
					Number();
					break;
				case UPPERCASE_START:
				case LOWERCASE_START:
					DefinedValue();
					break;
				default:
					jj_la1[56] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Class() throws ParseException {
		/*@bgen(jjtree) Class */
		ASTClass jjtn000 = new ASTClass(JJTCLASS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_UNIVERSAL:
					jj_consume_token(RESERVED_UNIVERSAL);
					break;
				case RESERVED_APPLICATION:
					jj_consume_token(RESERVED_APPLICATION);
					break;
				case RESERVED_PRIVATE:
					jj_consume_token(RESERVED_PRIVATE);
					break;
				default:
					jj_la1[57] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void EmbeddedPDVType() throws ParseException {
		/*@bgen(jjtree) EmbeddedPDVType */
		ASTEmbeddedPDVType jjtn000 = new ASTEmbeddedPDVType(JJTEMBEDDEDPDVTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_EMBEDDED);
			jj_consume_token(RESERVED_PDV);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExternalType() throws ParseException {
		/*@bgen(jjtree) ExternalType */
		ASTExternalType jjtn000 = new ASTExternalType(JJTEXTERNALTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_EXTERNAL);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void CharacterStringType() throws ParseException {
		/*@bgen(jjtree) CharacterStringType */
		ASTCharacterStringType jjtn000 = new ASTCharacterStringType(JJTCHARACTERSTRINGTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_BMP_STRING:
				case RESERVED_GENERAL_STRING:
				case RESERVED_GRAPHIC_STRING:
				case RESERVED_IA5_STRING:
				case RESERVED_ISO646_STRING:
				case RESERVED_NUMERIC_STRING:
				case RESERVED_PRINTABLE_STRING:
				case RESERVED_T61_STRING:
				case RESERVED_TELETEX_STRING:
				case RESERVED_UNIVERSAL_STRING:
				case RESERVED_UTF8_STRING:
				case RESERVED_VIDEOTEX_STRING:
				case RESERVED_VISIBLE_STRING:
					RestrictedCharacterStringType();
					break;
				case RESERVED_CHARACTER:
					UnrestrictedCharacterStringType();
					break;
				default:
					jj_la1[58] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void RestrictedCharacterStringType() throws ParseException {
		/*@bgen(jjtree) RestrictedCharacterStringType */
		ASTRestrictedCharacterStringType jjtn000 = new ASTRestrictedCharacterStringType(JJTRESTRICTEDCHARACTERSTRINGTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_BMP_STRING:
					jj_consume_token(RESERVED_BMP_STRING);
					break;
				case RESERVED_GENERAL_STRING:
					jj_consume_token(RESERVED_GENERAL_STRING);
					break;
				case RESERVED_GRAPHIC_STRING:
					jj_consume_token(RESERVED_GRAPHIC_STRING);
					break;
				case RESERVED_IA5_STRING:
					jj_consume_token(RESERVED_IA5_STRING);
					break;
				case RESERVED_ISO646_STRING:
					jj_consume_token(RESERVED_ISO646_STRING);
					break;
				case RESERVED_NUMERIC_STRING:
					jj_consume_token(RESERVED_NUMERIC_STRING);
					break;
				case RESERVED_PRINTABLE_STRING:
					jj_consume_token(RESERVED_PRINTABLE_STRING);
					break;
				case RESERVED_TELETEX_STRING:
					jj_consume_token(RESERVED_TELETEX_STRING);
					break;
				case RESERVED_T61_STRING:
					jj_consume_token(RESERVED_T61_STRING);
					break;
				case RESERVED_UNIVERSAL_STRING:
					jj_consume_token(RESERVED_UNIVERSAL_STRING);
					break;
				case RESERVED_UTF8_STRING:
					jj_consume_token(RESERVED_UTF8_STRING);
					break;
				case RESERVED_VIDEOTEX_STRING:
					jj_consume_token(RESERVED_VIDEOTEX_STRING);
					break;
				case RESERVED_VISIBLE_STRING:
					jj_consume_token(RESERVED_VISIBLE_STRING);
					break;
				default:
					jj_la1[59] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UnrestrictedCharacterStringType() throws ParseException {
		/*@bgen(jjtree) UnrestrictedCharacterStringType */
		ASTUnrestrictedCharacterStringType jjtn000 = new ASTUnrestrictedCharacterStringType(JJTUNRESTRICTEDCHARACTERSTRINGTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_CHARACTER);
			jj_consume_token(RESERVED_STRING);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void CharacterStringValue() throws ParseException {
		/*@bgen(jjtree) CharacterStringValue */
		ASTCharacterStringValue jjtn000 = new ASTCharacterStringValue(JJTCHARACTERSTRINGVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_40(3)) {
				RestrictedCharacterStringValue();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_BRACE_LEFT:
						UnrestrictedCharacterStringValue();
						break;
					default:
						jj_la1[60] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UnrestrictedCharacterStringValue() throws ParseException {
		/*@bgen(jjtree) UnrestrictedCharacterStringValue */
		ASTUnrestrictedCharacterStringValue jjtn000 = new ASTUnrestrictedCharacterStringValue(JJTUNRESTRICTEDCHARACTERSTRINGVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SequenceValue();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UsefulType() throws ParseException {
		/*@bgen(jjtree) UsefulType */
		ASTUsefulType jjtn000 = new ASTUsefulType(JJTUSEFULTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			TypeReference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TypeWithConstraint() throws ParseException {
		/*@bgen(jjtree) TypeWithConstraint */
		ASTTypeWithConstraint jjtn000 = new ASTTypeWithConstraint(JJTTYPEWITHCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_SET:
					jj_consume_token(RESERVED_SET);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case TOKEN_PAREN_LEFT:
							Constraint();
							break;
						case RESERVED_SIZE:
							SizeConstraint();
							break;
						default:
							jj_la1[61] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					jj_consume_token(RESERVED_OF);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case TOKEN_BRACKET_LEFT:
						case RESERVED_BIT:
						case RESERVED_BMP_STRING:
						case RESERVED_BOOLEAN:
						case RESERVED_CHARACTER:
						case RESERVED_CHOICE:
						case RESERVED_EMBEDDED:
						case RESERVED_ENUMERATED:
						case RESERVED_EXTERNAL:
						case RESERVED_GENERAL_STRING:
						case RESERVED_GRAPHIC_STRING:
						case RESERVED_IA5_STRING:
						case RESERVED_INTEGER:
						case RESERVED_ISO646_STRING:
						case RESERVED_NULL:
						case RESERVED_NUMERIC_STRING:
						case RESERVED_OBJECT:
						case RESERVED_OCTET:
						case RESERVED_PRINTABLE_STRING:
						case RESERVED_REAL:
						case RESERVED_RELATIVE_OID:
						case RESERVED_SEQUENCE:
						case RESERVED_SET:
						case RESERVED_T61_STRING:
						case RESERVED_TELETEX_STRING:
						case RESERVED_UNIVERSAL_STRING:
						case RESERVED_UTF8_STRING:
						case RESERVED_VIDEOTEX_STRING:
						case RESERVED_VISIBLE_STRING:
						case UPPERCASE_START:
							Type();
							break;
						case LOWERCASE_START:
							NamedType();
							break;
						default:
							jj_la1[62] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					break;
				case RESERVED_SEQUENCE:
					jj_consume_token(RESERVED_SEQUENCE);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case TOKEN_PAREN_LEFT:
							Constraint();
							break;
						case RESERVED_SIZE:
							SizeConstraint();
							break;
						default:
							jj_la1[63] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					jj_consume_token(RESERVED_OF);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case TOKEN_BRACKET_LEFT:
						case RESERVED_BIT:
						case RESERVED_BMP_STRING:
						case RESERVED_BOOLEAN:
						case RESERVED_CHARACTER:
						case RESERVED_CHOICE:
						case RESERVED_EMBEDDED:
						case RESERVED_ENUMERATED:
						case RESERVED_EXTERNAL:
						case RESERVED_GENERAL_STRING:
						case RESERVED_GRAPHIC_STRING:
						case RESERVED_IA5_STRING:
						case RESERVED_INTEGER:
						case RESERVED_ISO646_STRING:
						case RESERVED_NULL:
						case RESERVED_NUMERIC_STRING:
						case RESERVED_OBJECT:
						case RESERVED_OCTET:
						case RESERVED_PRINTABLE_STRING:
						case RESERVED_REAL:
						case RESERVED_RELATIVE_OID:
						case RESERVED_SEQUENCE:
						case RESERVED_SET:
						case RESERVED_T61_STRING:
						case RESERVED_TELETEX_STRING:
						case RESERVED_UNIVERSAL_STRING:
						case RESERVED_UTF8_STRING:
						case RESERVED_VIDEOTEX_STRING:
						case RESERVED_VISIBLE_STRING:
						case UPPERCASE_START:
							Type();
							break;
						case LOWERCASE_START:
							NamedType();
							break;
						default:
							jj_la1[64] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					break;
				default:
					jj_la1[65] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Constraint() throws ParseException {
		/*@bgen(jjtree) Constraint */
		ASTConstraint jjtn000 = new ASTConstraint(JJTCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_PAREN_LEFT);
			ConstraintSpec();
			ExceptionSpec();
			jj_consume_token(TOKEN_PAREN_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ConstraintSpec() throws ParseException {
		/*@bgen(jjtree) ConstraintSpec */
		ASTConstraintSpec jjtn000 = new ASTConstraintSpec(JJTCONSTRAINTSPEC);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_41(3)) {
				SubtypeConstraint();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case RESERVED_CONSTRAINED:
					case RESERVED_CONTAINING:
					case RESERVED_ENCODED:
						GeneralConstraint();
						break;
					default:
						jj_la1[66] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void GeneralConstraint() throws ParseException {
		/*@bgen(jjtree) GeneralConstraint */
		ASTGeneralConstraint jjtn000 = new ASTGeneralConstraint(JJTGENERALCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_CONSTRAINED:
					UserDefinedConstraint();
					break;
				case RESERVED_CONTAINING:
				case RESERVED_ENCODED:
					ContentsConstraint();
					break;
				default:
					jj_la1[67] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UserDefinedConstraint() throws ParseException {
		/*@bgen(jjtree) UserDefinedConstraint */
		ASTUserDefinedConstraint jjtn000 = new ASTUserDefinedConstraint(JJTUSERDEFINEDCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_CONSTRAINED);
			jj_consume_token(RESERVED_BY);
			jj_consume_token(TOKEN_BRACE_LEFT);
			UserDefinedConstraintParameter();
			label_14:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[68] = jj_gen;
						break label_14;
				}
				jj_consume_token(TOKEN_COMMA);
				UserDefinedConstraintParameter();
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UserDefinedConstraintParameter() throws ParseException {
		/*@bgen(jjtree) UserDefinedConstraintParameter */
		ASTUserDefinedConstraintParameter jjtn000 = new ASTUserDefinedConstraintParameter(JJTUSERDEFINEDCONSTRAINTPARAMETER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_42(3)) {
				Governor();
				jj_consume_token(TOKEN_COLON);
				Value();
			} else if (jj_2_43(3)) {
				Governor();
				jj_consume_token(TOKEN_COLON);
				ValueSet();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_BRACKET_LEFT:
					case RESERVED_BIT:
					case RESERVED_BMP_STRING:
					case RESERVED_BOOLEAN:
					case RESERVED_CHARACTER:
					case RESERVED_CHOICE:
					case RESERVED_EMBEDDED:
					case RESERVED_ENUMERATED:
					case RESERVED_EXTERNAL:
					case RESERVED_GENERAL_STRING:
					case RESERVED_GRAPHIC_STRING:
					case RESERVED_IA5_STRING:
					case RESERVED_INTEGER:
					case RESERVED_ISO646_STRING:
					case RESERVED_NULL:
					case RESERVED_NUMERIC_STRING:
					case RESERVED_OBJECT:
					case RESERVED_OCTET:
					case RESERVED_PRINTABLE_STRING:
					case RESERVED_REAL:
					case RESERVED_RELATIVE_OID:
					case RESERVED_SEQUENCE:
					case RESERVED_SET:
					case RESERVED_T61_STRING:
					case RESERVED_TELETEX_STRING:
					case RESERVED_UNIVERSAL_STRING:
					case RESERVED_UTF8_STRING:
					case RESERVED_VIDEOTEX_STRING:
					case RESERVED_VISIBLE_STRING:
					case UPPERCASE_START:
						Type();
						break;
					default:
						jj_la1[69] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ContentsConstraint() throws ParseException {
		/*@bgen(jjtree) ContentsConstraint */
		ASTContentsConstraint jjtn000 = new ASTContentsConstraint(JJTCONTENTSCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_CONTAINING:
					jj_consume_token(RESERVED_CONTAINING);
					Type();
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case RESERVED_ENCODED:
							jj_consume_token(RESERVED_ENCODED);
							jj_consume_token(RESERVED_BY);
							Value();
							break;
						default:
							jj_la1[70] = jj_gen;
							;
					}
					break;
				case RESERVED_ENCODED:
					jj_consume_token(RESERVED_ENCODED);
					jj_consume_token(RESERVED_BY);
					Value();
					break;
				default:
					jj_la1[71] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExceptionSpec() throws ParseException {
		/*@bgen(jjtree) ExceptionSpec */
		ASTExceptionSpec jjtn000 = new ASTExceptionSpec(JJTEXCEPTIONSPEC);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case 125:
					jj_consume_token(125);
					ExceptionIdentification();
					break;
				default:
					jj_la1[72] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExceptionIdentification() throws ParseException {
		/*@bgen(jjtree) ExceptionIdentification */
		ASTExceptionIdentification jjtn000 = new ASTExceptionIdentification(JJTEXCEPTIONIDENTIFICATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_44(2)) {
				SignedNumber();
			} else if (jj_2_45(2)) {
				DefinedValue();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_BRACKET_LEFT:
					case RESERVED_BIT:
					case RESERVED_BMP_STRING:
					case RESERVED_BOOLEAN:
					case RESERVED_CHARACTER:
					case RESERVED_CHOICE:
					case RESERVED_EMBEDDED:
					case RESERVED_ENUMERATED:
					case RESERVED_EXTERNAL:
					case RESERVED_GENERAL_STRING:
					case RESERVED_GRAPHIC_STRING:
					case RESERVED_IA5_STRING:
					case RESERVED_INTEGER:
					case RESERVED_ISO646_STRING:
					case RESERVED_NULL:
					case RESERVED_NUMERIC_STRING:
					case RESERVED_OBJECT:
					case RESERVED_OCTET:
					case RESERVED_PRINTABLE_STRING:
					case RESERVED_REAL:
					case RESERVED_RELATIVE_OID:
					case RESERVED_SEQUENCE:
					case RESERVED_SET:
					case RESERVED_T61_STRING:
					case RESERVED_TELETEX_STRING:
					case RESERVED_UNIVERSAL_STRING:
					case RESERVED_UTF8_STRING:
					case RESERVED_VIDEOTEX_STRING:
					case RESERVED_VISIBLE_STRING:
					case UPPERCASE_START:
						Type();
						jj_consume_token(TOKEN_COLON);
						Value();
						break;
					default:
						jj_la1[73] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SubtypeConstraint() throws ParseException {
		/*@bgen(jjtree) SubtypeConstraint */
		ASTSubtypeConstraint jjtn000 = new ASTSubtypeConstraint(JJTSUBTYPECONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ElementSetSpecs();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ElementSetSpecs() throws ParseException {
		/*@bgen(jjtree) ElementSetSpecs */
		ASTElementSetSpecs jjtn000 = new ASTElementSetSpecs(JJTELEMENTSETSPECS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ElementSetSpec();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_COMMA:
					jj_consume_token(TOKEN_COMMA);
					jj_consume_token(TOKEN_ELLIPSIS);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case TOKEN_COMMA:
							jj_consume_token(TOKEN_COMMA);
							AdditionalElementSetSpec();
							break;
						default:
							jj_la1[74] = jj_gen;
							;
					}
					break;
				default:
					jj_la1[75] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void AdditionalElementSetSpec() throws ParseException {
		/*@bgen(jjtree) AdditionalElementSetSpec */
		ASTAdditionalElementSetSpec jjtn000 = new ASTAdditionalElementSetSpec(JJTADDITIONALELEMENTSETSPEC);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ElementSetSpec();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ElementSetSpec() throws ParseException {
		/*@bgen(jjtree) ElementSetSpec */
		ASTElementSetSpec jjtn000 = new ASTElementSetSpec(JJTELEMENTSETSPEC);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_MINUS:
				case TOKEN_BAR:
				case TOKEN_BRACKET_LEFT:
				case TOKEN_PAREN_LEFT:
				case TOKEN_BRACE_LEFT:
				case RESERVED_BIT:
				case RESERVED_BMP_STRING:
				case RESERVED_BOOLEAN:
				case RESERVED_CHARACTER:
				case RESERVED_CHOICE:
				case RESERVED_CONTAINING:
				case RESERVED_EMBEDDED:
				case RESERVED_ENUMERATED:
				case RESERVED_EXTERNAL:
				case RESERVED_FALSE:
				case RESERVED_FROM:
				case RESERVED_GENERAL_STRING:
				case RESERVED_GRAPHIC_STRING:
				case RESERVED_IA5_STRING:
				case RESERVED_INCLUDES:
				case RESERVED_INTEGER:
				case RESERVED_INTERSECTION:
				case RESERVED_ISO646_STRING:
				case RESERVED_MIN:
				case RESERVED_MINUS_INFINITY:
				case RESERVED_NULL:
				case RESERVED_NUMERIC_STRING:
				case RESERVED_OBJECT:
				case RESERVED_OCTET:
				case RESERVED_PATTERN:
				case RESERVED_PLUS_INFINITY:
				case RESERVED_PRINTABLE_STRING:
				case RESERVED_REAL:
				case RESERVED_RELATIVE_OID:
				case RESERVED_SEQUENCE:
				case RESERVED_SET:
				case RESERVED_SIZE:
				case RESERVED_T61_STRING:
				case RESERVED_TELETEX_STRING:
				case RESERVED_TRUE:
				case RESERVED_UNION:
				case RESERVED_UNIVERSAL_STRING:
				case RESERVED_UTF8_STRING:
				case RESERVED_VIDEOTEX_STRING:
				case RESERVED_VISIBLE_STRING:
				case RESERVED_WITH:
				case UPPERCASE_START:
				case LOWERCASE_START:
				case ZERO:
				case NUMBER:
				case REAL:
				case BIT_STRING:
				case HEX_STRING:
				case STRING:
				case 126:
					Unions();
					break;
				case RESERVED_ALL:
					jj_consume_token(RESERVED_ALL);
					Exclusions();
					break;
				default:
					jj_la1[76] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Unions() throws ParseException {
		/*@bgen(jjtree) Unions */
		ASTUnions jjtn000 = new ASTUnions(JJTUNIONS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			label_15:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_BAR:
					case RESERVED_UNION:
						UnionMark();
						break;
					default:
						jj_la1[77] = jj_gen;
						;
				}
				Intersections();
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_MINUS:
					case TOKEN_BAR:
					case TOKEN_BRACKET_LEFT:
					case TOKEN_PAREN_LEFT:
					case TOKEN_BRACE_LEFT:
					case RESERVED_BIT:
					case RESERVED_BMP_STRING:
					case RESERVED_BOOLEAN:
					case RESERVED_CHARACTER:
					case RESERVED_CHOICE:
					case RESERVED_CONTAINING:
					case RESERVED_EMBEDDED:
					case RESERVED_ENUMERATED:
					case RESERVED_EXTERNAL:
					case RESERVED_FALSE:
					case RESERVED_FROM:
					case RESERVED_GENERAL_STRING:
					case RESERVED_GRAPHIC_STRING:
					case RESERVED_IA5_STRING:
					case RESERVED_INCLUDES:
					case RESERVED_INTEGER:
					case RESERVED_INTERSECTION:
					case RESERVED_ISO646_STRING:
					case RESERVED_MIN:
					case RESERVED_MINUS_INFINITY:
					case RESERVED_NULL:
					case RESERVED_NUMERIC_STRING:
					case RESERVED_OBJECT:
					case RESERVED_OCTET:
					case RESERVED_PATTERN:
					case RESERVED_PLUS_INFINITY:
					case RESERVED_PRINTABLE_STRING:
					case RESERVED_REAL:
					case RESERVED_RELATIVE_OID:
					case RESERVED_SEQUENCE:
					case RESERVED_SET:
					case RESERVED_SIZE:
					case RESERVED_T61_STRING:
					case RESERVED_TELETEX_STRING:
					case RESERVED_TRUE:
					case RESERVED_UNION:
					case RESERVED_UNIVERSAL_STRING:
					case RESERVED_UTF8_STRING:
					case RESERVED_VIDEOTEX_STRING:
					case RESERVED_VISIBLE_STRING:
					case RESERVED_WITH:
					case UPPERCASE_START:
					case LOWERCASE_START:
					case ZERO:
					case NUMBER:
					case REAL:
					case BIT_STRING:
					case HEX_STRING:
					case STRING:
					case 126:
						;
						break;
					default:
						jj_la1[78] = jj_gen;
						break label_15;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Intersections() throws ParseException {
		/*@bgen(jjtree) Intersections */
		ASTIntersections jjtn000 = new ASTIntersections(JJTINTERSECTIONS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			label_16:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case RESERVED_INTERSECTION:
					case 126:
						IntersectionMark();
						break;
					default:
						jj_la1[79] = jj_gen;
						;
				}
				IntersectionElements();
				if (jj_2_46(2)) {
					;
				} else {
					break label_16;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void IntersectionElements() throws ParseException {
		/*@bgen(jjtree) IntersectionElements */
		ASTIntersectionElements jjtn000 = new ASTIntersectionElements(JJTINTERSECTIONELEMENTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Elements();
			if (jj_2_47(2)) {
				Exclusions();
			} else {
				;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Exclusions() throws ParseException {
		/*@bgen(jjtree) Exclusions */
		ASTExclusions jjtn000 = new ASTExclusions(JJTEXCLUSIONS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_EXCEPT);
			Elements();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UnionMark() throws ParseException {
		/*@bgen(jjtree) UnionMark */
		ASTUnionMark jjtn000 = new ASTUnionMark(JJTUNIONMARK);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_BAR:
					jj_consume_token(TOKEN_BAR);
					break;
				case RESERVED_UNION:
					jj_consume_token(RESERVED_UNION);
					break;
				default:
					jj_la1[80] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void IntersectionMark() throws ParseException {
		/*@bgen(jjtree) IntersectionMark */
		ASTIntersectionMark jjtn000 = new ASTIntersectionMark(JJTINTERSECTIONMARK);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case 126:
					jj_consume_token(126);
					break;
				case RESERVED_INTERSECTION:
					jj_consume_token(RESERVED_INTERSECTION);
					break;
				default:
					jj_la1[81] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Elements() throws ParseException {
		/*@bgen(jjtree) Elements */
		ASTElements jjtn000 = new ASTElements(JJTELEMENTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_MINUS:
				case TOKEN_BRACKET_LEFT:
				case TOKEN_BRACE_LEFT:
				case RESERVED_BIT:
				case RESERVED_BMP_STRING:
				case RESERVED_BOOLEAN:
				case RESERVED_CHARACTER:
				case RESERVED_CHOICE:
				case RESERVED_CONTAINING:
				case RESERVED_EMBEDDED:
				case RESERVED_ENUMERATED:
				case RESERVED_EXTERNAL:
				case RESERVED_FALSE:
				case RESERVED_FROM:
				case RESERVED_GENERAL_STRING:
				case RESERVED_GRAPHIC_STRING:
				case RESERVED_IA5_STRING:
				case RESERVED_INCLUDES:
				case RESERVED_INTEGER:
				case RESERVED_ISO646_STRING:
				case RESERVED_MIN:
				case RESERVED_MINUS_INFINITY:
				case RESERVED_NULL:
				case RESERVED_NUMERIC_STRING:
				case RESERVED_OBJECT:
				case RESERVED_OCTET:
				case RESERVED_PATTERN:
				case RESERVED_PLUS_INFINITY:
				case RESERVED_PRINTABLE_STRING:
				case RESERVED_REAL:
				case RESERVED_RELATIVE_OID:
				case RESERVED_SEQUENCE:
				case RESERVED_SET:
				case RESERVED_SIZE:
				case RESERVED_T61_STRING:
				case RESERVED_TELETEX_STRING:
				case RESERVED_TRUE:
				case RESERVED_UNIVERSAL_STRING:
				case RESERVED_UTF8_STRING:
				case RESERVED_VIDEOTEX_STRING:
				case RESERVED_VISIBLE_STRING:
				case RESERVED_WITH:
				case UPPERCASE_START:
				case LOWERCASE_START:
				case ZERO:
				case NUMBER:
				case REAL:
				case BIT_STRING:
				case HEX_STRING:
				case STRING:
					SubtypeElements();
					break;
				case TOKEN_PAREN_LEFT:
					jj_consume_token(TOKEN_PAREN_LEFT);
					ElementSetSpec();
					jj_consume_token(TOKEN_PAREN_RIGHT);
					break;
				default:
					jj_la1[82] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SubtypeElements() throws ParseException {
		/*@bgen(jjtree) SubtypeElements */
		ASTSubtypeElements jjtn000 = new ASTSubtypeElements(JJTSUBTYPEELEMENTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_48(2)) {
				ValueRange();
			} else if (jj_2_49(2)) {
				Value();
			} else if (jj_2_50(2)) {
				ContainedSubtype();
			} else if (jj_2_51(2)) {
				PermittedAlphabet();
			} else if (jj_2_52(2)) {
				SizeConstraint();
			} else if (jj_2_53(2)) {
				TypeConstraint();
			} else if (jj_2_54(2)) {
				InnerTypeConstraints();
			} else if (jj_2_55(2)) {
				PatternConstraint();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ContainedSubtype() throws ParseException {
		/*@bgen(jjtree) ContainedSubtype */
		ASTContainedSubtype jjtn000 = new ASTContainedSubtype(JJTCONTAINEDSUBTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_INCLUDES:
					jj_consume_token(RESERVED_INCLUDES);
					break;
				default:
					jj_la1[83] = jj_gen;
					;
			}
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueRange() throws ParseException {
		/*@bgen(jjtree) ValueRange */
		ASTValueRange jjtn000 = new ASTValueRange(JJTVALUERANGE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			LowerEndpoint();
			jj_consume_token(TOKEN_RANGE);
			UpperEndpoint();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void LowerEndpoint() throws ParseException {
		/*@bgen(jjtree) LowerEndpoint */
		ASTLowerEndpoint jjtn000 = new ASTLowerEndpoint(JJTLOWERENDPOINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			LowerEndValue();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_LESS:
					jj_consume_token(TOKEN_LESS);
					break;
				default:
					jj_la1[84] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UpperEndpoint() throws ParseException {
		/*@bgen(jjtree) UpperEndpoint */
		ASTUpperEndpoint jjtn000 = new ASTUpperEndpoint(JJTUPPERENDPOINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_LESS:
					jj_consume_token(TOKEN_LESS);
					break;
				default:
					jj_la1[85] = jj_gen;
					;
			}
			UpperEndValue();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void LowerEndValue() throws ParseException {
		/*@bgen(jjtree) LowerEndValue */
		ASTLowerEndValue jjtn000 = new ASTLowerEndValue(JJTLOWERENDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_MIN:
					jj_consume_token(RESERVED_MIN);
					break;
				case TOKEN_MINUS:
				case TOKEN_BRACE_LEFT:
				case RESERVED_CONTAINING:
				case RESERVED_FALSE:
				case RESERVED_MINUS_INFINITY:
				case RESERVED_NULL:
				case RESERVED_PLUS_INFINITY:
				case RESERVED_TRUE:
				case UPPERCASE_START:
				case LOWERCASE_START:
				case ZERO:
				case NUMBER:
				case REAL:
				case BIT_STRING:
				case HEX_STRING:
				case STRING:
					Value();
					break;
				default:
					jj_la1[86] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void UpperEndValue() throws ParseException {
		/*@bgen(jjtree) UpperEndValue */
		ASTUpperEndValue jjtn000 = new ASTUpperEndValue(JJTUPPERENDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_MAX:
					jj_consume_token(RESERVED_MAX);
					break;
				case TOKEN_MINUS:
				case TOKEN_BRACE_LEFT:
				case RESERVED_CONTAINING:
				case RESERVED_FALSE:
				case RESERVED_MINUS_INFINITY:
				case RESERVED_NULL:
				case RESERVED_PLUS_INFINITY:
				case RESERVED_TRUE:
				case UPPERCASE_START:
				case LOWERCASE_START:
				case ZERO:
				case NUMBER:
				case REAL:
				case BIT_STRING:
				case HEX_STRING:
				case STRING:
					Value();
					break;
				default:
					jj_la1[87] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SizeConstraint() throws ParseException {
		/*@bgen(jjtree) SizeConstraint */
		ASTSizeConstraint jjtn000 = new ASTSizeConstraint(JJTSIZECONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_SIZE);
			Constraint();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void PermittedAlphabet() throws ParseException {
		/*@bgen(jjtree) PermittedAlphabet */
		ASTPermittedAlphabet jjtn000 = new ASTPermittedAlphabet(JJTPERMITTEDALPHABET);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_FROM);
			Constraint();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TypeConstraint() throws ParseException {
		/*@bgen(jjtree) TypeConstraint */
		ASTTypeConstraint jjtn000 = new ASTTypeConstraint(JJTTYPECONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void InnerTypeConstraints() throws ParseException {
		/*@bgen(jjtree) InnerTypeConstraints */
		ASTInnerTypeConstraints jjtn000 = new ASTInnerTypeConstraints(JJTINNERTYPECONSTRAINTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_WITH);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_COMPONENT:
					jj_consume_token(RESERVED_COMPONENT);
					SingleTypeConstraint();
					break;
				case RESERVED_COMPONENTS:
					jj_consume_token(RESERVED_COMPONENTS);
					MultipleTypeConstraint();
					break;
				default:
					jj_la1[88] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SingleTypeConstraint() throws ParseException {
		/*@bgen(jjtree) SingleTypeConstraint */
		ASTSingleTypeConstraint jjtn000 = new ASTSingleTypeConstraint(JJTSINGLETYPECONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Constraint();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void MultipleTypeConstraint() throws ParseException {
		/*@bgen(jjtree) MultipleTypeConstraint */
		ASTMultipleTypeConstraint jjtn000 = new ASTMultipleTypeConstraint(JJTMULTIPLETYPECONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_56(2)) {
				FullSpecification();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_BRACE_LEFT:
						PartialSpecification();
						break;
					default:
						jj_la1[89] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void FullSpecification() throws ParseException {
		/*@bgen(jjtree) FullSpecification */
		ASTFullSpecification jjtn000 = new ASTFullSpecification(JJTFULLSPECIFICATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			TypeConstraints();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void PartialSpecification() throws ParseException {
		/*@bgen(jjtree) PartialSpecification */
		ASTPartialSpecification jjtn000 = new ASTPartialSpecification(JJTPARTIALSPECIFICATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			jj_consume_token(TOKEN_ELLIPSIS);
			jj_consume_token(TOKEN_COMMA);
			TypeConstraints();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TypeConstraints() throws ParseException {
		/*@bgen(jjtree) TypeConstraints */
		ASTTypeConstraints jjtn000 = new ASTTypeConstraints(JJTTYPECONSTRAINTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			NamedConstraint();
			label_17:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[90] = jj_gen;
						break label_17;
				}
				jj_consume_token(TOKEN_COMMA);
				NamedConstraint();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedConstraint() throws ParseException {
		/*@bgen(jjtree) NamedConstraint */
		ASTNamedConstraint jjtn000 = new ASTNamedConstraint(JJTNAMEDCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			ComponentConstraint();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ComponentConstraint() throws ParseException {
		/*@bgen(jjtree) ComponentConstraint */
		ASTComponentConstraint jjtn000 = new ASTComponentConstraint(JJTCOMPONENTCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ValueConstraint();
			PresenceConstraint();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueConstraint() throws ParseException {
		/*@bgen(jjtree) ValueConstraint */
		ASTValueConstraint jjtn000 = new ASTValueConstraint(JJTVALUECONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_PAREN_LEFT:
					Constraint();
					break;
				default:
					jj_la1[91] = jj_gen;
					;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParametrizedAssignment() throws ParseException {
		/*@bgen(jjtree) ParametrizedAssignment */
		ASTParametrizedAssignment jjtn000 = new ASTParametrizedAssignment(JJTPARAMETRIZEDASSIGNMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_57(2)) {
				ParametrizedTypeAssignment();
			} else if (jj_2_58(2)) {
				ParametrizedTypeAssignment();
			} else if (jj_2_59(2)) {
				ParametrizedValueAssignment();
			} else if (jj_2_60(2)) {
				ParametrizedValueSetTypeAssignment();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParametrizedTypeAssignment() throws ParseException {
		/*@bgen(jjtree) ParametrizedTypeAssignment */
		ASTParametrizedTypeAssignment jjtn000 = new ASTParametrizedTypeAssignment(JJTPARAMETRIZEDTYPEASSIGNMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			TypeReference();
			ParameterList();
			jj_consume_token(TOKEN_ASSIGNMENT);
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParametrizedValueAssignment() throws ParseException {
		/*@bgen(jjtree) ParametrizedValueAssignment */
		ASTParametrizedValueAssignment jjtn000 = new ASTParametrizedValueAssignment(JJTPARAMETRIZEDVALUEASSIGNMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			ValueReference();
			ParameterList();
			jj_consume_token(TOKEN_ASSIGNMENT);
			Value();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParametrizedValueSetTypeAssignment() throws ParseException {
		/*@bgen(jjtree) ParametrizedValueSetTypeAssignment */
		ASTParametrizedValueSetTypeAssignment jjtn000 = new ASTParametrizedValueSetTypeAssignment(JJTPARAMETRIZEDVALUESETTYPEASSIGNMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			TypeReference();
			ParameterList();
			jj_consume_token(TOKEN_ASSIGNMENT);
			ValueSet();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	/*
void ParametrizedObjectClassAssignment(): {}
{
    ObjectClassReference() ParameterList() DefinedObjectClass() <TOKEN_ASSIGNMENT> ObjectClass()
}

void ParametrizedObjectAssignment(): {}
{
    ObjectReference() ParameterList() DefinedObjectClass() <TOKEN_ASSIGNMENT> Object()
}

void ParametrizedObjectSetAssignment(): {}
{
    ObjectSetReference() ParameterList() DefinedObjectClass() <TOKEN_ASSIGNMENT> ObjectSet()
}
*/
	static final public void ParameterList() throws ParseException {
		/*@bgen(jjtree) ParameterList */
		ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			Parameter();
			label_18:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[92] = jj_gen;
						break label_18;
				}
				jj_consume_token(TOKEN_COMMA);
				Parameter();
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Parameter() throws ParseException {
		/*@bgen(jjtree) Parameter */
		ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_61(2)) {
				ParamGovernor();
				jj_consume_token(TOKEN_COLON);
			} else {
				;
			}
			DummyReference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParamGovernor() throws ParseException {
		/*@bgen(jjtree) ParamGovernor */
		ASTParamGovernor jjtn000 = new ASTParamGovernor(JJTPARAMGOVERNOR);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_62(2)) {
				Governor();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
					case UPPERCASE:
						DummyGovernor();
						break;
					default:
						jj_la1[93] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Governor() throws ParseException {
		/*@bgen(jjtree) Governor */
		ASTGovernor jjtn000 = new ASTGovernor(JJTGOVERNOR);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Type();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void DummyGovernor() throws ParseException {
		/*@bgen(jjtree) DummyGovernor */
		ASTDummyGovernor jjtn000 = new ASTDummyGovernor(JJTDUMMYGOVERNOR);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			DummyReference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void DummyReference() throws ParseException {
		/*@bgen(jjtree) DummyReference */
		ASTDummyReference jjtn000 = new ASTDummyReference(JJTDUMMYREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Reference();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParametrizedType() throws ParseException {
		/*@bgen(jjtree) ParametrizedType */
		ASTParametrizedType jjtn000 = new ASTParametrizedType(JJTPARAMETRIZEDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SimpleDefinedType();
			ActualParameterList();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SimpleDefinedType() throws ParseException {
		/*@bgen(jjtree) SimpleDefinedType */
		ASTSimpleDefinedType jjtn000 = new ASTSimpleDefinedType(JJTSIMPLEDEFINEDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_63(2)) {
				ExternalTypeReference();
			} else if (jj_2_64(2)) {
				TypeReference();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParametrizedValueSetType() throws ParseException {
		/*@bgen(jjtree) ParametrizedValueSetType */
		ASTParametrizedValueSetType jjtn000 = new ASTParametrizedValueSetType(JJTPARAMETRIZEDVALUESETTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SimpleDefinedType();
			ActualParameterList();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	/*
void ParametrizedObjectClass(): {}
{
    DefinedObjectClass() ActualParameterList()
}

void ParametrizedObjectSet(): {}
{
    DefinedObjectSet() ActualParameterList()
}

void ParametrizedObject(): {}
{
    DefinedObject() ActualParameterList()
}
*/
	static final public void ActualParameterList() throws ParseException {
		/*@bgen(jjtree) ActualParameterList */
		ASTActualParameterList jjtn000 = new ASTActualParameterList(JJTACTUALPARAMETERLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			ActualParameter();
			label_19:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[94] = jj_gen;
						break label_19;
				}
				jj_consume_token(TOKEN_COMMA);
				ActualParameter();
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ActualParameter() throws ParseException {
		/*@bgen(jjtree) ActualParameter */
		ASTActualParameter jjtn000 = new ASTActualParameter(JJTACTUALPARAMETER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_65(3)) {
				Type();
			} else if (jj_2_66(3)) {
				Value();
			} else if (jj_2_67(3)) {
				ValueSet();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void PresenceConstraint() throws ParseException {
		/*@bgen(jjtree) PresenceConstraint */
		ASTPresenceConstraint jjtn000 = new ASTPresenceConstraint(JJTPRESENCECONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_ABSENT:
				case RESERVED_OPTIONAL:
				case RESERVED_PRESENT:
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case RESERVED_PRESENT:
							jj_consume_token(RESERVED_PRESENT);
							break;
						case RESERVED_ABSENT:
							jj_consume_token(RESERVED_ABSENT);
							break;
						case RESERVED_OPTIONAL:
							jj_consume_token(RESERVED_OPTIONAL);
							break;
						default:
							jj_la1[95] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
					}
					break;
				default:
					jj_la1[96] = jj_gen;
					;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void PatternConstraint() throws ParseException {
		/*@bgen(jjtree) PatternConstraint */
		ASTPatternConstraint jjtn000 = new ASTPatternConstraint(JJTPATTERNCONSTRAINT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_PATTERN);
			Value();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TypeReference() throws ParseException {
		/*@bgen(jjtree) TypeReference */
		ASTTypeReference jjtn000 = new ASTTypeReference(JJTTYPEREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(UPPERCASE_START);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void identifier() throws ParseException {
		/*@bgen(jjtree) identifier */
		ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(LOWERCASE_START);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueReference() throws ParseException {
		/*@bgen(jjtree) ValueReference */
		ASTValueReference jjtn000 = new ASTValueReference(JJTVALUEREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ModuleReference() throws ParseException {
		/*@bgen(jjtree) ModuleReference */
		ASTModuleReference jjtn000 = new ASTModuleReference(JJTMODULEREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(UPPERCASE_START);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ObjectClassReference() throws ParseException {
		/*@bgen(jjtree) ObjectClassReference */
		ASTObjectClassReference jjtn000 = new ASTObjectClassReference(JJTOBJECTCLASSREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(UPPERCASE);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ObjectReference() throws ParseException {
		/*@bgen(jjtree) ObjectReference */
		ASTObjectReference jjtn000 = new ASTObjectReference(JJTOBJECTREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TypeFieldReference() throws ParseException {
		/*@bgen(jjtree) TypeFieldReference */
		ASTTypeFieldReference jjtn000 = new ASTTypeFieldReference(JJTTYPEFIELDREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TYPE_FIELD_REFERENCE);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueFieldReference() throws ParseException {
		/*@bgen(jjtree) ValueFieldReference */
		ASTValueFieldReference jjtn000 = new ASTValueFieldReference(JJTVALUEFIELDREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(VALUE_FIELD_REFERENCE);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueSetFieldReference() throws ParseException {
		/*@bgen(jjtree) ValueSetFieldReference */
		ASTValueSetFieldReference jjtn000 = new ASTValueSetFieldReference(JJTVALUESETFIELDREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TYPE_FIELD_REFERENCE);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ObjectFieldReference() throws ParseException {
		/*@bgen(jjtree) ObjectFieldReference */
		ASTObjectFieldReference jjtn000 = new ASTObjectFieldReference(JJTOBJECTFIELDREFERENCE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(VALUE_FIELD_REFERENCE);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Value() throws ParseException {
		/*@bgen(jjtree) Value */
		ASTValue jjtn000 = new ASTValue(JJTVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_68(2)) {
				BuiltinValue();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
						ReferencedValue();
						break;
					default:
						jj_la1[97] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void DefinedValue() throws ParseException {
		/*@bgen(jjtree) DefinedValue */
		ASTDefinedValue jjtn000 = new ASTDefinedValue(JJTDEFINEDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_69(2)) {
				ExternalValueReference();
			} else if (jj_2_70(2)) {
				ValueReference();
			} else if (jj_2_71(2)) {
				ParametrizedValue();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ObjectIdentifierType() throws ParseException {
		/*@bgen(jjtree) ObjectIdentifierType */
		ASTObjectIdentifierType jjtn000 = new ASTObjectIdentifierType(JJTOBJECTIDENTIFIERTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_OBJECT);
			jj_consume_token(RESERVED_IDENTIFIER);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ObjectIdentifierValue() throws ParseException {
		/*@bgen(jjtree) ObjectIdentifierValue */
		ASTObjectIdentifierValue jjtn000 = new ASTObjectIdentifierValue(JJTOBJECTIDENTIFIERVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			if (jj_2_72(3)) {
				ObjIdComponentsList();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
						DefinedValue();
						ObjIdComponentsList();
						break;
					default:
						jj_la1[98] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void RelativeOIDType() throws ParseException {
		/*@bgen(jjtree) RelativeOIDType */
		ASTRelativeOIDType jjtn000 = new ASTRelativeOIDType(JJTRELATIVEOIDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_RELATIVE_OID);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void RelativeOIDValue() throws ParseException {
		/*@bgen(jjtree) RelativeOIDValue */
		ASTRelativeOIDValue jjtn000 = new ASTRelativeOIDValue(JJTRELATIVEOIDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			RelativeOIDComponentsList();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void RelativeOIDComponentsList() throws ParseException {
		/*@bgen(jjtree) RelativeOIDComponentsList */
		ASTRelativeOIDComponentsList jjtn000 = new ASTRelativeOIDComponentsList(JJTRELATIVEOIDCOMPONENTSLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			RelativeOIDComponents();
			label_20:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
					case ZERO:
					case NUMBER:
						;
						break;
					default:
						jj_la1[99] = jj_gen;
						break label_20;
				}
				RelativeOIDComponents();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void RelativeOIDComponents() throws ParseException {
		/*@bgen(jjtree) RelativeOIDComponents */
		ASTRelativeOIDComponents jjtn000 = new ASTRelativeOIDComponents(JJTRELATIVEOIDCOMPONENTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_73(2)) {
				NumberForm();
			} else if (jj_2_74(2)) {
				NameAndNumberForm();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case UPPERCASE_START:
					case LOWERCASE_START:
						DefinedValue();
						break;
					default:
						jj_la1[100] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void BuiltinValue() throws ParseException {
		/*@bgen(jjtree) BuiltinValue */
		ASTBuiltinValue jjtn000 = new ASTBuiltinValue(JJTBUILTINVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			if (jj_2_75(2)) {
				BitStringValue();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case RESERVED_FALSE:
					case RESERVED_TRUE:
						BooleanValue();
						break;
					default:
						jj_la1[101] = jj_gen;
						if (jj_2_76(2)) {
							CharacterStringValue();
						} else if (jj_2_77(2)) {
							ChoiceValue();
						} else if (jj_2_78(2)) {
							EmbeddedPDVValue();
						} else if (jj_2_79(2)) {
							EnumeratedValue();
						} else if (jj_2_80(2)) {
							ExternalValue();
						} else if (jj_2_81(3)) {
							IntegerValue();
						} else if (jj_2_82(2)) {
							RealValue();
						} else {
							switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
								case RESERVED_NULL:
									NullValue();
									break;
								default:
									jj_la1[102] = jj_gen;
									if (jj_2_83(3)) {
										ObjectIdentifierValue();
									} else if (jj_2_84(3)) {
										OctetStringValue();
									} else if (jj_2_85(3)) {
										RelativeOIDValue();
									} else if (jj_2_86(3)) {
										SequenceValue();
									} else if (jj_2_87(3)) {
										SequenceOfValue();
									} else if (jj_2_88(2)) {
										SetValue();
									} else if (jj_2_89(2)) {
										SetOfValue();
									} else {
										jj_consume_token(-1);
										throw new ParseException();
									}
							}
						}
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ReferencedValue() throws ParseException {
		/*@bgen(jjtree) ReferencedValue */
		ASTReferencedValue jjtn000 = new ASTReferencedValue(JJTREFERENCEDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			DefinedValue();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedValue() throws ParseException {
		/*@bgen(jjtree) NamedValue */
		ASTNamedValue jjtn000 = new ASTNamedValue(JJTNAMEDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			Value();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void BooleanValue() throws ParseException {
		/*@bgen(jjtree) BooleanValue */
		ASTBooleanValue jjtn000 = new ASTBooleanValue(JJTBOOLEANVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_TRUE:
					jj_consume_token(RESERVED_TRUE);
					break;
				case RESERVED_FALSE:
					jj_consume_token(RESERVED_FALSE);
					break;
				default:
					jj_la1[103] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void EnumeratedValue() throws ParseException {
		/*@bgen(jjtree) EnumeratedValue */
		ASTEnumeratedValue jjtn000 = new ASTEnumeratedValue(JJTENUMERATEDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void IntegerValue() throws ParseException {
		/*@bgen(jjtree) IntegerValue */
		ASTIntegerValue jjtn000 = new ASTIntegerValue(JJTINTEGERVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_MINUS:
				case ZERO:
				case NUMBER:
					SignedNumber();
					break;
				case LOWERCASE_START:
					identifier();
					break;
				default:
					jj_la1[104] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public double RealValue() throws ParseException {
		/*@bgen(jjtree) RealValue */
		ASTRealValue jjtn000 = new ASTRealValue(JJTREALVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		double x;
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case REAL:
					x = NumericRealValue();
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
				{if (true) return x;}
				break;
				case RESERVED_MINUS_INFINITY:
				case RESERVED_PLUS_INFINITY:
					x = SpecialRealValue();
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
				{if (true) return x;}
				break;
				default:
					jj_la1[105] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public double NumericRealValue() throws ParseException {
		/*@bgen(jjtree) NumericRealValue */
		ASTNumericRealValue jjtn000 = new ASTNumericRealValue(JJTNUMERICREALVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(REAL);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtreeCloseNodeScope(jjtn000);
			{if (true) return Double.parseDouble(token.image);}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public double SpecialRealValue() throws ParseException {
		/*@bgen(jjtree) SpecialRealValue */
		ASTSpecialRealValue jjtn000 = new ASTSpecialRealValue(JJTSPECIALREALVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case RESERVED_MINUS_INFINITY:
					jj_consume_token(RESERVED_MINUS_INFINITY);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
				{if (true) return Double.NEGATIVE_INFINITY;}
				break;
				case RESERVED_PLUS_INFINITY:
					jj_consume_token(RESERVED_PLUS_INFINITY);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtreeCloseNodeScope(jjtn000);
				{if (true) return Double.POSITIVE_INFINITY;}
				break;
				default:
					jj_la1[106] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public void BitStringValue() throws ParseException {
		/*@bgen(jjtree) BitStringValue */
		ASTBitStringValue jjtn000 = new ASTBitStringValue(JJTBITSTRINGVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case BIT_STRING:
					jj_consume_token(BIT_STRING);
					break;
				case HEX_STRING:
					jj_consume_token(HEX_STRING);
					break;
				case TOKEN_BRACE_LEFT:
					jj_consume_token(TOKEN_BRACE_LEFT);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case LOWERCASE_START:
							IdentifierList();
							break;
						default:
							jj_la1[107] = jj_gen;
							;
					}
					jj_consume_token(TOKEN_BRACE_RIGHT);
					break;
				case RESERVED_CONTAINING:
					jj_consume_token(RESERVED_CONTAINING);
					Value();
					break;
				default:
					jj_la1[108] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ChoiceValue() throws ParseException {
		/*@bgen(jjtree) ChoiceValue */
		ASTChoiceValue jjtn000 = new ASTChoiceValue(JJTCHOICEVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			jj_consume_token(TOKEN_COLON);
			Value();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ExternalValue() throws ParseException {
		/*@bgen(jjtree) ExternalValue */
		ASTExternalValue jjtn000 = new ASTExternalValue(JJTEXTERNALVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SequenceValue();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SetOfValue() throws ParseException {
		/*@bgen(jjtree) SetOfValue */
		ASTSetOfValue jjtn000 = new ASTSetOfValue(JJTSETOFVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_MINUS:
				case TOKEN_BRACE_LEFT:
				case RESERVED_CONTAINING:
				case RESERVED_FALSE:
				case RESERVED_MINUS_INFINITY:
				case RESERVED_NULL:
				case RESERVED_PLUS_INFINITY:
				case RESERVED_TRUE:
				case UPPERCASE_START:
				case LOWERCASE_START:
				case ZERO:
				case NUMBER:
				case REAL:
				case BIT_STRING:
				case HEX_STRING:
				case STRING:
					if (jj_2_90(3)) {
						ValueList();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case LOWERCASE_START:
								NamedValueList();
								break;
							default:
								jj_la1[109] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
					break;
				default:
					jj_la1[110] = jj_gen;
					;
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SetValue() throws ParseException {
		/*@bgen(jjtree) SetValue */
		ASTSetValue jjtn000 = new ASTSetValue(JJTSETVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LOWERCASE_START:
					ComponentValueList();
					break;
				default:
					jj_la1[111] = jj_gen;
					;
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SequenceOfValue() throws ParseException {
		/*@bgen(jjtree) SequenceOfValue */
		ASTSequenceOfValue jjtn000 = new ASTSequenceOfValue(JJTSEQUENCEOFVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TOKEN_MINUS:
				case TOKEN_BRACE_LEFT:
				case RESERVED_CONTAINING:
				case RESERVED_FALSE:
				case RESERVED_MINUS_INFINITY:
				case RESERVED_NULL:
				case RESERVED_PLUS_INFINITY:
				case RESERVED_TRUE:
				case UPPERCASE_START:
				case LOWERCASE_START:
				case ZERO:
				case NUMBER:
				case REAL:
				case BIT_STRING:
				case HEX_STRING:
				case STRING:
					if (jj_2_91(3)) {
						ValueList();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case LOWERCASE_START:
								NamedValueList();
								break;
							default:
								jj_la1[112] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
					break;
				default:
					jj_la1[113] = jj_gen;
					;
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ValueList() throws ParseException {
		/*@bgen(jjtree) ValueList */
		ASTValueList jjtn000 = new ASTValueList(JJTVALUELIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Value();
			label_21:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[114] = jj_gen;
						break label_21;
				}
				jj_consume_token(TOKEN_COMMA);
				Value();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NamedValueList() throws ParseException {
		/*@bgen(jjtree) NamedValueList */
		ASTNamedValueList jjtn000 = new ASTNamedValueList(JJTNAMEDVALUELIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			NamedValue();
			label_22:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[115] = jj_gen;
						break label_22;
				}
				jj_consume_token(TOKEN_COMMA);
				NamedValue();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SequenceValue() throws ParseException {
		/*@bgen(jjtree) SequenceValue */
		ASTSequenceValue jjtn000 = new ASTSequenceValue(JJTSEQUENCEVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LOWERCASE_START:
					ComponentValueList();
					break;
				default:
					jj_la1[116] = jj_gen;
					;
			}
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ComponentValueList() throws ParseException {
		/*@bgen(jjtree) ComponentValueList */
		ASTComponentValueList jjtn000 = new ASTComponentValueList(JJTCOMPONENTVALUELIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			NamedValue();
			label_23:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[117] = jj_gen;
						break label_23;
				}
				jj_consume_token(TOKEN_COMMA);
				NamedValue();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void OctetStringValue() throws ParseException {
		/*@bgen(jjtree) OctetStringValue */
		ASTOctetStringValue jjtn000 = new ASTOctetStringValue(JJTOCTETSTRINGVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case BIT_STRING:
					jj_consume_token(BIT_STRING);
					break;
				case HEX_STRING:
					jj_consume_token(HEX_STRING);
					break;
				case RESERVED_CONTAINING:
					jj_consume_token(RESERVED_CONTAINING);
					Value();
					break;
				default:
					jj_la1[118] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void NullValue() throws ParseException {
		/*@bgen(jjtree) NullValue */
		ASTNullValue jjtn000 = new ASTNullValue(JJTNULLVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(RESERVED_NULL);
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void IdentifierList() throws ParseException {
		/*@bgen(jjtree) IdentifierList */
		ASTIdentifierList jjtn000 = new ASTIdentifierList(JJTIDENTIFIERLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			identifier();
			label_24:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[119] = jj_gen;
						break label_24;
				}
				jj_consume_token(TOKEN_COMMA);
				identifier();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void ParametrizedValue() throws ParseException {
		/*@bgen(jjtree) ParametrizedValue */
		ASTParametrizedValue jjtn000 = new ASTParametrizedValue(JJTPARAMETRIZEDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SimpleDefinedValue();
			ActualParameterList();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void SimpleDefinedValue() throws ParseException {
		/*@bgen(jjtree) SimpleDefinedValue */
		ASTSimpleDefinedValue jjtn000 = new ASTSimpleDefinedValue(JJTSIMPLEDEFINEDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case UPPERCASE_START:
					ExternalValueReference();
					break;
				case LOWERCASE_START:
					ValueReference();
					break;
				default:
					jj_la1[120] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void RestrictedCharacterStringValue() throws ParseException {
		/*@bgen(jjtree) RestrictedCharacterStringValue */
		ASTRestrictedCharacterStringValue jjtn000 = new ASTRestrictedCharacterStringValue(JJTRESTRICTEDCHARACTERSTRINGVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case STRING:
					jj_consume_token(STRING);
					break;
				default:
					jj_la1[121] = jj_gen;
					if (jj_2_92(2)) {
						CharacterStringList();
					} else if (jj_2_93(5)) {
						Quadruple();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case TOKEN_BRACE_LEFT:
								Tuple();
								break;
							default:
								jj_la1[122] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void CharacterStringList() throws ParseException {
		/*@bgen(jjtree) CharacterStringList */
		ASTCharacterStringList jjtn000 = new ASTCharacterStringList(JJTCHARACTERSTRINGLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			CharSyms();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void CharSyms() throws ParseException {
		/*@bgen(jjtree) CharSyms */
		ASTCharSyms jjtn000 = new ASTCharSyms(JJTCHARSYMS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			CharsDefn();
			label_25:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case TOKEN_COMMA:
						;
						break;
					default:
						jj_la1[123] = jj_gen;
						break label_25;
				}
				jj_consume_token(TOKEN_COMMA);
				CharsDefn();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void CharsDefn() throws ParseException {
		/*@bgen(jjtree) CharsDefn */
		ASTCharsDefn jjtn000 = new ASTCharsDefn(JJTCHARSDEFN);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case STRING:
					jj_consume_token(STRING);
					break;
				default:
					jj_la1[124] = jj_gen;
					if (jj_2_94(5)) {
						Quadruple();
					} else {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case TOKEN_BRACE_LEFT:
								Tuple();
								break;
							case UPPERCASE_START:
							case LOWERCASE_START:
								DefinedValue();
								break;
							default:
								jj_la1[125] = jj_gen;
								jj_consume_token(-1);
								throw new ParseException();
						}
					}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Quadruple() throws ParseException {
		/*@bgen(jjtree) Quadruple */
		ASTQuadruple jjtn000 = new ASTQuadruple(JJTQUADRUPLE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			Group();
			jj_consume_token(TOKEN_COMMA);
			Plane();
			jj_consume_token(TOKEN_COMMA);
			Row();
			jj_consume_token(TOKEN_COMMA);
			Cell();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Group() throws ParseException {
		/*@bgen(jjtree) Group */
		ASTGroup jjtn000 = new ASTGroup(JJTGROUP);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Number();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Plane() throws ParseException {
		/*@bgen(jjtree) Plane */
		ASTPlane jjtn000 = new ASTPlane(JJTPLANE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Number();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Row() throws ParseException {
		/*@bgen(jjtree) Row */
		ASTRow jjtn000 = new ASTRow(JJTROW);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Number();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Cell() throws ParseException {
		/*@bgen(jjtree) Cell */
		ASTCell jjtn000 = new ASTCell(JJTCELL);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Number();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void Tuple() throws ParseException {
		/*@bgen(jjtree) Tuple */
		ASTTuple jjtn000 = new ASTTuple(JJTTUPLE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			jj_consume_token(TOKEN_BRACE_LEFT);
			TableColumn();
			jj_consume_token(TOKEN_COMMA);
			TableRow();
			jj_consume_token(TOKEN_BRACE_RIGHT);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TableColumn() throws ParseException {
		/*@bgen(jjtree) TableColumn */
		ASTTableColumn jjtn000 = new ASTTableColumn(JJTTABLECOLUMN);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Number();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void TableRow() throws ParseException {
		/*@bgen(jjtree) TableRow */
		ASTTableRow jjtn000 = new ASTTableRow(JJTTABLEROW);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			Number();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static final public void EmbeddedPDVValue() throws ParseException {
		/*@bgen(jjtree) EmbeddedPDVValue */
		ASTEmbeddedPDVValue jjtn000 = new ASTEmbeddedPDVValue(JJTEMBEDDEDPDVVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		jjtreeOpenNodeScope(jjtn000);
		try {
			SequenceValue();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{if (true) throw (RuntimeException) jjte000;}
			}
			if (jjte000 instanceof ParseException) {
				{if (true) throw (ParseException) jjte000;}
			}
			{if (true) throw (Error) jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
				jjtreeCloseNodeScope(jjtn000);
			}
		}
	}

	static private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_1(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(0, xla); }
	}

	static private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_2(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(1, xla); }
	}

	static private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_3(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(2, xla); }
	}

	static private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_4(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(3, xla); }
	}

	static private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_5(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(4, xla); }
	}

	static private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_6(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(5, xla); }
	}

	static private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_7(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(6, xla); }
	}

	static private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_8(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(7, xla); }
	}

	static private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_9(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(8, xla); }
	}

	static private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_10(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(9, xla); }
	}

	static private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_11(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(10, xla); }
	}

	static private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_12(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(11, xla); }
	}

	static private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_13(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(12, xla); }
	}

	static private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_14(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(13, xla); }
	}

	static private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_15(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(14, xla); }
	}

	static private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_16(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(15, xla); }
	}

	static private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_17(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(16, xla); }
	}

	static private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_18(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(17, xla); }
	}

	static private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_19(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(18, xla); }
	}

	static private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_20(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(19, xla); }
	}

	static private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_21(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(20, xla); }
	}

	static private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_22(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(21, xla); }
	}

	static private boolean jj_2_23(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_23(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(22, xla); }
	}

	static private boolean jj_2_24(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_24(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(23, xla); }
	}

	static private boolean jj_2_25(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_25(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(24, xla); }
	}

	static private boolean jj_2_26(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_26(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(25, xla); }
	}

	static private boolean jj_2_27(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_27(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(26, xla); }
	}

	static private boolean jj_2_28(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_28(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(27, xla); }
	}

	static private boolean jj_2_29(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_29(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(28, xla); }
	}

	static private boolean jj_2_30(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_30(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(29, xla); }
	}

	static private boolean jj_2_31(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_31(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(30, xla); }
	}

	static private boolean jj_2_32(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_32(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(31, xla); }
	}

	static private boolean jj_2_33(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_33(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(32, xla); }
	}

	static private boolean jj_2_34(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_34(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(33, xla); }
	}

	static private boolean jj_2_35(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_35(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(34, xla); }
	}

	static private boolean jj_2_36(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_36(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(35, xla); }
	}

	static private boolean jj_2_37(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_37(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(36, xla); }
	}

	static private boolean jj_2_38(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_38(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(37, xla); }
	}

	static private boolean jj_2_39(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_39(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(38, xla); }
	}

	static private boolean jj_2_40(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_40(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(39, xla); }
	}

	static private boolean jj_2_41(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_41(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(40, xla); }
	}

	static private boolean jj_2_42(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_42(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(41, xla); }
	}

	static private boolean jj_2_43(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_43(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(42, xla); }
	}

	static private boolean jj_2_44(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_44(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(43, xla); }
	}

	static private boolean jj_2_45(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_45(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(44, xla); }
	}

	static private boolean jj_2_46(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_46(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(45, xla); }
	}

	static private boolean jj_2_47(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_47(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(46, xla); }
	}

	static private boolean jj_2_48(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_48(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(47, xla); }
	}

	static private boolean jj_2_49(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_49(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(48, xla); }
	}

	static private boolean jj_2_50(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_50(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(49, xla); }
	}

	static private boolean jj_2_51(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_51(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(50, xla); }
	}

	static private boolean jj_2_52(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_52(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(51, xla); }
	}

	static private boolean jj_2_53(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_53(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(52, xla); }
	}

	static private boolean jj_2_54(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_54(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(53, xla); }
	}

	static private boolean jj_2_55(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_55(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(54, xla); }
	}

	static private boolean jj_2_56(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_56(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(55, xla); }
	}

	static private boolean jj_2_57(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_57(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(56, xla); }
	}

	static private boolean jj_2_58(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_58(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(57, xla); }
	}

	static private boolean jj_2_59(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_59(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(58, xla); }
	}

	static private boolean jj_2_60(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_60(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(59, xla); }
	}

	static private boolean jj_2_61(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_61(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(60, xla); }
	}

	static private boolean jj_2_62(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_62(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(61, xla); }
	}

	static private boolean jj_2_63(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_63(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(62, xla); }
	}

	static private boolean jj_2_64(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_64(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(63, xla); }
	}

	static private boolean jj_2_65(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_65(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(64, xla); }
	}

	static private boolean jj_2_66(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_66(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(65, xla); }
	}

	static private boolean jj_2_67(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_67(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(66, xla); }
	}

	static private boolean jj_2_68(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_68(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(67, xla); }
	}

	static private boolean jj_2_69(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_69(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(68, xla); }
	}

	static private boolean jj_2_70(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_70(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(69, xla); }
	}

	static private boolean jj_2_71(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_71(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(70, xla); }
	}

	static private boolean jj_2_72(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_72(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(71, xla); }
	}

	static private boolean jj_2_73(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_73(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(72, xla); }
	}

	static private boolean jj_2_74(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_74(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(73, xla); }
	}

	static private boolean jj_2_75(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_75(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(74, xla); }
	}

	static private boolean jj_2_76(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_76(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(75, xla); }
	}

	static private boolean jj_2_77(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_77(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(76, xla); }
	}

	static private boolean jj_2_78(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_78(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(77, xla); }
	}

	static private boolean jj_2_79(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_79(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(78, xla); }
	}

	static private boolean jj_2_80(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_80(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(79, xla); }
	}

	static private boolean jj_2_81(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_81(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(80, xla); }
	}

	static private boolean jj_2_82(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_82(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(81, xla); }
	}

	static private boolean jj_2_83(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_83(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(82, xla); }
	}

	static private boolean jj_2_84(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_84(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(83, xla); }
	}

	static private boolean jj_2_85(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_85(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(84, xla); }
	}

	static private boolean jj_2_86(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_86(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(85, xla); }
	}

	static private boolean jj_2_87(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_87(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(86, xla); }
	}

	static private boolean jj_2_88(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_88(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(87, xla); }
	}

	static private boolean jj_2_89(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_89(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(88, xla); }
	}

	static private boolean jj_2_90(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_90(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(89, xla); }
	}

	static private boolean jj_2_91(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_91(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(90, xla); }
	}

	static private boolean jj_2_92(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_92(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(91, xla); }
	}

	static private boolean jj_2_93(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_93(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(92, xla); }
	}

	static private boolean jj_2_94(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_94(); } catch (LookaheadSuccess ls) { return true; } finally { jj_save(93, xla); }
	}

	static private boolean jj_3R_259() {
		if (jj_3R_267()) return true;
		return false;
	}

	static private boolean jj_3R_191() {
		if (jj_scan_token(RESERVED_EXTERNAL)) return true;
		return false;
	}

	static private boolean jj_3R_269() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3R_189() {
		if (jj_scan_token(RESERVED_EMBEDDED)) return true;
		if (jj_scan_token(RESERVED_PDV)) return true;
		return false;
	}

	static private boolean jj_3R_204() {
		if (jj_3R_54()) return true;
		return false;
	}

	static private boolean jj_3R_267() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(101)) {
			jj_scanpos = xsp;
			if (jj_scan_token(31)) {
				jj_scanpos = xsp;
				if (jj_scan_token(86)) return true;
			}
		}
		return false;
	}

	static private boolean jj_3R_268() {
		if (jj_3R_166()) return true;
		return false;
	}

	static private boolean jj_3R_260() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_268()) {
			jj_scanpos = xsp;
			if (jj_3R_269()) return true;
		}
		return false;
	}

	static private boolean jj_3R_239() {
		if (jj_scan_token(TOKEN_BRACKET_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_259()) jj_scanpos = xsp;
		if (jj_3R_260()) return true;
		if (jj_scan_token(TOKEN_BRACKET_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3_38() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_61()) return true;
		return false;
	}

	static private boolean jj_3_39() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_62()) return true;
		return false;
	}

	static private boolean jj_3R_197() {
		if (jj_3R_239()) return true;
		return false;
	}

	static private boolean jj_3R_135() {
		if (jj_3R_62()) return true;
		return false;
	}

	static private boolean jj_3R_147() {
		if (jj_3R_212()) return true;
		return false;
	}

	static private boolean jj_3R_286() {
		if (jj_3R_62()) return true;
		return false;
	}

	static private boolean jj_3R_132() {
		if (jj_3R_62()) return true;
		return false;
	}

	static private boolean jj_3R_203() {
		if (jj_3R_59()) return true;
		return false;
	}

	static private boolean jj_3R_211() {
		if (jj_3R_242()) return true;
		return false;
	}

	static private boolean jj_3R_134() {
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3_36() {
		if (jj_3R_59()) return true;
		return false;
	}

	static private boolean jj_3R_133() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_36()) {
			jj_scanpos = xsp;
			if (jj_3R_204()) return true;
		}
		return false;
	}

	static private boolean jj_3R_212() {
		if (jj_scan_token(123)) return true;
		return false;
	}

	static private boolean jj_3R_131() {
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_61() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_146()) {
			jj_scanpos = xsp;
			if (jj_3R_147()) return true;
		}
		return false;
	}

	static private boolean jj_3R_146() {
		if (jj_3R_62()) return true;
		return false;
	}

	static private boolean jj_3R_280() {
		if (jj_scan_token(RESERVED_DEFAULT)) return true;
		return false;
	}

	static private boolean jj_3R_60() {
		if (jj_3R_61()) return true;
		return false;
	}

	static private boolean jj_3_37() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_60()) return true;
		return false;
	}

	static private boolean jj_3R_148() {
		if (jj_3R_213()) return true;
		return false;
	}

	static private boolean jj_3R_283() {
		if (jj_3R_286()) return true;
		return false;
	}

	static private boolean jj_3R_188() {
		if (jj_scan_token(RESERVED_CHOICE)) return true;
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_283()) return true;
		return false;
	}

	static private boolean jj_3R_256() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3R_93() {
		if (jj_3R_101()) return true;
		return false;
	}

	static private boolean jj_3R_49() {
		if (jj_scan_token(RESERVED_SET)) return true;
		if (jj_scan_token(RESERVED_OF)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_134()) {
			jj_scanpos = xsp;
			if (jj_3R_135()) return true;
		}
		return false;
	}

	static private boolean jj_3R_272() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(80)) {
			jj_scanpos = xsp;
			if (jj_3R_280()) return true;
		}
		return false;
	}

	static private boolean jj_3_35() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_58()) return true;
		return false;
	}

	static private boolean jj_3R_48() {
		if (jj_scan_token(RESERVED_SET)) return true;
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_133()) jj_scanpos = xsp;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_255() {
		if (jj_3R_213()) return true;
		return false;
	}

	static private boolean jj_3R_243() {
		if (jj_3R_166()) return true;
		return false;
	}

	static private boolean jj_3R_210() {
		if (jj_3R_55()) return true;
		return false;
	}

	static private boolean jj_3R_47() {
		if (jj_scan_token(RESERVED_SEQUENCE)) return true;
		if (jj_scan_token(RESERVED_OF)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_131()) {
			jj_scanpos = xsp;
			if (jj_3R_132()) return true;
		}
		return false;
	}

	static private boolean jj_3_93() {
		if (jj_3R_107()) return true;
		return false;
	}

	static private boolean jj_3R_143() {
		if (jj_scan_token(RESERVED_COMPONENTS)) return true;
		if (jj_scan_token(RESERVED_OF)) return true;
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_213() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_243()) return true;
		if (jj_scan_token(TOKEN_COMMA)) return true;
		return false;
	}

	static private boolean jj_3R_58() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_142()) {
			jj_scanpos = xsp;
			if (jj_3R_143()) return true;
		}
		return false;
	}

	static private boolean jj_3R_142() {
		if (jj_3R_62()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_272()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_141() {
		if (jj_3R_206()) return true;
		return false;
	}

	static private boolean jj_3_34() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_57()) return true;
		return false;
	}

	static private boolean jj_3R_207() {
		if (jj_3R_58()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_35()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_184() {
		if (jj_3R_166()) return true;
		return false;
	}

	static private boolean jj_3R_206() {
		if (jj_scan_token(123)) return true;
		return false;
	}

	static private boolean jj_3_94() {
		if (jj_3R_107()) return true;
		return false;
	}

	static private boolean jj_3R_183() {
		if (jj_3R_166()) return true;
		return false;
	}

	static private boolean jj_3R_264() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		return false;
	}

	static private boolean jj_3_32() {
		if (jj_3R_54()) return true;
		if (jj_3R_55()) return true;
		return false;
	}

	static private boolean jj_3R_130() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_32()) {
			jj_scanpos = xsp;
			if (jj_3R_203()) return true;
		}
		return false;
	}

	static private boolean jj_3R_57() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_140()) {
			jj_scanpos = xsp;
			if (jj_3R_141()) return true;
		}
		return false;
	}

	static private boolean jj_3R_140() {
		if (jj_3R_58()) return true;
		return false;
	}

	static private boolean jj_3R_225() {
		if (jj_3R_31()) return true;
		return false;
	}

	static private boolean jj_3R_107() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_183()) return true;
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_184()) return true;
		if (jj_scan_token(TOKEN_COMMA)) return true;
		return false;
	}

	static private boolean jj_3R_56() {
		if (jj_3R_57()) return true;
		return false;
	}

	static private boolean jj_3R_236() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(121)) {
			jj_scanpos = xsp;
			if (jj_3_94()) {
				jj_scanpos = xsp;
				if (jj_3R_255()) {
					jj_scanpos = xsp;
					if (jj_3R_256()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3_33() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_56()) return true;
		return false;
	}

	static private boolean jj_3R_209() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_33()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3_92() {
		if (jj_3R_106()) return true;
		return false;
	}

	static private boolean jj_3R_208() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		return false;
	}

	static private boolean jj_3R_182() {
		if (jj_3R_236()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_264()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_242() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_scan_token(TOKEN_ELLIPSIS)) return true;
		return false;
	}

	static private boolean jj_3R_106() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_182()) return true;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_145() {
		if (jj_3R_54()) return true;
		if (jj_3R_209()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_210()) {
			jj_scanpos = xsp;
			if (jj_3R_211()) return true;
		}
		return false;
	}

	static private boolean jj_3R_288() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		return false;
	}

	static private boolean jj_3R_63() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(121)) {
			jj_scanpos = xsp;
			if (jj_3_92()) {
				jj_scanpos = xsp;
				if (jj_3_93()) {
					jj_scanpos = xsp;
					if (jj_3R_148()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_59() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_144()) {
			jj_scanpos = xsp;
			if (jj_3R_145()) return true;
		}
		return false;
	}

	static private boolean jj_3R_144() {
		if (jj_3R_207()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_208()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_234() {
		if (jj_3R_254()) return true;
		return false;
	}

	static private boolean jj_3R_224() {
		if (jj_3R_86()) return true;
		return false;
	}

	static private boolean jj_3R_139() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_scan_token(TOKEN_ELLIPSIS)) return true;
		return false;
	}

	static private boolean jj_3R_163() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_224()) {
			jj_scanpos = xsp;
			if (jj_3R_225()) return true;
		}
		return false;
	}

	static private boolean jj_3R_55() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_139()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3_31() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_53()) return true;
		return false;
	}

	static private boolean jj_3R_87() {
		if (jj_3R_163()) return true;
		if (jj_3R_113()) return true;
		return false;
	}

	static private boolean jj_3R_54() {
		if (jj_scan_token(TOKEN_ELLIPSIS)) return true;
		if (jj_3R_138()) return true;
		return false;
	}

	static private boolean jj_3R_235() {
		if (jj_3R_254()) return true;
		return false;
	}

	static private boolean jj_3R_249() {
		if (jj_3R_28()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_288()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_46() {
		if (jj_scan_token(RESERVED_SEQUENCE)) return true;
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_130()) jj_scanpos = xsp;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_177() {
		if (jj_3R_233()) return true;
		return false;
	}

	static private boolean jj_3R_223() {
		if (jj_scan_token(RESERVED_NULL)) return true;
		return false;
	}

	static private boolean jj_3R_192() {
		if (jj_scan_token(RESERVED_NULL)) return true;
		return false;
	}

	static private boolean jj_3R_136() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3R_175() {
		if (jj_scan_token(RESERVED_CONTAINING)) return true;
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_194() {
		if (jj_scan_token(RESERVED_OCTET)) return true;
		if (jj_scan_token(RESERVED_STRING)) return true;
		return false;
	}

	static private boolean jj_3R_99() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(119)) {
			jj_scanpos = xsp;
			if (jj_scan_token(120)) {
				jj_scanpos = xsp;
				if (jj_3R_175()) return true;
			}
		}
		return false;
	}

	static private boolean jj_3R_137() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3_91() {
		if (jj_3R_105()) return true;
		return false;
	}

	static private boolean jj_3R_178() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_91()) {
			jj_scanpos = xsp;
			if (jj_3R_234()) return true;
		}
		return false;
	}

	static private boolean jj_3R_233() {
		if (jj_3R_253()) return true;
		return false;
	}

	static private boolean jj_3_19() {
		if (jj_3R_43()) return true;
		return false;
	}

	static private boolean jj_3R_53() {
		if (jj_3R_137()) return true;
		return false;
	}

	static private boolean jj_3_29() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_51()) return true;
		return false;
	}

	static private boolean jj_3R_101() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_177()) jj_scanpos = xsp;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_179() {
		if (jj_3R_233()) return true;
		return false;
	}

	static private boolean jj_3R_181() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_185() {
		if (jj_scan_token(RESERVED_BIT)) return true;
		if (jj_scan_token(RESERVED_STRING)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_31()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3_90() {
		if (jj_3R_105()) return true;
		return false;
	}

	static private boolean jj_3R_180() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_90()) {
			jj_scanpos = xsp;
			if (jj_3R_235()) return true;
		}
		return false;
	}

	static private boolean jj_3R_254() {
		if (jj_3R_253()) return true;
		return false;
	}

	static private boolean jj_3_28() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_scan_token(TOKEN_ELLIPSIS)) return true;
		return false;
	}

	static private boolean jj_3R_195() {
		if (jj_scan_token(RESERVED_REAL)) return true;
		return false;
	}

	static private boolean jj_3R_105() {
		if (jj_3R_66()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_181()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_51() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_30()) {
			jj_scanpos = xsp;
			if (jj_3R_136()) return true;
		}
		return false;
	}

	static private boolean jj_3_30() {
		if (jj_3R_52()) return true;
		return false;
	}

	static private boolean jj_3R_102() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_178()) jj_scanpos = xsp;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_287() {
		if (jj_3R_51()) return true;
		return false;
	}

	static private boolean jj_3R_227() {
		if (jj_3R_249()) return true;
		return false;
	}

	static private boolean jj_3R_103() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_179()) jj_scanpos = xsp;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3_27() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_50()) return true;
		return false;
	}

	static private boolean jj_3R_284() {
		if (jj_3R_287()) return true;
		return false;
	}

	static private boolean jj_3_18() {
		if (jj_3R_42()) return true;
		return false;
	}

	static private boolean jj_3R_104() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_180()) jj_scanpos = xsp;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_190() {
		if (jj_scan_token(RESERVED_ENUMERATED)) return true;
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_284()) return true;
		return false;
	}

	static private boolean jj_3R_95() {
		if (jj_3R_101()) return true;
		return false;
	}

	static private boolean jj_3R_52() {
		if (jj_3R_28()) return true;
		if (jj_scan_token(TOKEN_PAREN_LEFT)) return true;
		return false;
	}

	static private boolean jj_3R_92() {
		if (jj_3R_28()) return true;
		if (jj_scan_token(TOKEN_COLON)) return true;
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_50() {
		if (jj_3R_52()) return true;
		return false;
	}

	static private boolean jj_3R_168() {
		if (jj_scan_token(RESERVED_CONTAINING)) return true;
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_167() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_227()) jj_scanpos = xsp;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_45() {
		if (jj_scan_token(RESERVED_INTEGER)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_27()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_90() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(119)) {
			jj_scanpos = xsp;
			if (jj_scan_token(120)) {
				jj_scanpos = xsp;
				if (jj_3R_167()) {
					jj_scanpos = xsp;
					if (jj_3R_168()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_251() {
		if (jj_scan_token(RESERVED_PLUS_INFINITY)) return true;
		return false;
	}

	static private boolean jj_3R_186() {
		if (jj_scan_token(RESERVED_BOOLEAN)) return true;
		return false;
	}

	static private boolean jj_3R_171() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3R_250() {
		if (jj_scan_token(RESERVED_MINUS_INFINITY)) return true;
		return false;
	}

	static private boolean jj_3R_230() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_250()) {
			jj_scanpos = xsp;
			if (jj_3R_251()) return true;
		}
		return false;
	}

	static private boolean jj_3R_252() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3_17() {
		if (jj_3R_41()) return true;
		return false;
	}

	static private boolean jj_3R_229() {
		if (jj_scan_token(REAL)) return true;
		return false;
	}

	static private boolean jj_3R_160() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_17()) {
			jj_scanpos = xsp;
			if (jj_3_18()) return true;
		}
		xsp = jj_scanpos;
		if (jj_3_19()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3_26() {
		if (jj_3R_42()) return true;
		return false;
	}

	static private boolean jj_3R_173() {
		if (jj_3R_230()) return true;
		return false;
	}

	static private boolean jj_3R_97() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_172()) {
			jj_scanpos = xsp;
			if (jj_3R_173()) return true;
		}
		return false;
	}

	static private boolean jj_3R_172() {
		if (jj_3R_229()) return true;
		return false;
	}

	static private boolean jj_3R_62() {
		if (jj_3R_28()) return true;
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_126() {
		if (jj_3R_197()) return true;
		return false;
	}

	static private boolean jj_3R_96() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_170()) {
			jj_scanpos = xsp;
			if (jj_3R_171()) return true;
		}
		return false;
	}

	static private boolean jj_3R_170() {
		if (jj_3R_68()) return true;
		return false;
	}

	static private boolean jj_3_25() {
		if (jj_3R_49()) return true;
		return false;
	}

	static private boolean jj_3_24() {
		if (jj_3R_48()) return true;
		return false;
	}

	static private boolean jj_3_23() {
		if (jj_3R_47()) return true;
		return false;
	}

	static private boolean jj_3_22() {
		if (jj_3R_46()) return true;
		return false;
	}

	static private boolean jj_3R_125() {
		if (jj_3R_196()) return true;
		return false;
	}

	static private boolean jj_3R_94() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3R_124() {
		if (jj_3R_195()) return true;
		return false;
	}

	static private boolean jj_3R_123() {
		if (jj_3R_194()) return true;
		return false;
	}

	static private boolean jj_3R_122() {
		if (jj_3R_193()) return true;
		return false;
	}

	static private boolean jj_3R_222() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(97)) {
			jj_scanpos = xsp;
			if (jj_scan_token(56)) return true;
		}
		return false;
	}

	static private boolean jj_3R_121() {
		if (jj_3R_192()) return true;
		return false;
	}

	static private boolean jj_3_21() {
		if (jj_3R_45()) return true;
		return false;
	}

	static private boolean jj_3R_174() {
		if (jj_3R_27()) return true;
		if (jj_3R_88()) return true;
		return false;
	}

	static private boolean jj_3R_120() {
		if (jj_3R_191()) return true;
		return false;
	}

	static private boolean jj_3R_119() {
		if (jj_3R_190()) return true;
		return false;
	}

	static private boolean jj_3R_253() {
		if (jj_3R_28()) return true;
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_118() {
		if (jj_3R_189()) return true;
		return false;
	}

	static private boolean jj_3R_117() {
		if (jj_3R_188()) return true;
		return false;
	}

	static private boolean jj_3R_116() {
		if (jj_3R_187()) return true;
		return false;
	}

	static private boolean jj_3R_115() {
		if (jj_3R_186()) return true;
		return false;
	}

	static private boolean jj_3_74() {
		if (jj_3R_26()) return true;
		return false;
	}

	static private boolean jj_3R_216() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3R_41() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_114()) {
			jj_scanpos = xsp;
			if (jj_3R_115()) {
				jj_scanpos = xsp;
				if (jj_3R_116()) {
					jj_scanpos = xsp;
					if (jj_3R_117()) {
						jj_scanpos = xsp;
						if (jj_3R_118()) {
							jj_scanpos = xsp;
							if (jj_3R_119()) {
								jj_scanpos = xsp;
								if (jj_3R_120()) {
									jj_scanpos = xsp;
									if (jj_3_21()) {
										jj_scanpos = xsp;
										if (jj_3R_121()) {
											jj_scanpos = xsp;
											if (jj_3R_122()) {
												jj_scanpos = xsp;
												if (jj_3R_123()) {
													jj_scanpos = xsp;
													if (jj_3R_124()) {
														jj_scanpos = xsp;
														if (jj_3R_125()) {
															jj_scanpos = xsp;
															if (jj_3_22()) {
																jj_scanpos = xsp;
																if (jj_3_23()) {
																	jj_scanpos = xsp;
																	if (jj_3_24()) {
																		jj_scanpos = xsp;
																		if (jj_3_25()) {
																			jj_scanpos = xsp;
																			if (jj_3R_126()) return true;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_114() {
		if (jj_3R_185()) return true;
		return false;
	}

	static private boolean jj_3_89() {
		if (jj_3R_104()) return true;
		return false;
	}

	static private boolean jj_3_88() {
		if (jj_3R_103()) return true;
		return false;
	}

	static private boolean jj_3_87() {
		if (jj_3R_102()) return true;
		return false;
	}

	static private boolean jj_3_20() {
		if (jj_3R_44()) return true;
		return false;
	}

	static private boolean jj_3R_84() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_20()) {
			jj_scanpos = xsp;
			if (jj_3R_160()) return true;
		}
		return false;
	}

	static private boolean jj_3_86() {
		if (jj_3R_101()) return true;
		return false;
	}

	static private boolean jj_3R_232() {
		if (jj_3R_231()) return true;
		return false;
	}

	static private boolean jj_3_85() {
		if (jj_3R_100()) return true;
		return false;
	}

	static private boolean jj_3_84() {
		if (jj_3R_99()) return true;
		return false;
	}

	static private boolean jj_3_83() {
		if (jj_3R_98()) return true;
		return false;
	}

	static private boolean jj_3R_67() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_149()) return true;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_162() {
		if (jj_3R_223()) return true;
		return false;
	}

	static private boolean jj_3_82() {
		if (jj_3R_97()) return true;
		return false;
	}

	static private boolean jj_3_81() {
		if (jj_3R_96()) return true;
		return false;
	}

	static private boolean jj_3_80() {
		if (jj_3R_95()) return true;
		return false;
	}

	static private boolean jj_3R_36() {
		if (jj_3R_30()) return true;
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3_79() {
		if (jj_3R_94()) return true;
		return false;
	}

	static private boolean jj_3_78() {
		if (jj_3R_93()) return true;
		return false;
	}

	static private boolean jj_3_77() {
		if (jj_3R_92()) return true;
		return false;
	}

	static private boolean jj_3_76() {
		if (jj_3R_91()) return true;
		return false;
	}

	static private boolean jj_3R_161() {
		if (jj_3R_222()) return true;
		return false;
	}

	static private boolean jj_3R_35() {
		if (jj_3R_31()) return true;
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3_75() {
		if (jj_3R_90()) return true;
		return false;
	}

	static private boolean jj_3R_85() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_75()) {
			jj_scanpos = xsp;
			if (jj_3R_161()) {
				jj_scanpos = xsp;
				if (jj_3_76()) {
					jj_scanpos = xsp;
					if (jj_3_77()) {
						jj_scanpos = xsp;
						if (jj_3_78()) {
							jj_scanpos = xsp;
							if (jj_3_79()) {
								jj_scanpos = xsp;
								if (jj_3_80()) {
									jj_scanpos = xsp;
									if (jj_3_81()) {
										jj_scanpos = xsp;
										if (jj_3_82()) {
											jj_scanpos = xsp;
											if (jj_3R_162()) {
												jj_scanpos = xsp;
												if (jj_3_83()) {
													jj_scanpos = xsp;
													if (jj_3_84()) {
														jj_scanpos = xsp;
														if (jj_3_85()) {
															jj_scanpos = xsp;
															if (jj_3_86()) {
																jj_scanpos = xsp;
																if (jj_3_87()) {
																	jj_scanpos = xsp;
																	if (jj_3_88()) {
																		jj_scanpos = xsp;
																		if (jj_3_89()) return true;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_34() {
		if (jj_3R_30()) return true;
		if (jj_scan_token(TOKEN_ASSIGNMENT)) return true;
		return false;
	}

	static private boolean jj_3R_231() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_73()) {
			jj_scanpos = xsp;
			if (jj_3_74()) {
				jj_scanpos = xsp;
				if (jj_3R_252()) return true;
			}
		}
		return false;
	}

	static private boolean jj_3_73() {
		if (jj_3R_89()) return true;
		return false;
	}

	static private boolean jj_3_72() {
		if (jj_3R_88()) return true;
		return false;
	}

	static private boolean jj_3R_176() {
		if (jj_3R_231()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_232()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_100() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_176()) return true;
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_196() {
		if (jj_scan_token(RESERVED_RELATIVE_OID)) return true;
		return false;
	}

	static private boolean jj_3R_38() {
		if (jj_3R_111()) return true;
		if (jj_scan_token(TOKEN_DOT)) return true;
		if (jj_3R_30()) return true;
		return false;
	}

	static private boolean jj_3R_98() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_72()) {
			jj_scanpos = xsp;
			if (jj_3R_174()) return true;
		}
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3_16() {
		if (jj_3R_40()) return true;
		return false;
	}

	static private boolean jj_3_15() {
		if (jj_3R_39()) return true;
		return false;
	}

	static private boolean jj_3_14() {
		if (jj_3R_30()) return true;
		return false;
	}

	static private boolean jj_3R_193() {
		if (jj_scan_token(RESERVED_OBJECT)) return true;
		if (jj_scan_token(RESERVED_IDENTIFIER)) return true;
		return false;
	}

	static private boolean jj_3R_42() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_13()) {
			jj_scanpos = xsp;
			if (jj_3_14()) {
				jj_scanpos = xsp;
				if (jj_3_15()) {
					jj_scanpos = xsp;
					if (jj_3_16()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3_13() {
		if (jj_3R_38()) return true;
		return false;
	}

	static private boolean jj_3_71() {
		if (jj_3R_87()) return true;
		return false;
	}

	static private boolean jj_3_70() {
		if (jj_3R_31()) return true;
		return false;
	}

	static private boolean jj_3_12() {
		if (jj_3R_37()) return true;
		return false;
	}

	static private boolean jj_3R_27() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_69()) {
			jj_scanpos = xsp;
			if (jj_3_70()) {
				jj_scanpos = xsp;
				if (jj_3_71()) return true;
			}
		}
		return false;
	}

	static private boolean jj_3_69() {
		if (jj_3R_86()) return true;
		return false;
	}

	static private boolean jj_3_11() {
		if (jj_3R_36()) return true;
		return false;
	}

	static private boolean jj_3R_150() {
		if (jj_3R_216()) return true;
		return false;
	}

	static private boolean jj_3_10() {
		if (jj_3R_35()) return true;
		return false;
	}

	static private boolean jj_3R_66() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_68()) {
			jj_scanpos = xsp;
			if (jj_3R_150()) return true;
		}
		return false;
	}

	static private boolean jj_3_68() {
		if (jj_3R_85()) return true;
		return false;
	}

	static private boolean jj_3_9() {
		if (jj_3R_34()) return true;
		return false;
	}

	static private boolean jj_3R_110() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3_8() {
		if (jj_3R_33()) return true;
		return false;
	}

	static private boolean jj_3_7() {
		if (jj_3R_32()) return true;
		return false;
	}

	static private boolean jj_3_6() {
		if (jj_3R_31()) return true;
		return false;
	}

	static private boolean jj_3R_266() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_5()) {
			jj_scanpos = xsp;
			if (jj_3_6()) {
				jj_scanpos = xsp;
				if (jj_3_7()) {
					jj_scanpos = xsp;
					if (jj_3_8()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3_5() {
		if (jj_3R_30()) return true;
		return false;
	}

	static private boolean jj_3_4() {
		if (jj_3R_29()) return true;
		return false;
	}

	static private boolean jj_3R_33() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3_3() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3R_32() {
		if (jj_scan_token(UPPERCASE)) return true;
		return false;
	}

	static private boolean jj_3R_29() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_109()) {
			jj_scanpos = xsp;
			if (jj_3R_110()) return true;
		}
		return false;
	}

	static private boolean jj_3R_109() {
		if (jj_3R_98()) return true;
		return false;
	}

	static private boolean jj_3R_111() {
		if (jj_scan_token(UPPERCASE_START)) return true;
		return false;
	}

	static private boolean jj_3R_277() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_3R_276()) return true;
		return false;
	}

	static private boolean jj_3R_31() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3R_275() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3R_28() {
		if (jj_scan_token(LOWERCASE_START)) return true;
		return false;
	}

	static private boolean jj_3R_30() {
		if (jj_scan_token(UPPERCASE_START)) return true;
		return false;
	}

	static private boolean jj_3R_78() {
		if (jj_scan_token(RESERVED_PATTERN)) return true;
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_274() {
		if (jj_3R_89()) return true;
		return false;
	}

	static private boolean jj_3_2() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3_64() {
		if (jj_3R_30()) return true;
		return false;
	}

	static private boolean jj_3_67() {
		if (jj_3R_67()) return true;
		return false;
	}

	static private boolean jj_3_66() {
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_276() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_65()) {
			jj_scanpos = xsp;
			if (jj_3_66()) {
				jj_scanpos = xsp;
				if (jj_3_67()) return true;
			}
		}
		return false;
	}

	static private boolean jj_3_65() {
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_226() {
		if (jj_3R_89()) return true;
		return false;
	}

	static private boolean jj_3R_113() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_276()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_277()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(TOKEN_BRACE_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_108() {
		if (jj_scan_token(TOKEN_PAREN_LEFT)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_274()) {
			jj_scanpos = xsp;
			if (jj_3R_275()) return true;
		}
		if (jj_scan_token(TOKEN_PAREN_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_26() {
		if (jj_3R_28()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_108()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_165() {
		if (jj_3R_164()) return true;
		return false;
	}

	static private boolean jj_3R_40() {
		if (jj_3R_112()) return true;
		if (jj_3R_113()) return true;
		return false;
	}

	static private boolean jj_3R_166() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(116)) {
			jj_scanpos = xsp;
			if (jj_scan_token(115)) return true;
		}
		return false;
	}

	static private boolean jj_3R_159() {
		if (jj_3R_221()) return true;
		return false;
	}

	static private boolean jj_3_63() {
		if (jj_3R_38()) return true;
		return false;
	}

	static private boolean jj_3R_112() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_63()) {
			jj_scanpos = xsp;
			if (jj_3_64()) return true;
		}
		return false;
	}

	static private boolean jj_3R_89() {
		if (jj_3R_166()) return true;
		return false;
	}

	static private boolean jj_3R_39() {
		if (jj_3R_112()) return true;
		if (jj_3R_113()) return true;
		return false;
	}

	static private boolean jj_3_1() {
		if (jj_3R_26()) return true;
		return false;
	}

	static private boolean jj_3R_164() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_1()) {
			jj_scanpos = xsp;
			if (jj_3R_226()) {
				jj_scanpos = xsp;
				if (jj_3_2()) {
					jj_scanpos = xsp;
					if (jj_3_3()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_248() {
		if (jj_3R_266()) return true;
		return false;
	}

	static private boolean jj_3R_88() {
		if (jj_3R_164()) return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_165()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_221() {
		if (jj_3R_248()) return true;
		return false;
	}

	static private boolean jj_3R_65() {
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3_62() {
		if (jj_3R_65()) return true;
		return false;
	}

	static private boolean jj_3R_83() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_62()) {
			jj_scanpos = xsp;
			if (jj_3R_159()) return true;
		}
		return false;
	}

	static private boolean jj_3_61() {
		if (jj_3R_83()) return true;
		if (jj_scan_token(TOKEN_COLON)) return true;
		return false;
	}

	static private boolean jj_3R_68() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_151()) {
			jj_scanpos = xsp;
			if (jj_scan_token(115)) return true;
		}
		return false;
	}

	static private boolean jj_3R_151() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(10)) jj_scanpos = xsp;
		if (jj_scan_token(NUMBER)) return true;
		return false;
	}

	static private boolean jj_3R_158() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		return false;
	}

	static private boolean jj_3R_86() {
		if (jj_3R_111()) return true;
		if (jj_scan_token(TOKEN_DOT)) return true;
		if (jj_3R_31()) return true;
		return false;
	}

	static private boolean jj_3R_82() {
		if (jj_3R_30()) return true;
		if (jj_3R_158()) return true;
		return false;
	}

	static private boolean jj_3R_156() {
		if (jj_scan_token(RESERVED_COMPONENTS)) return true;
		if (jj_3R_292()) return true;
		return false;
	}

	static private boolean jj_3R_81() {
		if (jj_3R_31()) return true;
		if (jj_3R_158()) return true;
		return false;
	}

	static private boolean jj_3R_80() {
		if (jj_3R_30()) return true;
		if (jj_3R_158()) return true;
		return false;
	}

	static private boolean jj_3_60() {
		if (jj_3R_82()) return true;
		return false;
	}

	static private boolean jj_3_59() {
		if (jj_3R_81()) return true;
		return false;
	}

	static private boolean jj_3_58() {
		if (jj_3R_80()) return true;
		return false;
	}

	static private boolean jj_3R_37() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_57()) {
			jj_scanpos = xsp;
			if (jj_3_58()) {
				jj_scanpos = xsp;
				if (jj_3_59()) {
					jj_scanpos = xsp;
					if (jj_3_60()) return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3_57() {
		if (jj_3R_80()) return true;
		return false;
	}

	static private boolean jj_3R_294() {
		if (jj_3R_295()) return true;
		return false;
	}

	static private boolean jj_3R_220() {
		if (jj_3R_28()) return true;
		return false;
	}

	static private boolean jj_3R_157() {
		if (jj_3R_220()) return true;
		return false;
	}

	static private boolean jj_3R_295() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		return false;
	}

	static private boolean jj_3R_155() {
		if (jj_scan_token(RESERVED_COMPONENT)) return true;
		if (jj_3R_291()) return true;
		return false;
	}

	static private boolean jj_3R_79() {
		if (jj_scan_token(TOKEN_BRACE_LEFT)) return true;
		if (jj_3R_157()) return true;
		return false;
	}

	static private boolean jj_3R_292() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_56()) {
			jj_scanpos = xsp;
			if (jj_3R_294()) return true;
		}
		return false;
	}

	static private boolean jj_3_56() {
		if (jj_3R_79()) return true;
		return false;
	}

	static private boolean jj_3R_291() {
		if (jj_3R_43()) return true;
		return false;
	}

	static private boolean jj_3R_77() {
		if (jj_scan_token(RESERVED_WITH)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_155()) {
			jj_scanpos = xsp;
			if (jj_3R_156()) return true;
		}
		return false;
	}

	static private boolean jj_3R_293() {
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_76() {
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_247() {
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_74() {
		if (jj_scan_token(RESERVED_FROM)) return true;
		if (jj_3R_43()) return true;
		return false;
	}

	static private boolean jj_3R_75() {
		if (jj_scan_token(RESERVED_SIZE)) return true;
		if (jj_3R_43()) return true;
		return false;
	}

	static private boolean jj_3R_290() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(71)) {
			jj_scanpos = xsp;
			if (jj_3R_293()) return true;
		}
		return false;
	}

	static private boolean jj_3R_219() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(72)) {
			jj_scanpos = xsp;
			if (jj_3R_247()) return true;
		}
		return false;
	}

	static private boolean jj_3R_289() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(15)) jj_scanpos = xsp;
		if (jj_3R_290()) return true;
		return false;
	}

	static private boolean jj_3R_154() {
		if (jj_3R_219()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(15)) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_72() {
		if (jj_3R_154()) return true;
		if (jj_scan_token(TOKEN_RANGE)) return true;
		if (jj_3R_289()) return true;
		return false;
	}

	static private boolean jj_3R_73() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(66)) jj_scanpos = xsp;
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3_55() {
		if (jj_3R_78()) return true;
		return false;
	}

	static private boolean jj_3_54() {
		if (jj_3R_77()) return true;
		return false;
	}

	static private boolean jj_3_53() {
		if (jj_3R_76()) return true;
		return false;
	}

	static private boolean jj_3_52() {
		if (jj_3R_75()) return true;
		return false;
	}

	static private boolean jj_3_51() {
		if (jj_3R_74()) return true;
		return false;
	}

	static private boolean jj_3_50() {
		if (jj_3R_73()) return true;
		return false;
	}

	static private boolean jj_3_49() {
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_246() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_48()) {
			jj_scanpos = xsp;
			if (jj_3_49()) {
				jj_scanpos = xsp;
				if (jj_3_50()) {
					jj_scanpos = xsp;
					if (jj_3_51()) {
						jj_scanpos = xsp;
						if (jj_3_52()) {
							jj_scanpos = xsp;
							if (jj_3_53()) {
								jj_scanpos = xsp;
								if (jj_3_54()) {
									jj_scanpos = xsp;
									if (jj_3_55()) return true;
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3_48() {
		if (jj_3R_72()) return true;
		return false;
	}

	static private boolean jj_3R_263() {
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_218() {
		if (jj_scan_token(TOKEN_PAREN_LEFT)) return true;
		if (jj_3R_214()) return true;
		if (jj_scan_token(TOKEN_PAREN_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_153() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_217()) {
			jj_scanpos = xsp;
			if (jj_3R_218()) return true;
		}
		return false;
	}

	static private boolean jj_3R_217() {
		if (jj_3R_246()) return true;
		return false;
	}

	static private boolean jj_3R_152() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(126)) {
			jj_scanpos = xsp;
			if (jj_scan_token(69)) return true;
		}
		return false;
	}

	static private boolean jj_3_47() {
		if (jj_3R_71()) return true;
		return false;
	}

	static private boolean jj_3R_69() {
		if (jj_3R_152()) return true;
		return false;
	}

	static private boolean jj_3R_285() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(19)) {
			jj_scanpos = xsp;
			if (jj_scan_token(99)) return true;
		}
		return false;
	}

	static private boolean jj_3R_71() {
		if (jj_scan_token(RESERVED_EXCEPT)) return true;
		if (jj_3R_153()) return true;
		return false;
	}

	static private boolean jj_3R_70() {
		if (jj_3R_153()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_47()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3_46() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_69()) jj_scanpos = xsp;
		if (jj_3R_70()) return true;
		return false;
	}

	static private boolean jj_3R_282() {
		Token xsp;
		if (jj_3_46()) return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_46()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_245() {
		if (jj_scan_token(RESERVED_ALL)) return true;
		if (jj_3R_71()) return true;
		return false;
	}

	static private boolean jj_3_45() {
		if (jj_3R_27()) return true;
		return false;
	}

	static private boolean jj_3R_215() {
		if (jj_scan_token(TOKEN_COMMA)) return true;
		if (jj_scan_token(TOKEN_ELLIPSIS)) return true;
		return false;
	}

	static private boolean jj_3R_281() {
		if (jj_3R_285()) return true;
		return false;
	}

	static private boolean jj_3R_273() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_281()) jj_scanpos = xsp;
		if (jj_3R_282()) return true;
		return false;
	}

	static private boolean jj_3R_265() {
		Token xsp;
		if (jj_3R_273()) return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_273()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_244() {
		if (jj_3R_265()) return true;
		return false;
	}

	static private boolean jj_3R_214() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_244()) {
			jj_scanpos = xsp;
			if (jj_3R_245()) return true;
		}
		return false;
	}

	static private boolean jj_3R_262() {
		if (jj_3R_271()) return true;
		return false;
	}

	static private boolean jj_3R_149() {
		if (jj_3R_214()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_215()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_64() {
		if (jj_3R_149()) return true;
		return false;
	}

	static private boolean jj_3R_241() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_44()) {
			jj_scanpos = xsp;
			if (jj_3_45()) {
				jj_scanpos = xsp;
				if (jj_3R_263()) return true;
			}
		}
		return false;
	}

	static private boolean jj_3_44() {
		if (jj_3R_68()) return true;
		return false;
	}

	static private boolean jj_3R_198() {
		if (jj_3R_240()) return true;
		return false;
	}

	static private boolean jj_3R_205() {
		if (jj_scan_token(125)) return true;
		if (jj_3R_241()) return true;
		return false;
	}

	static private boolean jj_3R_138() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_205()) jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3R_279() {
		if (jj_scan_token(RESERVED_ENCODED)) return true;
		if (jj_scan_token(RESERVED_BY)) return true;
		return false;
	}

	static private boolean jj_3R_202() {
		if (jj_3R_75()) return true;
		return false;
	}

	static private boolean jj_3R_278() {
		if (jj_scan_token(RESERVED_CONTAINING)) return true;
		if (jj_3R_84()) return true;
		return false;
	}

	static private boolean jj_3R_271() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_278()) {
			jj_scanpos = xsp;
			if (jj_3R_279()) return true;
		}
		return false;
	}

	static private boolean jj_3R_169() {
		if (jj_3R_228()) return true;
		return false;
	}

	static private boolean jj_3R_200() {
		if (jj_3R_75()) return true;
		return false;
	}

	static private boolean jj_3_43() {
		if (jj_3R_65()) return true;
		if (jj_scan_token(TOKEN_COLON)) return true;
		if (jj_3R_67()) return true;
		return false;
	}

	static private boolean jj_3_42() {
		if (jj_3R_65()) return true;
		if (jj_scan_token(TOKEN_COLON)) return true;
		if (jj_3R_66()) return true;
		return false;
	}

	static private boolean jj_3R_201() {
		if (jj_3R_43()) return true;
		return false;
	}

	static private boolean jj_3R_270() {
		if (jj_scan_token(RESERVED_CONSTRAINED)) return true;
		if (jj_scan_token(RESERVED_BY)) return true;
		return false;
	}

	static private boolean jj_3R_199() {
		if (jj_3R_43()) return true;
		return false;
	}

	static private boolean jj_3R_261() {
		if (jj_3R_270()) return true;
		return false;
	}

	static private boolean jj_3R_240() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_261()) {
			jj_scanpos = xsp;
			if (jj_3R_262()) return true;
		}
		return false;
	}

	static private boolean jj_3_41() {
		if (jj_3R_64()) return true;
		return false;
	}

	static private boolean jj_3R_127() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_41()) {
			jj_scanpos = xsp;
			if (jj_3R_198()) return true;
		}
		return false;
	}

	static private boolean jj_3R_43() {
		if (jj_scan_token(TOKEN_PAREN_LEFT)) return true;
		if (jj_3R_127()) return true;
		if (jj_3R_138()) return true;
		if (jj_scan_token(TOKEN_PAREN_RIGHT)) return true;
		return false;
	}

	static private boolean jj_3R_129() {
		if (jj_scan_token(RESERVED_SEQUENCE)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_201()) {
			jj_scanpos = xsp;
			if (jj_3R_202()) return true;
		}
		return false;
	}

	static private boolean jj_3R_44() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_128()) {
			jj_scanpos = xsp;
			if (jj_3R_129()) return true;
		}
		return false;
	}

	static private boolean jj_3R_128() {
		if (jj_scan_token(RESERVED_SET)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_199()) {
			jj_scanpos = xsp;
			if (jj_3R_200()) return true;
		}
		return false;
	}

	static private boolean jj_3R_238() {
		if (jj_3R_258()) return true;
		return false;
	}

	static private boolean jj_3R_228() {
		if (jj_3R_101()) return true;
		return false;
	}

	static private boolean jj_3_40() {
		if (jj_3R_63()) return true;
		return false;
	}

	static private boolean jj_3R_91() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_40()) {
			jj_scanpos = xsp;
			if (jj_3R_169()) return true;
		}
		return false;
	}

	static private boolean jj_3R_258() {
		if (jj_scan_token(RESERVED_CHARACTER)) return true;
		if (jj_scan_token(RESERVED_STRING)) return true;
		return false;
	}

	static private boolean jj_3R_257() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(35)) {
			jj_scanpos = xsp;
			if (jj_scan_token(59)) {
				jj_scanpos = xsp;
				if (jj_scan_token(60)) {
					jj_scanpos = xsp;
					if (jj_scan_token(61)) {
						jj_scanpos = xsp;
						if (jj_scan_token(70)) {
							jj_scanpos = xsp;
							if (jj_scan_token(75)) {
								jj_scanpos = xsp;
								if (jj_scan_token(85)) {
									jj_scanpos = xsp;
									if (jj_scan_token(96)) {
										jj_scanpos = xsp;
										if (jj_scan_token(94)) {
											jj_scanpos = xsp;
											if (jj_scan_token(102)) {
												jj_scanpos = xsp;
												if (jj_scan_token(104)) {
													jj_scanpos = xsp;
													if (jj_scan_token(105)) {
														jj_scanpos = xsp;
														if (jj_scan_token(106)) return true;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_237() {
		if (jj_3R_257()) return true;
		return false;
	}

	static private boolean jj_3R_187() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_237()) {
			jj_scanpos = xsp;
			if (jj_3R_238()) return true;
		}
		return false;
	}

	static private boolean jj_initialized_once = false;
	/**
	 * Generated Token Manager.
	 */
	static public  ASN1SchemaCompilerTokenManager token_source;
	static         SimpleCharStream               jj_input_stream;
	/**
	 * Current token.
	 */
	static public  Token                          token;
	/**
	 * Next token.
	 */
	static public  Token                          jj_nt;
	static private int                            jj_ntk;
	static private Token                          jj_scanpos, jj_lastpos;
	static private int jj_la;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[126];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static private int[] jj_la1_3;

	static {
		jj_la1_init_0();
		jj_la1_init_1();
		jj_la1_init_2();
		jj_la1_init_3();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[]{
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x400,
		                    0x400,
		                    0x4000000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x1000000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x40000000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x4000000,
		                    0x20000,
		                    0x200000,
		                    0x0,
		                    0x200000,
		                    0x0,
		                    0x1000,
		                    0x400000,
		                    0x0,
		                    0x0,
		                    0x400000,
		                    0x0,
		                    0x20000,
		                    0x400,
		                    0x20000,
		                    0x0,
		                    0x20000,
		                    0x0,
		                    0x4000,
		                    0x4000,
		                    0x20000,
		                    0x20000,
		                    0x4000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x400000,
		                    0x4000,
		                    0x4000,
		                    0x400000,
		                    0x20000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x80000000,
		                    0x0,
		                    0x80000000,
		                    0x0,
		                    0x0,
		                    0x4000000,
		                    0x1000000,
		                    0x400000,
		                    0x1000000,
		                    0x400000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x20000,
		                    0x400000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x400000,
		                    0x20000,
		                    0x20000,
		                    0x45480400,
		                    0x80000,
		                    0x5480400,
		                    0x0,
		                    0x80000,
		                    0x0,
		                    0x5400400,
		                    0x0,
		                    0x8000,
		                    0x8000,
		                    0x4000400,
		                    0x4000400,
		                    0x0,
		                    0x4000000,
		                    0x20000,
		                    0x1000000,
		                    0x20000,
		                    0x0,
		                    0x20000,
		                    0x10000000,
		                    0x10000000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x400,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x4000000,
		                    0x0,
		                    0x4000400,
		                    0x0,
		                    0x0,
		                    0x4000400,
		                    0x20000,
		                    0x20000,
		                    0x0,
		                    0x20000,
		                    0x0,
		                    0x20000,
		                    0x0,
		                    0x0,
		                    0x4000000,
		                    0x20000,
		                    0x0,
		                    0x4000000,
		};
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[]{
		                    0x0,
		                    0x80100001,
		                    0x400000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x80100001,
		                    0x200000,
		                    0x0,
		                    0x200000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x388480dc,
		                    0x388480dc,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x400,
		                    0x400,
		                    0x0,
		                    0x0,
		                    0x400,
		                    0x400,
		                    0x0,
		                    0x2000,
		                    0x2000,
		                    0x400,
		                    0x388480dc,
		                    0x0,
		                    0x400,
		                    0x388480dc,
		                    0x0,
		                    0x0,
		                    0x80100000,
		                    0x80100000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x38000048,
		                    0x38000008,
		                    0x0,
		                    0x0,
		                    0x388480dc,
		                    0x0,
		                    0x388480dc,
		                    0x0,
		                    0x11800,
		                    0x11800,
		                    0x0,
		                    0x388480dc,
		                    0x10000,
		                    0x11000,
		                    0x0,
		                    0x388480dc,
		                    0x0,
		                    0x0,
		                    0x3b8490dc,
		                    0x0,
		                    0x3b8490dc,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x3b8490dc,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x1001000,
		                    0x1001000,
		                    0x600,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x1000000,
		                    0x0,
		                    0x1000000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x1000,
		                    0x0,
		                    0x1001000,
		                    0x0,
		                    0x0,
		                    0x1001000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x1000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		};
	}

	private static void jj_la1_init_2() {
		jj_la1_2 = new int[]{
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x2,
		                    0x2,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x47a05c50,
		                    0x40200840,
		                    0x1805400,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x10000,
		                    0x10000,
		                    0x0,
		                    0x47a05c50,
		                    0x0,
		                    0x0,
		                    0x47a05c50,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x400000,
		                    0x0,
		                    0x400000,
		                    0x40200840,
		                    0x40200840,
		                    0x0,
		                    0x8000000,
		                    0x47a05c50,
		                    0x8000000,
		                    0x47a05c50,
		                    0x6000000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x47a05c50,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x47a05c50,
		                    0x0,
		                    0x0,
		                    0x4faa5f74,
		                    0x0,
		                    0x4faa5f74,
		                    0x20,
		                    0x0,
		                    0x20,
		                    0x4faa5f54,
		                    0x4,
		                    0x0,
		                    0x0,
		                    0x80700,
		                    0x80680,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x110000,
		                    0x110000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x400,
		                    0x0,
		                    0x0,
		                    0x80200,
		                    0x80200,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x80600,
		                    0x0,
		                    0x0,
		                    0x80600,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		};
	}

	private static void jj_la1_init_3() {
		jj_la1_3 = new int[]{
		                    0x1000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x180000,
		                    0x0,
		                    0x183000,
		                    0x180000,
		                    0x180000,
		                    0x183000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x3000,
		                    0x0,
		                    0x7000,
		                    0x7000,
		                    0x7000,
		                    0x3000,
		                    0x0,
		                    0x0,
		                    0x3000,
		                    0x0,
		                    0x1000,
		                    0x182000,
		                    0x1741,
		                    0x741,
		                    0x0,
		                    0x0,
		                    0x3000,
		                    0x0,
		                    0x183000,
		                    0x0,
		                    0x2000,
		                    0x0,
		                    0x183000,
		                    0x2000,
		                    0x2000,
		                    0x0,
		                    0x0,
		                    0x2000,
		                    0x8002000,
		                    0x180000,
		                    0x0,
		                    0x0,
		                    0x2000,
		                    0x3741,
		                    0x0,
		                    0x2000,
		                    0x3741,
		                    0x0,
		                    0x8002000,
		                    0x0,
		                    0x0,
		                    0x20,
		                    0x183000,
		                    0x20,
		                    0x741,
		                    0x741,
		                    0x0,
		                    0x0,
		                    0x3741,
		                    0x0,
		                    0x3741,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x1741,
		                    0x0,
		                    0x0,
		                    0x20000000,
		                    0x1741,
		                    0x0,
		                    0x0,
		                    0x43d83f4b,
		                    0x8,
		                    0x43d83f4b,
		                    0x40000000,
		                    0x8,
		                    0x40000000,
		                    0x3d83f43,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x3d83002,
		                    0x3d83002,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x7000,
		                    0x0,
		                    0x0,
		                    0x0,
		                    0x3000,
		                    0x3000,
		                    0x183000,
		                    0x3000,
		                    0x2,
		                    0x0,
		                    0x2,
		                    0x182000,
		                    0x400000,
		                    0x0,
		                    0x2000,
		                    0x1800000,
		                    0x2000,
		                    0x3d83002,
		                    0x2000,
		                    0x2000,
		                    0x3d83002,
		                    0x0,
		                    0x0,
		                    0x2000,
		                    0x0,
		                    0x1800000,
		                    0x0,
		                    0x3000,
		                    0x2000000,
		                    0x0,
		                    0x0,
		                    0x2000000,
		                    0x3000,
		};
	}

	static final private JJCalls[] jj_2_rtns = new JJCalls[94];
	static private       boolean   jj_rescan = false;
	static private       int       jj_gc     = 0;

	/**
	 * Constructor with InputStream.
	 */
	public ASN1SchemaCompiler(java.io.InputStream stream) {
		this(stream, null);
	}

	/**
	 * Constructor with InputStream and supplied encoding
	 */
	public ASN1SchemaCompiler(java.io.InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ASN1SchemaCompilerTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 126; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Reinitialise.
	 */
	static public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/**
	 * Reinitialise.
	 */
	static public void ReInit(java.io.InputStream stream, String encoding) {
		try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch (java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 126; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Constructor.
	 */
	public ASN1SchemaCompiler(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ASN1SchemaCompilerTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 126; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Reinitialise.
	 */
	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 126; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Constructor with generated Token Manager.
	 */
	public ASN1SchemaCompiler(ASN1SchemaCompilerTokenManager tm) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 126; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/**
	 * Reinitialise.
	 */
	public void ReInit(ASN1SchemaCompilerTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 126; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	static private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null) { token = token.next; } else token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {}

	static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	static private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null) jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind) return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
		return false;
	}


	/**
	 * Get the next Token.
	 */
	static final public Token getNextToken() {
		if (token.next != null) { token = token.next; } else token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/**
	 * Get the specific Token.
	 */
	static final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) { t = t.next; } else t = t.next = token_source.getNextToken();
		}
		return t;
	}

	static private int jj_ntk() {
		if ((jj_nt = token.next) == null) { return (jj_ntk = (token.next = token_source.getNextToken()).kind); } else {
			return (jj_ntk = jj_nt.kind);
		}
	}

	static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	static private int[] jj_expentry;
	static private int   jj_kind       = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;

	static private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop:
			for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/**
	 * Generate ParseException.
	 */
	static public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[127];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 126; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
					if ((jj_la1_3[i] & (1 << j)) != 0) {
						la1tokens[96 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 127; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/**
	 * Enable tracing.
	 */
	static final public void enable_tracing() {
	}

	/**
	 * Disable tracing.
	 */
	static final public void disable_tracing() {
	}

	static private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 94; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
							case 0:
								jj_3_1();
								break;
							case 1:
								jj_3_2();
								break;
							case 2:
								jj_3_3();
								break;
							case 3:
								jj_3_4();
								break;
							case 4:
								jj_3_5();
								break;
							case 5:
								jj_3_6();
								break;
							case 6:
								jj_3_7();
								break;
							case 7:
								jj_3_8();
								break;
							case 8:
								jj_3_9();
								break;
							case 9:
								jj_3_10();
								break;
							case 10:
								jj_3_11();
								break;
							case 11:
								jj_3_12();
								break;
							case 12:
								jj_3_13();
								break;
							case 13:
								jj_3_14();
								break;
							case 14:
								jj_3_15();
								break;
							case 15:
								jj_3_16();
								break;
							case 16:
								jj_3_17();
								break;
							case 17:
								jj_3_18();
								break;
							case 18:
								jj_3_19();
								break;
							case 19:
								jj_3_20();
								break;
							case 20:
								jj_3_21();
								break;
							case 21:
								jj_3_22();
								break;
							case 22:
								jj_3_23();
								break;
							case 23:
								jj_3_24();
								break;
							case 24:
								jj_3_25();
								break;
							case 25:
								jj_3_26();
								break;
							case 26:
								jj_3_27();
								break;
							case 27:
								jj_3_28();
								break;
							case 28:
								jj_3_29();
								break;
							case 29:
								jj_3_30();
								break;
							case 30:
								jj_3_31();
								break;
							case 31:
								jj_3_32();
								break;
							case 32:
								jj_3_33();
								break;
							case 33:
								jj_3_34();
								break;
							case 34:
								jj_3_35();
								break;
							case 35:
								jj_3_36();
								break;
							case 36:
								jj_3_37();
								break;
							case 37:
								jj_3_38();
								break;
							case 38:
								jj_3_39();
								break;
							case 39:
								jj_3_40();
								break;
							case 40:
								jj_3_41();
								break;
							case 41:
								jj_3_42();
								break;
							case 42:
								jj_3_43();
								break;
							case 43:
								jj_3_44();
								break;
							case 44:
								jj_3_45();
								break;
							case 45:
								jj_3_46();
								break;
							case 46:
								jj_3_47();
								break;
							case 47:
								jj_3_48();
								break;
							case 48:
								jj_3_49();
								break;
							case 49:
								jj_3_50();
								break;
							case 50:
								jj_3_51();
								break;
							case 51:
								jj_3_52();
								break;
							case 52:
								jj_3_53();
								break;
							case 53:
								jj_3_54();
								break;
							case 54:
								jj_3_55();
								break;
							case 55:
								jj_3_56();
								break;
							case 56:
								jj_3_57();
								break;
							case 57:
								jj_3_58();
								break;
							case 58:
								jj_3_59();
								break;
							case 59:
								jj_3_60();
								break;
							case 60:
								jj_3_61();
								break;
							case 61:
								jj_3_62();
								break;
							case 62:
								jj_3_63();
								break;
							case 63:
								jj_3_64();
								break;
							case 64:
								jj_3_65();
								break;
							case 65:
								jj_3_66();
								break;
							case 66:
								jj_3_67();
								break;
							case 67:
								jj_3_68();
								break;
							case 68:
								jj_3_69();
								break;
							case 69:
								jj_3_70();
								break;
							case 70:
								jj_3_71();
								break;
							case 71:
								jj_3_72();
								break;
							case 72:
								jj_3_73();
								break;
							case 73:
								jj_3_74();
								break;
							case 74:
								jj_3_75();
								break;
							case 75:
								jj_3_76();
								break;
							case 76:
								jj_3_77();
								break;
							case 77:
								jj_3_78();
								break;
							case 78:
								jj_3_79();
								break;
							case 79:
								jj_3_80();
								break;
							case 80:
								jj_3_81();
								break;
							case 81:
								jj_3_82();
								break;
							case 82:
								jj_3_83();
								break;
							case 83:
								jj_3_84();
								break;
							case 84:
								jj_3_85();
								break;
							case 85:
								jj_3_86();
								break;
							case 86:
								jj_3_87();
								break;
							case 87:
								jj_3_88();
								break;
							case 88:
								jj_3_89();
								break;
							case 89:
								jj_3_90();
								break;
							case 90:
								jj_3_91();
								break;
							case 91:
								jj_3_92();
								break;
							case 92:
								jj_3_93();
								break;
							case 93:
								jj_3_94();
								break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) { }
		}
		jj_rescan = false;
	}

	static private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int     gen;
		Token   first;
		int     arg;
		JJCalls next;
	}

}
