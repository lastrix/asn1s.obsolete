/******************************************************************************
 * Copyright (C) 2010-2011 Lastrix                                            *
 * This file is part of ASN1S.                                                *
 *                                                                            *
 * ASN1S is free software: you can redistribute it and/or modify              *
 * it under the terms of the GNU General Public License as published by       *
 * the Free Software Foundation, either version 2 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * ASN1S is distributed in the hope that it will be useful,                   *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with ASN1S. If not, see <http://www.gnu.org/licenses/>.              *
 ******************************************************************************/

/* Generated By:JJTree&JavaCC: Do not edit this line. ASN1SchemaCompilerTokenManager.java */
package org.lastrix.asn1s.schema.parser;

/**
 * Token Manager.
 */
public class ASN1SchemaCompilerTokenManager implements ASN1SchemaCompilerConstants {

	/**
	 * Debug output.
	 */
	public static java.io.PrintStream debugStream = System.out;

	/**
	 * Set debug output.
	 */
	public static void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }

	private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
			case 0:
				if ((active1 & 0x1f000L) != 0L) {
					jjmatchedKind = 108;
					return 29;
				}
				if ((active0 & 0x40000L) != 0L) { return 57; }
				if ((active0 & 0x420L) != 0L) { return 1; }
				if ((active1 & 0x8000000000000L) != 0L) { return 3; }
				if ((active0 & 0xfffffffff0000000L) != 0L || (active1 & 0xffffffe0fffL) != 0L) {
					jjmatchedKind = 108;
					return 58;
				}
				return -1;
			case 1:
				if ((active0 & 0xe3ffffdff0000000L) != 0L || (active1 & 0x9beffdf47ffL) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 108;
						jjmatchedPos = 1;
					}
					return 58;
				}
				if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x64100202800L) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 108;
						jjmatchedPos = 1;
					}
					return 59;
				}
				if ((active1 & 0x1000L) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 108;
						jjmatchedPos = 1;
					}
					return 28;
				}
				if ((active0 & 0x2000000000L) != 0L || (active1 & 0x8000L) != 0L) { return 58; }
				return -1;
			case 2:
				if ((active1 & 0x1000L) != 0L) {
					if (jjmatchedPos != 2) {
						jjmatchedKind = 108;
						jjmatchedPos = 2;
					}
					return 27;
				}
				if ((active0 & 0xe3fdffdbb0000000L) != 0L || (active1 & 0x9befbdb447fL) != 0L) {
					if (jjmatchedPos != 2) {
						jjmatchedKind = 108;
						jjmatchedPos = 2;
					}
					return 58;
				}
				if ((active0 & 0x2000440000000L) != 0L || (active1 & 0x4040380L) != 0L) { return 58; }
				if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x64100202800L) != 0L) {
					if (jjmatchedPos != 2) {
						jjmatchedKind = 108;
						jjmatchedPos = 2;
					}
					return 59;
				}
				return -1;
			case 3:
				if ((active1 & 0x1000L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 3;
					return 26;
				}
				if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x64100202800L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 3;
					return 59;
				}
				if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x80288800400L) != 0L) { return 58; }
				if ((active0 & 0xe1fdffdbb0000000L) != 0L || (active1 & 0x1bc735b427fL) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 3;
					return 58;
				}
				return -1;
			case 4:
				if ((active0 & 0x3c00000800000000L) != 0L || (active1 & 0x6c140202800L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 4;
					return 59;
				}
				if ((active1 & 0x1000L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 4;
					return 14;
				}
				if ((active0 & 0xc0fdfed1b0000000L) != 0L || (active1 & 0x1303353027fL) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 4;
					return 58;
				}
				if ((active1 & 0x400080000L) != 0L) {
					if (jjmatchedPos < 3) {
						jjmatchedKind = 108;
						jjmatchedPos = 3;
					}
					return 60;
				}
				if ((active0 & 0x100010200000000L) != 0L || (active1 & 0x800004000L) != 0L) { return 58; }
				return -1;
			case 5:
				if ((active0 & 0xc0f5fe51a0000000L) != 0L || (active1 & 0x24035b007fL) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 5;
					return 58;
				}
				if ((active1 & 0x200L) != 0L) {
					if (jjmatchedPos < 4) {
						jjmatchedKind = 108;
						jjmatchedPos = 4;
					}
					return 60;
				}
				if ((active0 & 0x8008010000000L) != 0L || (active1 & 0x1030000000L) != 0L) { return 58; }
				if ((active1 & 0x1000L) != 0L) { return 15; }
				if ((active0 & 0x3c00000800000000L) != 0L || (active1 & 0x7c140202800L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 5;
					return 59;
				}
				return -1;
			case 6:
				if ((active0 & 0xc0d4de41a0000000L) != 0L || (active1 & 0x240309026cL) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 6;
					return 58;
				}
				if ((active1 & 0x8000000000L) != 0L) { return 59; }
				if ((active0 & 0x21201000000000L) != 0L || (active1 & 0x520013L) != 0L) { return 58; }
				if ((active0 & 0x3c00000800000000L) != 0L || (active1 & 0x74140202800L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 6;
					return 59;
				}
				return -1;
			case 7:
				if ((active0 & 0x3c00000800000000L) != 0L || (active1 & 0x74140202840L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 7;
					return 59;
				}
				if ((active0 & 0x8090800000000000L) != 0L || (active1 & 0x201000cL) != 0L) { return 58; }
				if ((active0 & 0x40445e41a0000000L) != 0L || (active1 & 0x2401080220L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 7;
					return 58;
				}
				return -1;
			case 8:
				if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x74100202840L) != 0L) {
					if (jjmatchedPos != 8) {
						jjmatchedKind = 108;
						jjmatchedPos = 8;
					}
					return 59;
				}
				if ((active0 & 0x2000000800000000L) != 0L || (active1 & 0x40000000L) != 0L) { return 59; }
				if ((active0 & 0x20000000L) != 0L || (active1 & 0x1000000L) != 0L) {
					if (jjmatchedPos < 7) {
						jjmatchedKind = 108;
						jjmatchedPos = 7;
					}
					return 60;
				}
				if ((active0 & 0x4044580080000000L) != 0L || (active1 & 0x400080220L) != 0L) {
					if (jjmatchedPos != 8) {
						jjmatchedKind = 108;
						jjmatchedPos = 8;
					}
					return 58;
				}
				if ((active0 & 0x64100000000L) != 0L || (active1 & 0x2000000000L) != 0L) { return 58; }
				return -1;
			case 9:
				if ((active1 & 0x10000000000L) != 0L) { return 59; }
				if ((active0 & 0x404800a0000000L) != 0L || (active1 & 0x401080220L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 9;
					return 58;
				}
				if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x64100202840L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 9;
					return 59;
				}
				if ((active0 & 0x4004140000000000L) != 0L) { return 58; }
				return -1;
			case 10:
				if ((active0 & 0x40000020000000L) != 0L || (active1 & 0x401080220L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 10;
					return 58;
				}
				if ((active0 & 0x480080000000L) != 0L) { return 58; }
				if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x64100202840L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 10;
					return 59;
				}
				return -1;
			case 11:
				if ((active0 & 0x40000020000000L) != 0L || (active1 & 0x400080200L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 11;
					return 58;
				}
				if ((active1 & 0x40L) != 0L) { return 59; }
				if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0x64100202800L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 11;
					return 59;
				}
				if ((active1 & 0x1000020L) != 0L) { return 58; }
				return -1;
			case 12:
				if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x24000202000L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 12;
					return 59;
				}
				if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x40100000800L) != 0L) { return 59; }
				if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x80000L) != 0L) { return 58; }
				if ((active0 & 0x20000000L) != 0L || (active1 & 0x400000200L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 12;
					return 58;
				}
				return -1;
			case 13:
				if ((active1 & 0x20000000000L) != 0L) { return 59; }
				if ((active0 & 0x20000000L) != 0L || (active1 & 0x400000000L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 13;
					return 58;
				}
				if ((active1 & 0x200L) != 0L) { return 58; }
				if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x4000202000L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 13;
					return 59;
				}
				return -1;
			case 14:
				if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x4000200000L) != 0L) { return 59; }
				if ((active1 & 0x2000L) != 0L) {
					jjmatchedKind = 108;
					jjmatchedPos = 14;
					return 59;
				}
				if ((active0 & 0x20000000L) != 0L || (active1 & 0x400000000L) != 0L) { return 58; }
				return -1;
			default:
				return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}

	static private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
			case 33:
				return jjStopAtPos(0, 125);
			case 39:
				return jjStartNfaWithStates_0(0, 18, 57);
			case 40:
				return jjStopAtPos(0, 24);
			case 41:
				return jjStopAtPos(0, 25);
			case 42:
				return jjStopAtPos(0, 12);
			case 44:
				return jjStopAtPos(0, 17);
			case 45:
				jjmatchedKind = 10;
				return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
			case 46:
				jjmatchedKind = 8;
				return jjMoveStringLiteralDfa1_0(0x6000L, 0x0L);
			case 48:
				return jjStartNfaWithStates_0(0, 115, 3);
			case 58:
				jjmatchedKind = 20;
				return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
			case 59:
				return jjStopAtPos(0, 21);
			case 60:
				return jjStopAtPos(0, 15);
			case 62:
				return jjStopAtPos(0, 16);
			case 64:
				return jjStopAtPos(0, 11);
			case 65:
				return jjMoveStringLiteralDfa1_0(0x1f0000000L, 0x0L);
			case 66:
				return jjMoveStringLiteralDfa1_0(0x3e00000000L, 0x0L);
			case 67:
				return jjMoveStringLiteralDfa1_0(0x1fc000000000L, 0x0L);
			case 68:
				return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L);
			case 69:
				return jjMoveStringLiteralDfa1_0(0xff800000000000L, 0x0L);
			case 70:
				return jjMoveStringLiteralDfa1_0(0x300000000000000L, 0x0L);
			case 71:
				return jjMoveStringLiteralDfa1_0(0x1c00000000000000L, 0x0L);
			case 73:
				return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x7fL);
			case 77:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x380L);
			case 78:
				return jjMoveStringLiteralDfa1_0(0x0L, 0xc00L);
			case 79:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x1f000L);
			case 80:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x7e0000L);
			case 82:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000L);
			case 83:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x3e000000L);
			case 84:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0000000L);
			case 85:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x1f800000000L);
			case 86:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000000L);
			case 87:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
			case 91:
				jjmatchedKind = 22;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L);
			case 93:
				jjmatchedKind = 23;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L);
			case 94:
				return jjStopAtPos(0, 126);
			case 123:
				return jjStopAtPos(0, 26);
			case 124:
				return jjStopAtPos(0, 19);
			case 125:
				return jjStopAtPos(0, 27);
			default:
				return jjMoveNfa_0(0, 0);
		}
	}

	static private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
			case 45:
				if ((active0 & 0x20L) != 0L) { return jjStopAtPos(1, 5); }
				break;
			case 46:
				if ((active0 & 0x2000L) != 0L) {
					jjmatchedKind = 13;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
			case 54:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
			case 58:
				return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
			case 65:
				return jjMoveStringLiteralDfa2_0(active0, 0x2100000000000000L, active1, 0x80020080L);
			case 66:
				return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0x1000L);
			case 67:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
			case 68:
				return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x40000L);
			case 69:
				return jjMoveStringLiteralDfa2_0(active0, 0x600200000000L, active1, 0x7800000L);
			case 70:
				if ((active1 & 0x8000L) != 0L) { return jjStartNfaWithStates_0(1, 79, 58); }
				break;
			case 72:
				return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0L);
			case 73:
				return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x80008000300L);
			case 76:
				return jjMoveStringLiteralDfa2_0(active0, 0x10040000000L, active1, 0x80000L);
			case 77:
				return jjMoveStringLiteralDfa2_0(active0, 0x8000800800000000L, active1, 0x3L);
			case 78:
				return jjMoveStringLiteralDfa2_0(active0, 0x7000000000000L, active1, 0x380000003cL);
			case 79:
				return jjMoveStringLiteralDfa2_0(active0, 0x1e1000000000L, active1, 0L);
			case 80:
				return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x10000L);
			case 82:
				return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x200500000L);
			case 83:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
			case 84:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18010000000L);
			case 85:
				return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x400L);
			case 88:
				return jjMoveStringLiteralDfa2_0(active0, 0xf8000000000000L, active1, 0L);
			case 89:
				if ((active0 & 0x2000000000L) != 0L) { return jjStartNfaWithStates_0(1, 37, 58); }
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x420000000L);
			case 91:
				if ((active1 & 0x800000000000000L) != 0L) { return jjStopAtPos(1, 123); }
				break;
			case 93:
				if ((active1 & 0x1000000000000000L) != 0L) { return jjStopAtPos(1, 124); }
				break;
			case 98:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
			case 101:
				return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0x100000000L);
			case 105:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60000000000L);
			case 110:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L);
			case 114:
				return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x200000L);
			case 117:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
			default:
				break;
		}
		return jjStartNfa_0(0, active0, active1);
	}

	static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(0, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch (curChar) {
			case 46:
				if ((active0 & 0x4000L) != 0L) { return jjStopAtPos(2, 14); }
				break;
			case 49:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
			case 53:
				return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
			case 61:
				if ((active0 & 0x200L) != 0L) { return jjStopAtPos(2, 9); }
				break;
			case 65:
				return jjMoveStringLiteralDfa3_0(active0, 0x14000000000L, active1, 0x800000L);
			case 66:
				return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
			case 67:
				return jjMoveStringLiteralDfa3_0(active0, 0x9000000000000L, active1, 0x8000000004L);
			case 68:
				if ((active0 & 0x2000000000000L) != 0L) { return jjStartNfaWithStates_0(2, 49, 58); }
				break;
			case 69:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x100000L);
			case 70:
				return jjMoveStringLiteralDfa3_0(active0, 0x600000000000L, active1, 0x10000000000L);
			case 71:
				return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x80000000L);
			case 73:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3800400000L);
			case 74:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
			case 76:
				if ((active0 & 0x40000000L) != 0L) { return jjStartNfaWithStates_0(2, 30, 58); }
				return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x1000400L);
			case 77:
				return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L, active1, 0L);
			case 78:
				if ((active1 & 0x100L) != 0L) {
					jjmatchedKind = 72;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L, active1, 0x20000200L);
			case 79:
				return jjMoveStringLiteralDfa3_0(active0, 0x200009000000000L, active1, 0x40L);
			case 80:
				return jjMoveStringLiteralDfa3_0(active0, 0x8030000880000000L, active1, 0x400000003L);
			case 81:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L);
			case 82:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000L);
			case 83:
				return jjMoveStringLiteralDfa3_0(active0, 0x30000000L, active1, 0x8L);
			case 84:
				if ((active0 & 0x400000000L) != 0L) { return jjStartNfaWithStates_0(2, 34, 58); } else if ((active1 & 0x4000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 90, 58);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0xc0000100000000L, active1, 0x80000034030L);
			case 85:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x200080000L);
			case 86:
				if ((active1 & 0x40000L) != 0L) { return jjStartNfaWithStates_0(2, 82, 58); }
				break;
			case 88:
				if ((active1 & 0x80L) != 0L) { return jjStartNfaWithStates_0(2, 71, 58); }
				break;
			case 90:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L);
			case 97:
				return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
			case 100:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L);
			case 105:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000200000L);
			case 106:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L);
			case 109:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
			case 110:
				return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000000L, active1, 0L);
			case 115:
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L);
			default:
				break;
		}
		return jjStartNfa_0(1, active0, active1);
	}

	static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(1, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch (curChar) {
			case 54:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
			case 56:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L);
			case 65:
				return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x1000000L);
			case 69:
				if ((active1 & 0x8000000L) != 0L) { return jjStartNfaWithStates_0(3, 91, 58); } else if ((active1 & 0x200000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 97, 58);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0xc8800010000000L, active1, 0x400005030L);
			case 72:
				if ((active1 & 0x80000000000L) != 0L) { return jjStartNfaWithStates_0(3, 107, 58); }
				break;
			case 73:
				return jjMoveStringLiteralDfa4_0(active0, 0x408200000000L, active1, 0x10010000L);
			case 76:
				if ((active1 & 0x400L) != 0L) { return jjStartNfaWithStates_0(3, 74, 58); } else if ((active1 & 0x800000L) != 0L) {
					return jjStartNfaWithStates_0(3, 87, 58);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x8010001080000000L, active1, 0x5L);
			case 77:
				if ((active0 & 0x200000000000000L) != 0L) { return jjStartNfaWithStates_0(3, 57, 58); }
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
			case 78:
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
			case 79:
				return jjMoveStringLiteralDfa4_0(active0, 0x21000100000000L, active1, 0x800000002L);
			case 80:
				return jjMoveStringLiteralDfa4_0(active0, 0x60000000000L, active1, 0L);
			case 81:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L);
			case 82:
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
			case 83:
				if ((active1 & 0x80000000L) != 0L) { return jjStartNfaWithStates_0(3, 95, 58); }
				return jjMoveStringLiteralDfa4_0(active0, 0x2100090800000000L, active1, 0x40180000L);
			case 84:
				return jjMoveStringLiteralDfa4_0(active0, 0x100020000000L, active1, 0x8020020008L);
			case 85:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000200L);
			case 86:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000400000L);
			case 101:
				return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000000L, active1, 0x20100002800L);
			case 105:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L);
			case 110:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L);
			case 112:
				return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
			case 118:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L);
			default:
				break;
		}
		return jjStartNfa_0(2, active0, active1);
	}

	static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(2, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch (curChar) {
			case 45:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400080000L);
			case 52:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
			case 65:
				return jjMoveStringLiteralDfa5_0(active0, 0x104000000000L, active1, 0x20400008L);
			case 67:
				return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x1000L);
			case 68:
				return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000L, active1, 0L);
			case 69:
				if ((active0 & 0x100000000000000L) != 0L) { return jjStartNfaWithStates_0(4, 56, 58); }
				return jjMoveStringLiteralDfa5_0(active0, 0x4001000000000L, active1, 0x2002120000L);
			case 71:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
			case 73:
				return jjMoveStringLiteralDfa5_0(active0, 0x8010000080000000L, active1, 0x1L);
			case 77:
				return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
			case 78:
				if ((active0 & 0x200000000L) != 0L) { return jjStartNfaWithStates_0(4, 33, 58); } else if ((active1 & 0x800000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 99, 58);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x40400010000000L, active1, 0x10000000L);
			case 79:
				return jjMoveStringLiteralDfa5_0(active0, 0x60000000000L, active1, 0x10000L);
			case 80:
				return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
			case 82:
				return jjMoveStringLiteralDfa5_0(active0, 0xa0000020000000L, active1, 0x22L);
			case 83:
				if ((active0 & 0x10000000000L) != 0L) { return jjStartNfaWithStates_0(4, 40, 58); }
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000200L);
			case 84:
				if ((active1 & 0x4000L) != 0L) { return jjStartNfaWithStates_0(4, 78, 58); }
				return jjMoveStringLiteralDfa5_0(active0, 0x4000080000000000L, active1, 0x1000000L);
			case 85:
				return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0x1000000004L);
			case 98:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
			case 99:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
			case 101:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L);
			case 104:
				return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
			case 105:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L);
			case 111:
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L);
			case 114:
				return jjMoveStringLiteralDfa5_0(active0, 0xc00000000000000L, active1, 0x800L);
			case 116:
				return jjMoveStringLiteralDfa5_0(active0, 0x2000000800000000L, active1, 0x140200000L);
			default:
				break;
		}
		return jjStartNfa_0(3, active0, active1);
	}

	static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(3, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch (curChar) {
			case 45:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
			case 54:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
			case 65:
				return jjMoveStringLiteralDfa6_0(active0, 0x1120000000L, active1, 0L);
			case 67:
				return jjMoveStringLiteralDfa6_0(active0, 0x8010004080000000L, active1, 0L);
			case 68:
				return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0x4L);
			case 69:
				if ((active0 & 0x8000000000L) != 0L) { return jjStartNfaWithStates_0(5, 39, 58); } else if ((active1 & 0x1000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 100, 58);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0x11L);
			case 71:
				if ((active1 & 0x10000000L) != 0L) { return jjStartNfaWithStates_0(5, 92, 58); }
				break;
			case 73:
				return jjMoveStringLiteralDfa6_0(active0, 0x4000500000000000L, active1, 0x401080000L);
			case 76:
				return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
			case 78:
				return jjMoveStringLiteralDfa6_0(active0, 0x80060000000000L, active1, 0x2110008L);
			case 82:
				return jjMoveStringLiteralDfa6_0(active0, 0x4080000000000L, active1, 0x2000020000L);
			case 83:
				return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x20L);
			case 84:
				if ((active0 & 0x10000000L) != 0L) { return jjStartNfaWithStates_0(5, 28, 58); } else if ((active0 & 0x8000000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 51, 58);
				} else if ((active1 & 0x1000L) != 0L) {
					return jjStartNfaWithStates_0(5, 76, 15);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x400002L);
			case 88:
				if ((active1 & 0x20000000L) != 0L) { return jjStartNfaWithStates_0(5, 93, 58); }
				break;
			case 97:
				return jjMoveStringLiteralDfa6_0(active0, 0xc00000000000000L, active1, 0x200000L);
			case 101:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
			case 105:
				return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x800L);
			case 108:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L);
			case 109:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L);
			case 114:
				return jjMoveStringLiteralDfa6_0(active0, 0x2000000800000000L, active1, 0x4040000000L);
			case 116:
				return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30000002000L);
			default:
				break;
		}
		return jjStartNfa_0(4, active0, active1);
	}

	static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(4, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1);
			return 6;
		}
		switch (curChar) {
			case 65:
				return jjMoveStringLiteralDfa7_0(active0, 0x84080080000000L, active1, 0x10000L);
			case 67:
				return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0x2000008L);
			case 68:
				if ((active0 & 0x1000000000000L) != 0L) { return jjStartNfaWithStates_0(6, 48, 58); } else if ((active1 & 0x1L) != 0L) {
					return jjStartNfaWithStates_0(6, 64, 58);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400002000L);
			case 69:
				if ((active1 & 0x400000L) != 0L) { return jjStartNfaWithStates_0(6, 86, 58); }
				return jjMoveStringLiteralDfa7_0(active0, 0x860000000000L, active1, 0x24L);
			case 70:
				return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
			case 73:
				return jjMoveStringLiteralDfa7_0(active0, 0x8050000000000000L, active1, 0x200L);
			case 78:
				if ((active0 & 0x1000000000L) != 0L) { return jjStartNfaWithStates_0(6, 36, 58); } else if ((active1 & 0x20000L) != 0L) {
					return jjStartNfaWithStates_0(6, 81, 58);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x80000L);
			case 82:
				if ((active1 & 0x10L) != 0L) { return jjStartNfaWithStates_0(6, 68, 58); }
				break;
			case 83:
				if ((active0 & 0x20000000000000L) != 0L) { return jjStartNfaWithStates_0(6, 53, 58); } else if ((active1 & 0x2L) != 0L) {
					return jjStartNfaWithStates_0(6, 65, 58);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000040L);
			case 84:
				if ((active0 & 0x200000000000L) != 0L) { return jjStartNfaWithStates_0(6, 45, 58); } else if ((active1 & 0x100000L) != 0L) {
					return jjStartNfaWithStates_0(6, 84, 58);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0x404100000000L, active1, 0L);
			case 86:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L);
			case 98:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
			case 99:
				return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x800L);
			case 101:
				if ((active1 & 0x8000000000L) != 0L) { return jjStartNfaWithStates_0(6, 103, 59); }
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x60000000000L);
			case 105:
				return jjMoveStringLiteralDfa7_0(active0, 0x2000000800000000L, active1, 0x40000000L);
			case 108:
				return jjMoveStringLiteralDfa7_0(active0, 0xc00000000000000L, active1, 0L);
			case 114:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L);
			case 115:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L);
			case 120:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L);
			default:
				break;
		}
		return jjStartNfa_0(5, active0, active1);
	}

	static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(5, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, active1);
			return 7;
		}
		switch (curChar) {
			case 65:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000L);
			case 66:
				return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
			case 67:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
			case 68:
				if ((active0 & 0x800000000000L) != 0L) { return jjStartNfaWithStates_0(7, 47, 58); }
				break;
			case 69:
				if ((active1 & 0x8L) != 0L) { return jjStartNfaWithStates_0(7, 67, 58); } else if ((active1 & 0x2000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 89, 58);
				}
				return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0x401000000L);
			case 70:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
			case 73:
				return jjMoveStringLiteralDfa8_0(active0, 0x4000580100000000L, active1, 0L);
			case 76:
				if ((active0 & 0x80000000000000L) != 0L) { return jjStartNfaWithStates_0(7, 55, 58); } else if ((active1 & 0x10000L) != 0L) {
					return jjStartNfaWithStates_0(7, 80, 58);
				}
				break;
			case 78:
				return jjMoveStringLiteralDfa8_0(active0, 0x60000000000L, active1, 0x200L);
			case 83:
				if ((active1 & 0x4L) != 0L) { return jjStartNfaWithStates_0(7, 66, 58); }
				return jjMoveStringLiteralDfa8_0(active0, 0x1800000000000000L, active1, 0x40100000800L);
			case 84:
				if ((active0 & 0x10000000000000L) != 0L) { return jjStartNfaWithStates_0(7, 52, 58); } else if ((active0 & 0x8000000000000000L)
				                                                                                                != 0L) {
					return jjStartNfaWithStates_0(7, 63, 58);
				}
				return jjMoveStringLiteralDfa8_0(active0, 0x40000a0000000L, active1, 0L);
			case 97:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L);
			case 101:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L);
			case 105:
				return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0x10000000000L);
			case 108:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
			case 110:
				return jjMoveStringLiteralDfa8_0(active0, 0x2000000800000000L, active1, 0x40000000L);
			case 116:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
			case 120:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000L);
			default:
				break;
		}
		return jjStartNfa_0(6, active0, active1);
	}

	static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(6, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, active1);
			return 8;
		}
		switch (curChar) {
			case 45:
				return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0x1000000L);
			case 67:
				if ((active0 & 0x100000000L) != 0L) { return jjStartNfaWithStates_0(8, 32, 58); }
				break;
			case 69:
				return jjMoveStringLiteralDfa9_0(active0, 0x4004000000000000L, active1, 0L);
			case 70:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
			case 73:
				return jjMoveStringLiteralDfa9_0(active0, 0x40000080000000L, active1, 0x80000L);
			case 76:
				if ((active1 & 0x2000000000L) != 0L) { return jjStartNfaWithStates_0(8, 101, 58); }
				break;
			case 78:
				return jjMoveStringLiteralDfa9_0(active0, 0x180000000000L, active1, 0x400000000L);
			case 79:
				return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L);
			case 82:
				if ((active0 & 0x4000000000L) != 0L) { return jjStartNfaWithStates_0(8, 38, 58); }
				break;
			case 83:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000L);
			case 84:
				if ((active0 & 0x20000000000L) != 0L) {
					jjmatchedKind = 41;
					jjmatchedPos = 8;
				}
				return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0x20L);
			case 101:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
			case 103:
				if ((active0 & 0x800000000L) != 0L) { return jjStartNfaWithStates_0(8, 35, 59); } else if ((active0 & 0x2000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 61, 59);
				} else if ((active1 & 0x40000000L)
				           != 0L) {
					return jjStartNfaWithStates_0(8, 94, 59);
				}
				break;
			case 108:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L);
			case 110:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
			case 114:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
			case 115:
				return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
			case 116:
				return jjMoveStringLiteralDfa9_0(active0, 0x1800000000000000L, active1, 0x40100000800L);
			case 122:
				return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(7, active0, active1);
	}

	static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(7, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, active1);
			return 9;
		}
		switch (curChar) {
			case 68:
				if ((active0 & 0x4000000000000L) != 0L) { return jjStartNfaWithStates_0(9, 50, 58); }
				break;
			case 69:
				return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0L);
			case 71:
				if ((active0 & 0x100000000000L) != 0L) { return jjStartNfaWithStates_0(9, 44, 58); }
				break;
			case 73:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x220L);
			case 76:
				return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
			case 78:
				return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active1, 0x80000L);
			case 79:
				return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0x1000000L);
			case 82:
				if ((active0 & 0x4000000000000000L) != 0L) { return jjStartNfaWithStates_0(9, 62, 58); }
				break;
			case 83:
				if ((active0 & 0x40000000000L) != 0L) { return jjStartNfaWithStates_0(9, 42, 58); }
				return jjMoveStringLiteralDfa10_0(active0, 0x20000000L, active1, 0x4000200000L);
			case 84:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000L);
			case 99:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L);
			case 101:
				return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L);
			case 103:
				if ((active1 & 0x10000000000L) != 0L) { return jjStartNfaWithStates_0(9, 104, 59); }
				break;
			case 105:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40L);
			case 114:
				return jjMoveStringLiteralDfa10_0(active0, 0x1800000000000000L, active1, 0x40100000800L);
			case 116:
				return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000L);
			default:
				break;
		}
		return jjStartNfa_0(8, active0, active1);
	}

	static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(8, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, active1);
			return 10;
		}
		switch (curChar) {
			case 68:
				if ((active0 & 0x80000000000L) != 0L) { return jjStartNfaWithStates_0(10, 43, 58); }
				break;
			case 73:
				return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0x401080000L);
			case 78:
				if ((active0 & 0x80000000L) != 0L) { return jjStartNfaWithStates_0(10, 31, 58); }
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L);
			case 79:
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L);
			case 83:
				if ((active0 & 0x400000000000L) != 0L) { return jjStartNfaWithStates_0(10, 46, 58); }
				break;
			case 89:
				return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0L);
			case 100:
				return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0L);
			case 105:
				return jjMoveStringLiteralDfa11_0(active0, 0x1800000000000000L, active1, 0x40100000800L);
			case 110:
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40L);
			case 114:
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000002000L);
			case 116:
				return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000200000L);
			default:
				break;
		}
		return jjStartNfa_0(9, active0, active1);
	}

	static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(9, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, active1);
			return 11;
		}
		switch (curChar) {
			case 68:
				if ((active1 & 0x1000000L) != 0L) { return jjStartNfaWithStates_0(11, 88, 58); }
				break;
			case 70:
				return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000L);
			case 73:
				return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
			case 78:
				if ((active1 & 0x20L) != 0L) { return jjStartNfaWithStates_0(11, 69, 58); }
				return jjMoveStringLiteralDfa12_0(active0, 0x20000000L, active1, 0L);
			case 84:
				return jjMoveStringLiteralDfa12_0(active0, 0x440000000000000L, active1, 0x80000L);
			case 103:
				if ((active1 & 0x40L) != 0L) { return jjStartNfaWithStates_0(11, 70, 59); }
				break;
			case 105:
				return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000002000L);
			case 110:
				return jjMoveStringLiteralDfa12_0(active0, 0x1800000000000000L, active1, 0x40100000800L);
			case 114:
				return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000200000L);
			default:
				break;
		}
		return jjStartNfa_0(10, active0, active1);
	}

	static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(10, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0, active1);
			return 12;
		}
		switch (curChar) {
			case 73:
				return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000L);
			case 84:
				return jjMoveStringLiteralDfa13_0(active0, 0x20000000L, active1, 0x200L);
			case 89:
				if ((active0 & 0x40000000000000L) != 0L) { return jjStartNfaWithStates_0(12, 54, 58); } else if ((active1 & 0x80000L) != 0L) {
					return jjStartNfaWithStates_0(12, 83, 58);
				}
				break;
			case 103:
				if ((active0 & 0x800000000000000L) != 0L) { return jjStartNfaWithStates_0(12, 59, 59); } else if ((active0 & 0x1000000000000000L)
				                                                                                                  != 0L) {
					return jjStartNfaWithStates_0(12, 60, 59);
				} else if ((active1 & 0x800L) != 0L) {
					return jjStartNfaWithStates_0(12, 75, 59);
				} else if ((active1 & 0x100000000L) != 0L) {
					return jjStartNfaWithStates_0(12, 96, 59);
				} else if ((active1 & 0x40000000000L) != 0L) {
					return jjStartNfaWithStates_0(12, 106, 59);
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0x4000200000L);
			case 110:
				return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000000L);
			case 112:
				return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
			default:
				break;
		}
		return jjStartNfa_0(11, active0, active1);
	}

	static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(11, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0, active1);
			return 13;
		}
		switch (curChar) {
			case 65:
				return jjMoveStringLiteralDfa14_0(active0, 0x20000000L, active1, 0L);
			case 69:
				return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000000L);
			case 89:
				if ((active1 & 0x200L) != 0L) { return jjStartNfaWithStates_0(13, 73, 58); }
				break;
			case 103:
				if ((active1 & 0x20000000000L) != 0L) { return jjStartNfaWithStates_0(13, 105, 59); }
				break;
			case 109:
				return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0L);
			case 110:
				return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000200000L);
			case 116:
				return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000L);
			default:
				break;
		}
		return jjStartNfa_0(12, active0, active1);
	}

	static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(12, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, active0, active1);
			return 14;
		}
		switch (curChar) {
			case 82:
				if ((active1 & 0x400000000L) != 0L) { return jjStartNfaWithStates_0(14, 98, 58); }
				break;
			case 88:
				if ((active0 & 0x20000000L) != 0L) { return jjStartNfaWithStates_0(14, 29, 58); }
				break;
			case 101:
				if ((active0 & 0x400000000000000L) != 0L) { return jjStartNfaWithStates_0(14, 58, 59); }
				break;
			case 103:
				if ((active1 & 0x200000L) != 0L) { return jjStartNfaWithStates_0(14, 85, 59); } else if ((active1 & 0x4000000000L) != 0L) {
					return jjStartNfaWithStates_0(14, 102, 59);
				}
				break;
			case 111:
				return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000L);
			default:
				break;
		}
		return jjStartNfa_0(13, active0, active1);
	}

	static private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) { return jjStartNfa_0(13, old0, old1); }
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, 0L, active1);
			return 15;
		}
		switch (curChar) {
			case 114:
				if ((active1 & 0x2000L) != 0L) { return jjStartNfaWithStates_0(15, 77, 59); }
				break;
			default:
				break;
		}
		return jjStartNfa_0(14, 0L, active1);
	}

	static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try { curChar = input_stream.readChar(); } catch (java.io.IOException e) { return pos + 1; }
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = {
	                                0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
	};

	static private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 57;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (; ; ) {
			if (++jjround == 0x7fffffff) { ReInitRounds(); }
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
						case 29:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							} else if (curChar == 45) { jjCheckNAdd(35); }
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 28:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							} else if (curChar == 45) { jjCheckNAdd(35); }
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 59:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 14:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							} else if (curChar == 45) { jjCheckNAdd(35); }
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 27:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							} else if (curChar == 45) { jjCheckNAdd(35); }
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 26:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							} else if (curChar == 45) { jjCheckNAdd(35); }
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 60:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							break;
						case 0:
							if ((0x3fe000000000000L & l) != 0L) {
								if (kind > 116) { kind = 116; }
								jjCheckNAddStates(0, 2);
							} else if (curChar == 39) { jjCheckNAddStates(3, 5); } else if (curChar == 38) { jjAddStates(6, 7); } else if (curChar
							                                                                                                               == 34) {
								jjCheckNAddTwoStates(12, 13);
							} else if (curChar
							           == 48) {
								jjCheckNAdd(3);
							} else if (curChar
							           == 45) {
								jjstateSet[jjnewStateCnt++] = 1;
							}
							break;
						case 58:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							} else if (curChar == 45) { jjCheckNAdd(35); }
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 15:
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							} else if ((0x100002600L & l) != 0L) { jjstateSet[jjnewStateCnt++] = 25; } else if (curChar == 45) { jjCheckNAdd(35); }
							if ((0x3ff000000000000L & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							} else if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 57:
							if ((0x3ff000000000000L & l) != 0L) { jjCheckNAddTwoStates(54, 56); } else if (curChar == 39) {
								jjstateSet[jjnewStateCnt++] = 55;
							}
							if ((0x3000000000000L & l) != 0L) { jjCheckNAddTwoStates(51, 53); }
							break;
						case 1:
							if ((0x3fe000000000000L & l) != 0L) { jjCheckNAddTwoStates(2, 3); }
							break;
						case 2:
							if ((0x3ff000000000000L & l) != 0L) { jjCheckNAddTwoStates(2, 3); }
							break;
						case 3:
							if (curChar == 46) { jjCheckNAdd(4); }
							break;
						case 4:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 118) { kind = 118; }
							jjCheckNAddTwoStates(4, 5);
							break;
						case 6:
							if ((0x280000000000L & l) != 0L) { jjstateSet[jjnewStateCnt++] = 7; }
							break;
						case 7:
							if ((0x3fe000000000000L & l) == 0L) { break; }
							if (kind > 118) { kind = 118; }
							jjCheckNAdd(8);
							break;
						case 8:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 118) { kind = 118; }
							jjCheckNAdd(8);
							break;
						case 9:
							if (curChar == 48 && kind > 118) { kind = 118; }
							break;
						case 10:
							if (curChar == 48) { jjCheckNAdd(3); }
							break;
						case 11:
							if (curChar == 34) { jjCheckNAddTwoStates(12, 13); }
							break;
						case 12:
							if ((0xfffffffbffffffffL & l) != 0L) { jjCheckNAddTwoStates(12, 13); }
							break;
						case 13:
							if (curChar == 34 && kind > 121) { kind = 121; }
							break;
						case 32:
							if (curChar == 45) { jjCheckNAdd(33); }
							break;
						case 33:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 108) { kind = 108; }
							jjCheckNAddTwoStates(32, 33);
							break;
						case 34:
							if (curChar == 45) { jjCheckNAdd(35); }
							break;
						case 35:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 110) { kind = 110; }
							jjCheckNAddTwoStates(34, 35);
							break;
						case 37:
							if (curChar == 45) { jjCheckNAdd(38); }
							break;
						case 38:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 109) { kind = 109; }
							jjCheckNAddTwoStates(37, 38);
							break;
						case 39:
							if (curChar == 45) { jjCheckNAdd(40); }
							break;
						case 40:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 111) { kind = 111; }
							jjCheckNAddTwoStates(39, 40);
							break;
						case 41:
							if (curChar == 38) { jjAddStates(6, 7); }
							break;
						case 43:
							if (curChar == 45) { jjCheckNAdd(44); }
							break;
						case 44:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 112) { kind = 112; }
							jjCheckNAddTwoStates(43, 44);
							break;
						case 46:
							if (curChar == 45) { jjCheckNAdd(47); }
							break;
						case 47:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 113) { kind = 113; }
							jjCheckNAddTwoStates(46, 47);
							break;
						case 48:
							if ((0x3fe000000000000L & l) == 0L) { break; }
							if (kind > 116) { kind = 116; }
							jjCheckNAddStates(0, 2);
							break;
						case 49:
							if ((0x3ff000000000000L & l) == 0L) { break; }
							if (kind > 116) { kind = 116; }
							jjCheckNAdd(49);
							break;
						case 50:
							if (curChar == 39) { jjCheckNAddStates(3, 5); }
							break;
						case 51:
							if ((0x3000000000000L & l) != 0L) { jjCheckNAddTwoStates(51, 53); }
							break;
						case 53:
							if (curChar == 39) { jjstateSet[jjnewStateCnt++] = 52; }
							break;
						case 54:
							if ((0x3ff000000000000L & l) != 0L) { jjCheckNAddTwoStates(54, 56); }
							break;
						case 56:
							if (curChar == 39) { jjstateSet[jjnewStateCnt++] = 55; }
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						case 29:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							if (curChar == 66) { jjstateSet[jjnewStateCnt++] = 28; }
							break;
						case 28:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							if (curChar == 74) { jjstateSet[jjnewStateCnt++] = 27; }
							break;
						case 59:
						case 33:
							if ((0x7fffffe07fffffeL & l) == 0L) { break; }
							if (kind > 108) { kind = 108; }
							jjCheckNAddTwoStates(32, 33);
							break;
						case 14:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							if (curChar == 84) { jjAddStates(8, 9); }
							break;
						case 27:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							if (curChar == 69) { jjstateSet[jjnewStateCnt++] = 26; }
							break;
						case 26:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							if (curChar == 67) { jjstateSet[jjnewStateCnt++] = 14; }
							break;
						case 60:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							break;
						case 0:
							if ((0x7fffffe00000000L & l) != 0L) {
								if (kind > 109) { kind = 109; }
								jjCheckNAddStates(10, 13);
							} else if ((0x7fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddStates(14, 17);
							}
							if (curChar == 79) { jjstateSet[jjnewStateCnt++] = 29; }
							break;
						case 58:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							break;
						case 15:
							if ((0x7fffffe07fffffeL & l) != 0L) {
								if (kind > 108) { kind = 108; }
								jjCheckNAddTwoStates(32, 33);
							}
							if ((0x7fffffeL & l) != 0L) {
								if (kind > 110) { kind = 110; }
								jjCheckNAddTwoStates(34, 35);
							}
							if (curChar == 73) { jjstateSet[jjnewStateCnt++] = 24; }
							break;
						case 57:
						case 54:
							if ((0x7e0000007eL & l) != 0L) { jjCheckNAddTwoStates(54, 56); }
							break;
						case 5:
							if ((0x2000000020L & l) != 0L) { jjAddStates(18, 20); }
							break;
						case 12:
							jjAddStates(21, 22);
							break;
						case 16:
							if (curChar == 82 && kind > 122) { kind = 122; }
							break;
						case 17:
							if (curChar == 69) { jjstateSet[jjnewStateCnt++] = 16; }
							break;
						case 18:
							if (curChar == 73) { jjstateSet[jjnewStateCnt++] = 17; }
							break;
						case 19:
							if (curChar == 70) { jjstateSet[jjnewStateCnt++] = 18; }
							break;
						case 20:
							if (curChar == 73) { jjstateSet[jjnewStateCnt++] = 19; }
							break;
						case 21:
							if (curChar == 84) { jjstateSet[jjnewStateCnt++] = 20; }
							break;
						case 22:
							if (curChar == 78) { jjstateSet[jjnewStateCnt++] = 21; }
							break;
						case 23:
							if (curChar == 69) { jjstateSet[jjnewStateCnt++] = 22; }
							break;
						case 24:
							if (curChar == 68) { jjstateSet[jjnewStateCnt++] = 23; }
							break;
						case 25:
							if (curChar == 73) { jjstateSet[jjnewStateCnt++] = 24; }
							break;
						case 30:
							if (curChar == 79) { jjstateSet[jjnewStateCnt++] = 29; }
							break;
						case 31:
							if ((0x7fffffeL & l) == 0L) { break; }
							if (kind > 108) { kind = 108; }
							jjCheckNAddStates(14, 17);
							break;
						case 35:
							if ((0x7fffffeL & l) == 0L) { break; }
							if (kind > 110) { kind = 110; }
							jjCheckNAddTwoStates(34, 35);
							break;
						case 36:
							if ((0x7fffffe00000000L & l) == 0L) { break; }
							if (kind > 109) { kind = 109; }
							jjCheckNAddStates(10, 13);
							break;
						case 38:
							if ((0x7fffffe07fffffeL & l) == 0L) { break; }
							if (kind > 109) { kind = 109; }
							jjCheckNAddTwoStates(37, 38);
							break;
						case 40:
							if ((0x7fffffe00000000L & l) == 0L) { break; }
							if (kind > 111) { kind = 111; }
							jjCheckNAddTwoStates(39, 40);
							break;
						case 42:
							if ((0x7fffffeL & l) == 0L) { break; }
							if (kind > 112) { kind = 112; }
							jjCheckNAddTwoStates(43, 44);
							break;
						case 44:
							if ((0x7fffffe07fffffeL & l) == 0L) { break; }
							if (kind > 112) { kind = 112; }
							jjCheckNAddTwoStates(43, 44);
							break;
						case 45:
							if ((0x7fffffe00000000L & l) == 0L) { break; }
							if (kind > 113) { kind = 113; }
							jjCheckNAddTwoStates(46, 47);
							break;
						case 47:
							if ((0x7fffffe07fffffeL & l) == 0L) { break; }
							if (kind > 113) { kind = 113; }
							jjCheckNAddTwoStates(46, 47);
							break;
						case 52:
							if (curChar == 66 && kind > 119) { kind = 119; }
							break;
						case 55:
							if (curChar == 72 && kind > 120) { kind = 120; }
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						case 12:
							if ((jjbitVec0[i2] & l2) != 0L) { jjAddStates(21, 22); }
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt))) { return curPos; }
			try { curChar = input_stream.readChar(); } catch (java.io.IOException e) { return curPos; }
		}
	}

	static private int jjMoveStringLiteralDfa0_1() {
		return jjMoveNfa_1(1, 0);
	}

	static private int jjMoveNfa_1(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 5;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (; ; ) {
			if (++jjround == 0x7fffffff) { ReInitRounds(); }
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
						case 1:
							if ((0x2400L & l) != 0L) {
								if (kind > 6) { kind = 6; }
							} else if (curChar == 45) { jjstateSet[jjnewStateCnt++] = 0; }
							if (curChar == 13) { jjstateSet[jjnewStateCnt++] = 3; }
							break;
						case 0:
							if (curChar == 45 && kind > 6) { kind = 6; }
							break;
						case 2:
							if ((0x2400L & l) != 0L && kind > 6) { kind = 6; }
							break;
						case 3:
							if (curChar == 10 && kind > 6) { kind = 6; }
							break;
						case 4:
							if (curChar == 13) { jjstateSet[jjnewStateCnt++] = 3; }
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						default:
							break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt))) { return curPos; }
			try { curChar = input_stream.readChar(); } catch (java.io.IOException e) { return curPos; }
		}
	}

	static final int[] jjnextStates = {
	                                  49, 2, 3, 51, 54, 56, 42, 45, 15, 25, 37, 38, 39, 40, 32, 33,
	                                  34, 35, 6, 7, 9, 12, 13,
	};

	/**
	 * Token literal values.
	 */
	public static final String[] jjstrLiteralImages = {
	                                                  "",
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  "\56",
	                                                  "\72\72\75",
	                                                  "\55",
	                                                  "\100",
	                                                  "\52",
	                                                  "\56\56",
	                                                  "\56\56\56",
	                                                  "\74",
	                                                  "\76",
	                                                  "\54",
	                                                  "\47",
	                                                  "\174",
	                                                  "\72",
	                                                  "\73",
	                                                  "\133",
	                                                  "\135",
	                                                  "\50",
	                                                  "\51",
	                                                  "\173",
	                                                  "\175",
	                                                  "\101\102\123\105\116\124",
	                                                  "\101\102\123\124\122\101\103\124\55\123\131\116\124\101\130",
	                                                  "\101\114\114",
	                                                  "\101\120\120\114\111\103\101\124\111\117\116",
	                                                  "\101\125\124\117\115\101\124\111\103",
	                                                  "\102\105\107\111\116",
	                                                  "\102\111\124",
	                                                  "\102\115\120\123\164\162\151\156\147",
	                                                  "\102\117\117\114\105\101\116",
	                                                  "\102\131",
	                                                  "\103\110\101\122\101\103\124\105\122",
	                                                  "\103\110\117\111\103\105",
	                                                  "\103\114\101\123\123",
	                                                  "\103\117\115\120\117\116\105\116\124",
	                                                  "\103\117\115\120\117\116\105\116\124\123",
	                                                  "\103\117\116\123\124\122\101\111\116\105\104",
	                                                  "\103\117\116\124\101\111\116\111\116\107",
	                                                  "\104\105\106\101\125\114\124",
	                                                  "\104\105\106\111\116\111\124\111\117\116\123",
	                                                  "\105\115\102\105\104\104\105\104",
	                                                  "\105\116\103\117\104\105\104",
	                                                  "\105\116\104",
	                                                  "\105\116\125\115\105\122\101\124\105\104",
	                                                  "\105\130\103\105\120\124",
	                                                  "\105\130\120\114\111\103\111\124",
	                                                  "\105\130\120\117\122\124\123",
	                                                  "\105\130\124\105\116\123\111\102\111\114\111\124\131",
	                                                  "\105\130\124\105\122\116\101\114",
	                                                  "\106\101\114\123\105",
	                                                  "\106\122\117\115",
	                                                  "\107\145\156\145\162\141\154\151\172\145\144\124\151\155\145",
	                                                  "\107\145\156\145\162\141\154\123\164\162\151\156\147",
	                                                  "\107\162\141\160\150\151\143\123\164\162\151\156\147",
	                                                  "\111\101\65\123\164\162\151\156\147",
	                                                  "\111\104\105\116\124\111\106\111\105\122",
	                                                  "\111\115\120\114\111\103\111\124",
	                                                  "\111\115\120\114\111\105\104",
	                                                  "\111\115\120\117\122\124\123",
	                                                  "\111\116\103\114\125\104\105\123",
	                                                  "\111\116\123\124\101\116\103\105",
	                                                  "\111\116\124\105\107\105\122",
	                                                  "\111\116\124\105\122\123\105\103\124\111\117\116",
	                                                  "\111\123\117\66\64\66\123\164\162\151\156\147",
	                                                  "\115\101\130",
	                                                  "\115\111\116",
	                                                  "\115\111\116\125\123\55\111\116\106\111\116\111\124\131",
	                                                  "\116\125\114\114",
	                                                  "\116\165\155\145\162\151\143\123\164\162\151\156\147",
	                                                  "\117\102\112\105\103\124",
	                                                  "\117\142\152\145\143\164\104\145\163\143\162\151\160\164\157\162",
	                                                  "\117\103\124\105\124",
	                                                  "\117\106",
	                                                  "\117\120\124\111\117\116\101\114",
	                                                  "\120\101\124\124\105\122\116",
	                                                  "\120\104\126",
	                                                  "\120\114\125\123\55\111\116\106\111\116\111\124\131",
	                                                  "\120\122\105\123\105\116\124",
	                                                  "\120\162\151\156\164\141\142\154\145\123\164\162\151\156\147",
	                                                  "\120\122\111\126\101\124\105",
	                                                  "\122\105\101\114",
	                                                  "\122\105\114\101\124\111\126\105\55\117\111\104",
	                                                  "\123\105\121\125\105\116\103\105",
	                                                  "\123\105\124",
	                                                  "\123\111\132\105",
	                                                  "\123\124\122\111\116\107",
	                                                  "\123\131\116\124\101\130",
	                                                  "\124\66\61\123\164\162\151\156\147",
	                                                  "\124\101\107\123",
	                                                  "\124\145\154\145\164\145\170\123\164\162\151\156\147",
	                                                  "\124\122\125\105",
	                                                  "\124\131\120\105\55\111\104\105\116\124\111\106\111\105\122",
	                                                  "\125\116\111\117\116",
	                                                  "\125\116\111\121\125\105",
	                                                  "\125\116\111\126\105\122\123\101\114",
	                                                  "\125\156\151\166\145\162\163\141\154\123\164\162\151\156\147",
	                                                  "\125\124\103\124\151\155\145",
	                                                  "\125\124\106\70\123\164\162\151\156\147",
	                                                  "\126\151\144\145\157\164\145\170\123\164\162\151\156\147",
	                                                  "\126\151\163\151\142\154\145\123\164\162\151\156\147",
	                                                  "\127\111\124\110",
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  "\60",
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  null,
	                                                  "\133\133",
	                                                  "\135\135",
	                                                  "\41",
	                                                  "\136",
	};

	/**
	 * Lexer state names.
	 */
	public static final String[] lexStateNames = {
	                                             "DEFAULT",
	                                             "WithinASNComment",
	};

	/**
	 * Lex State array.
	 */
	public static final int[]  jjnewLexState = {
	                                           -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	                                           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	                                           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	                                           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	                                           -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	                                           -1, -1,
	};
	static final        long[] jjtoToken     = {
	                                           0xffffffffffffff01L, 0x7fdbffffffffffffL,
	};
	static final        long[] jjtoSkip      = {
	                                           0x7eL, 0x0L,
	};
	static final        long[] jjtoSpecial   = {
	                                           0x60L, 0x0L,
	};
	static final        long[] jjtoMore      = {
	                                           0x80L, 0x0L,
	};
	static protected SimpleCharStream input_stream;
	static private final int[]         jjrounds   = new int[57];
	static private final int[]         jjstateSet = new int[114];
	private static final StringBuilder jjimage    = new StringBuilder();
	private static       StringBuilder image      = jjimage;
	private static   int  jjimageLen;
	private static   int  lengthOfMatch;
	static protected char curChar;

	/**
	 * Constructor.
	 */
	public ASN1SchemaCompilerTokenManager(SimpleCharStream stream) {
		if (input_stream != null) {
			throw new TokenMgrError(
			                       "ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
			                       TokenMgrError.STATIC_LEXER_ERROR
			);
		}
		input_stream = stream;
	}

	/**
	 * Constructor.
	 */
	public ASN1SchemaCompilerTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/**
	 * Reinitialise parser.
	 */
	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 57; i-- > 0; ) { jjrounds[i] = 0x80000000; }
	}

	/**
	 * Reinitialise parser.
	 */
	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/**
	 * Switch to specified lex state.
	 */
	static public void SwitchTo(int lexState) {
		if (lexState >= 2 || lexState < 0) {
			throw new TokenMgrError(
			                       "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
			                       TokenMgrError.INVALID_LEXICAL_STATE
			);
		} else { curLexState = lexState; }
	}

	static protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	static int curLexState     = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;

	/**
	 * Get the next Token.
	 */
	public static Token getNextToken() {
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop:
		for (; ; ) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}
			image = jjimage;
			image.setLength(0);
			jjimageLen = 0;

			for (; ; ) {
				switch (curLexState) {
					case 0:
						try {
							input_stream.backup(0);
							while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) { curChar = input_stream.BeginToken(); }
						} catch (java.io.IOException e1) { continue EOFLoop; }
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_0();
						break;
					case 1:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_1();
						if (jjmatchedPos == 0 && jjmatchedKind > 7) {
							jjmatchedKind = 7;
						}
						break;
				}
				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos) { input_stream.backup(curPos - jjmatchedPos - 1); }
					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						matchedToken.specialToken = specialToken;
						if (jjnewLexState[jjmatchedKind] != -1) { curLexState = jjnewLexState[jjmatchedKind]; }
						return matchedToken;
					} else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
							matchedToken = jjFillToken();
							if (specialToken == null) { specialToken = matchedToken; } else {
								matchedToken.specialToken = specialToken;
								specialToken = (specialToken.next = matchedToken);
							}
							SkipLexicalActions(matchedToken);
						} else { SkipLexicalActions(null); }
						if (jjnewLexState[jjmatchedKind] != -1) { curLexState = jjnewLexState[jjmatchedKind]; }
						continue EOFLoop;
					}
					jjimageLen += jjmatchedPos + 1;
					if (jjnewLexState[jjmatchedKind] != -1) { curLexState = jjnewLexState[jjmatchedKind]; }
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();
						continue;
					} catch (java.io.IOException e1) { }
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				} catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					} else { error_column++; }
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
			}
		}
	}

	static void SkipLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
			default:
				break;
		}
	}

	static private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	static private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
