/******************************************************************************
 * Copyright (C) 2010-2011 Lastrix                                            *
 * This file is part of ASN1S.                                                *
 *                                                                            *
 * ASN1S is free software: you can redistribute it and/or modify              *
 * it under the terms of the GNU General Public License as published by       *
 * the Free Software Foundation, either version 2 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * ASN1S is distributed in the hope that it will be useful,                   *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with ASN1S. If not, see <http://www.gnu.org/licenses/>.              *
 ******************************************************************************/

options {
SANITY_CHECK=true;
DEBUG_PARSER=false;
DEBUG_TOKEN_MANAGER=false;
MULTI=true;
VISITOR=true;
NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(ASN1SchemaCompiler)
package org.lastrix.asn1s.schema.parser;

import java.io.*;
import java.util.*;

public class ASN1SchemaCompiler {

    static void jjtreeOpenNodeScope(Node n)
    {
    }

    static void jjtreeCloseNodeScope(Node n)
    {
    }

    public final static String[] usefulTypes = new String[]{
      "GeneralizedTime", "UTCTime", "ObjectDescriptor"
    };

    public final static String[] characterStringTypes = new String[]{
      "NumericString", "PrintableString", "TeletexString", "T61String", "VideotexString",
      "UniversalString", "VisibleString", "ISO646String", "IA5String", "GraphicString",
      "GeneralString", "BMPString"
    };
}

PARSER_END(ASN1SchemaCompiler)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  "--" : WithinASNComment
}

<WithinASNComment> SPECIAL_TOKEN :
{
  <("--" | "\n" | "\r" | "\r\n" )> : DEFAULT
}

<WithinASNComment> MORE :
{
  <~[]>
}

TOKEN:
{
    <UPPERCASE_START: ["A"-"Z"] (("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])* >
    | <LOWERCASE_START: ["a"-"z"] (("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])* >
    | <UPPERCASE: ["A"-"Z"] (("-"["A"-"Z","0"-"9"])|["A"-"Z","0"-"9"])* >
    | <LOWERCASE: ["a"-"z"] (("-"["a"-"z","0"-"9"])|["a"-"z","0"-"9"])* >
    | <TYPE_FIELD_REFERENCE: "&" <UPPERCASE_START> >
    | <VALUE_FIELD_REFERENCE: "&" <LOWERCASE_START> >
}

TOKEN:
{
    <TOKEN_DOT : ".">
    | <TOKEN_ASSIGNMENT : "::=">
    | <TOKEN_MINUS : "-" >
    | <TOKEN_REF : "@" >
    | <TOKEN_STAR : "*" >
    | <TOKEN_RANGE : ".." >
    | <TOKEN_ELLIPSIS : "..." >
    | <TOKEN_LESS : "<">
    | <TOKEN_MORE : ">">
    | <TOKEN_COMMA : ",">
    | <TOKEN_APOSTROPHE : "'">
    | <TOKEN_BAR : "|">
    | <TOKEN_COLON : ":">
    | <TOKEN_SEMICOLON : ";">
    | <TOKEN_BRACKET_LEFT : "[">
    | <TOKEN_BRACKET_RIGHT : "]">
    | <TOKEN_PAREN_LEFT : "(">
    | <TOKEN_PAREN_RIGHT : ")">
    | <TOKEN_BRACE_LEFT : "{">
    | <TOKEN_BRACE_RIGHT : "}">
}

/**
    Reserved words
*/
TOKEN:
{
    <RESERVED_ABSENT : "ABSENT">
    | <RESERVED_ABSTRACT_SYNTAX : "ABSTRACT-SYNTAX">
    | <RESERVED_ALL : "ALL">
    | <RESERVED_APPLICATION : "APPLICATION">
    | <RESERVED_AUTOMATIC : "AUTOMATIC">
    | <RESERVED_BEGIN : "BEGIN">
    | <RESERVED_BIT : "BIT">
    | <RESERVED_BMP_STRING : "BMPString">
    | <RESERVED_BOOLEAN : "BOOLEAN">
    | <RESERVED_BY : "BY">
    | <RESERVED_CHARACTER : "CHARACTER">
    | <RESERVED_CHOICE : "CHOICE">
    | <RESERVED_CLASS : "CLASS">
    | <RESERVED_COMPONENT : "COMPONENT">
    | <RESERVED_COMPONENTS : "COMPONENTS">
    | <RESERVED_CONSTRAINED : "CONSTRAINED">
    | <RESERVED_CONTAINING : "CONTAINING">
    | <RESERVED_DEFAULT : "DEFAULT">
    | <RESERVED_DEFINITIONS : "DEFINITIONS">
    | <RESERVED_EMBEDDED : "EMBEDDED">
    | <RESERVED_ENCODED : "ENCODED">
    | <RESERVED_END : "END">
    | <RESERVED_ENUMERATED : "ENUMERATED">
    | <RESERVED_EXCEPT : "EXCEPT">
    | <RESERVED_EXPLICIT : "EXPLICIT">
    | <RESERVED_EXPORTS : "EXPORTS">
    | <RESERVED_EXTENSIBILITY : "EXTENSIBILITY">
    | <RESERVED_EXTERNAL : "EXTERNAL">
    | <RESERVED_FALSE : "FALSE">
    | <RESERVED_FROM : "FROM">
    | <RESERVED_GENERALIZED_TIME : "GeneralizedTime">
    | <RESERVED_GENERAL_STRING : "GeneralString">
    | <RESERVED_GRAPHIC_STRING : "GraphicString">
    | <RESERVED_IA5_STRING : "IA5String">
    | <RESERVED_IDENTIFIER : "IDENTIFIER">
    | <RESERVED_IMPLICIT : "IMPLICIT">
    | <RESERVED_IMPLIED : "IMPLIED">
    | <RESERVED_IMPORTS : "IMPORTS">
    | <RESERVED_INCLUDES : "INCLUDES">
    | <RESERVED_INSTANCE : "INSTANCE">
    | <RESERVED_INTEGER : "INTEGER">
    | <RESERVED_INTERSECTION : "INTERSECTION">
    | <RESERVED_ISO646_STRING : "ISO646String">
    | <RESERVED_MAX : "MAX">
    | <RESERVED_MIN : "MIN">
    | <RESERVED_MINUS_INFINITY : "MINUS-INFINITY">
    | <RESERVED_NULL : "NULL">
    | <RESERVED_NUMERIC_STRING : "NumericString">
    | <RESERVED_OBJECT : "OBJECT">
    | <RESERVED_OBJECT_DESCRIPTOR : "ObjectDescriptor">
    | <RESERVED_OCTET : "OCTET">
    | <RESERVED_OF : "OF">
    | <RESERVED_OPTIONAL : "OPTIONAL">
    | <RESERVED_PATTERN : "PATTERN">
    | <RESERVED_PDV : "PDV">
    | <RESERVED_PLUS_INFINITY : "PLUS-INFINITY">
    | <RESERVED_PRESENT : "PRESENT">
    | <RESERVED_PRINTABLE_STRING : "PrintableString">
    | <RESERVED_PRIVATE : "PRIVATE">
    | <RESERVED_REAL : "REAL">
    | <RESERVED_RELATIVE_OID : "RELATIVE-OID">
    | <RESERVED_SEQUENCE : "SEQUENCE">
    | <RESERVED_SET : "SET">
    | <RESERVED_SIZE : "SIZE">
    | <RESERVED_STRING : "STRING">
    | <RESERVED_SYNTAX : "SYNTAX">
    | <RESERVED_T61_STRING : "T61String">
    | <RESERVED_TAGS : "TAGS">
    | <RESERVED_TELETEX_STRING : "TeletexString">
    | <RESERVED_TRUE : "TRUE">
    | <RESERVED_UPPERCASE_START : "TYPE-IDENTIFIER">
    | <RESERVED_UNION : "UNION">
    | <RESERVED_UNIQUE : "UNIQUE">
    | <RESERVED_UNIVERSAL : "UNIVERSAL">
    | <RESERVED_UNIVERSAL_STRING : "UniversalString">
    | <RESERVED_UTC_TIME : "UTCTime">
    | <RESERVED_UTF8_STRING : "UTF8String">
    | <RESERVED_VIDEOTEX_STRING : "VideotexString">
    | <RESERVED_VISIBLE_STRING : "VisibleString">
    | <RESERVED_WITH : "WITH">
}

TOKEN:
{
    <NUMBER : "0" | ["1"-"9"](["0"-"9"])*>
}

TOKEN:
{
    <SIGNED_NUMBER : (["-"] <NUMBER>) >
}

TOKEN:
{
    <REAL : (<SIGNED_NUMBER> "." ("0")* <SIGNED_NUMBER> ("e" | "E") <SIGNED_NUMBER>) | (<SIGNED_NUMBER> ("e" | "E") <SIGNED_NUMBER>) >
}

TOKEN:
{
    <BIT_STRING : "'" (["0"-"1"])+ "'B">
}

TOKEN :
{
    <HEX_STRING: "'" (["0"-"9","A"-"F","a"-"f"])* "'H">
}

TOKEN :
{
    <STRING: "\"" ( ~["\""] )* "\"" >
}

TOKEN:
{
    <BOOLEAN: <RESERVED_TRUE> | <RESERVED_FALSE> >
}

TOKEN :
{
 <OBJECT_IDENTIFIER: <RESERVED_OBJECT> ([" ","\n","\t","\r"])? <RESERVED_IDENTIFIER>>
}


/**********  ENTRY POINT  *************/

void Parse() : {}
{
 (ModuleDefinition())*
}


void ModuleDefinition() : {}
{
    ModuleIdentifier()
    <RESERVED_DEFINITIONS> TagDefault() ExtensionDefault()
        "::="
    <RESERVED_BEGIN> ModuleBody() <RESERVED_END>
}

/**********  MODULE IDENTIFIER PART  *************/


void ModuleIdentifier(): {}
{
    ModuleReference() DefiniteIdentifier()
}

void DefiniteIdentifier(): {}
{
     ["{" ObjIdComponentsList() "}" ]
}

void ObjIdComponentsList() : {}
{
   ObjIdComponent() (ObjIdComponent())*
}

void ObjIdComponent() : {}
{
  ( LOOKAHEAD(2) NameAndNumberForm() | NumberForm() | LOOKAHEAD(2) DefinedValue() | LOOKAHEAD(2) identifier() )
}

void NumberForm(): {}
{
    <NUMBER>
}

void Number(): {}
{
    <NUMBER>
}

void NameAndNumberForm(): {}
{
    identifier() [ "(" (NumberForm() | DefinedValue()) ")"]
}

void TagDefault() : {}
{
    [ (<RESERVED_EXPLICIT> | <RESERVED_IMPLICIT> | <RESERVED_AUTOMATIC>) <RESERVED_TAGS> ]
}

void ExtensionDefault(): {}
{
    [ <RESERVED_EXTENSIBILITY> <RESERVED_IMPLIED> ]
}

/**********  MODULE BODY PART  *************/

void ModuleBody(): {}
{
    /*[Exports() Imports() AssignmentList()]*/
}


/**********  EXPORTS PART  *************/

void Exports(): {}
{
    [<RESERVED_EXPORTS> ( <RESERVED_ALL> | SymbolsExported() ) ";" ]
}

void SymbolsExported(): {}
{
   [ SymbolList() ]
}

void Imports(): {}
{
    <RESERVED_IMPORTS> SymbolsImported() ";"
}

/**********  IMPORTS PART  *************/

void SymbolsImported(): {}
{
    [ SymbolsFromModuleList() ]
}

void SymbolsFromModuleList(): {}
{
    SymbolsFromModule() ( SymbolsFromModule() )*
}

void SymbolsFromModule(): {}
{
    SymbolList() <RESERVED_FROM> GlobalModuleReference()
}

void GlobalModuleReference(): {}
{
    ModuleReference() AssignedIdentifier()
}

void AssignedIdentifier(): {}
{
    [LOOKAHEAD(2) ObjectIdentifierValue() | LOOKAHEAD(2) DefinedValue()]
}

void SymbolList(): {}
{
    Symbol() ( "," Symbol())*
}

void Symbol() : {}
{
   Reference() /*| ParametrizedReference()*/
}

void Reference(): {}
{
    TypeReference()
    | ValueReference()
    | ObjectClassReference()
    | ObjectReference()
    /*| ObjectSetReference()*/
}

/**********  ASSIGNMENTS LIST PART  *************/

void AssignmentList() : {}
{
  Assignment() [";"] ( Assignment() [";"] )*
}

void Assignment() #void: {}
{
   LOOKAHEAD(2)
   TypeAssignment()
   | ValueAssignment()
   | ValueSetTypeAssignment()
   /*| ObjectClassAssignment()
   | ObjectAssignment()
   | ObjectSetAssignment()*/
   | ParametrizedAssignment()
}

void DefinedType(): {}
{
    ExternalTypeReference()
    | TypeReference()
    | ParametrizedType()
    | ParametrizedValueSetType()
}

void DefinedValue(): {}
{
    ExternalValueReference()
    | ValueReference()
    | ParametrizedValue()
}

void ExternalTypeReference():{}
{
    ModuleReference() "." TypeReference()
}

void ExternalValueReference(): {}
{
    ModuleReference() "." ValueReference()
}

void AbsoluteReference(): {}
{
    "@" ModuleIdentifier() "." ItemSpec()
}

void ItemSpec(): {}
{
    (TypeReference())+  "." ComponentId()
}

void ComponentId(): {}
{
    identifier()
    | Number()
    | "*"
}

void TypeAssignment(): {}
{
    TypeReference() "::=" Type()
}

void ValueAssignment(): {}
{
    ValueReference() Type() "::=" Value()
}

void ValueSetTypeAssignment(): {}
{
    TypeReference() Type() "::=" ValueSet()
}

void ValueSet(): {}
{
    "{" ElementSetSpecs() "}"
}

void Type(): {}
{
    LOOKAHEAD(4) TypeWithConstraint() | ( (LOOKAHEAD(2) BuiltinType() | DefinedType()) [Constraint()] )
}

void BuiltinType(): {}
{
    BitStringType()
    | BooleanType()
    | CharacterStringType()
    | ChoiceType()
    | EmbeddedPDVType()
    | EnumeratedType()
    | ExternalType()
    /*| InstanceOfType()*/
    | IntegerType()
    | NullType()
    /*| ObjectClassFieldType()*/
    | ObjectIdentifierType()
    | OctetStringType()
    | RealType()
    | RelativeOIDType()
    | SequenceType()
    | SequenceOfType()
    | SetType()
    | SetOfType()
    | TaggedType()
}

void NamedType(): {}
{
    identifier() Type()
}

void ReferencedType(): {}
{
    DefinedType()
    | UsefulType()
    | SelectionType()
    /*| TypeFromObject()*/
    /*| ValueSetFromObjects()*/
}

void Value(): {}
{
    LOOKAHEAD(2) BuiltinValue()
    | ReferencedValue()
    /*| ObjectClassFieldValue()*/
}

void BuiltinValue(): {}
{
    BitStringValue()
    | BooleanValue()
    | CharacterStringValue()
    | ChoiceValue()
    | EmbeddedPDVValue()
    | EnumeratedValue()
    | ExternalValue()
    /*| InstanceOfValue()*/
    | IntegerValue()
    | NullValue()
    /*| ObjectClassFieldValue()*/
    | ObjectIdentifierValue()
    | OctetStringValue()
    | RealValue()
    | RelativeOIDValue()
    | SequenceValue()
    | SequenceOfValue()
    | SetValue()
    | SetOfValue()
}

void ReferencedValue(): {}
{
    DefinedValue() /*| ValueFromObject()*/
}

void NamedValue(): {}
{
    identifier() Value()
}

void BooleanType(): {}
{
    <RESERVED_BOOLEAN>
}

void BooleanValue(): {}
{
    <RESERVED_TRUE> | <RESERVED_FALSE>
}

void IntegerType(): {}
{
    <RESERVED_INTEGER> [ "{" NamedNumberList() "}" ]
}

void NamedNumberList(): {}
{
    NamedNumber()  ("," NamedNumber())*
}

void NamedNumber(): {}
{
    identifier() (DefinedValue() | SignedNumber() )
}

void SignedNumber(): {}
{
    <SIGNED_NUMBER>
}

void IntegerValue(): {}
{
    SignedNumber() | identifier()
}

void EnumeratedType(): {}
{
    <RESERVED_ENUMERATED> "{" Enumerations() "}"
}

void Enumerations(): {}
{
    RootEnumeration() [ "," "..." ExceptionSpec() [ "," AdditionalEnumeration() ] ]
}

void RootEnumeration(): {}
{
    Enumeration()
}

void AdditionalEnumeration(): {}
{
    Enumeration()
}

void Enumeration(): {}
{
    EnumerationItem() ("," EnumerationItem() )*
}

void EnumerationItem(): {}
{
    identifier() | NamedNumber()
}

void EnumeratedValue(): {}
{
    identifier()
}

void RealType(): {}
{
    <RESERVED_REAL>
}

void RealValue(): {}
{
    NumericRealValue() | SpecialRealValue()
}

void NumericRealValue(): {}
{
    <REAL> | SequenceValue()
}

void SpecialRealValue(): {}
{
    <RESERVED_MINUS_INFINITY> | <RESERVED_PLUS_INFINITY>
}

void BitStringType(): {}
{
    <RESERVED_BIT> <RESERVED_STRING> ["{" NamedBitList() "}"]
}

void NamedBitList(): {}
{
    NamedBit() ("," NamedBit())*
}

void NamedBit(): {}
{
    identifier() "(" (Number() | DefinedValue()) ")"
}

void BitStringValue(): {}
{
    <BIT_STRING>
    | <HEX_STRING>
    | ("{" IdentifierList() "}")
    | ("{" "}")
    | (<RESERVED_CONTAINING> Value())
}

void IdentifierList(): {}
{
    identifier() ( "," identifier() )*
}

void OctetStringType(): {}
{
    <RESERVED_OCTET> <RESERVED_STRING>
}

void OctetStringValue(): {}
{
    <BIT_STRING>
    | <HEX_STRING>
    | (<RESERVED_CONTAINING> Value())
}

void NullType(): {}
{
    <RESERVED_NULL>
}

void NullValue(): {}
{
    <RESERVED_NULL>
}

void SequenceType(): {}
{
    <RESERVED_SEQUENCE> "{" [(ExtensionAndException() OptionalExtensionMarker()) | ComponentTypeLists()] "}"
}

void ExtensionAndException(): {}
{
    "..." ExceptionSpec()
}

void OptionalExtensionMarker(): {}
{
    ["," "..." ]
}

void ComponentTypeLists(): {}
{
   ( ComponentTypeList()
            [ "," ExtensionAndException() ExtensionAdditions()
                                (OptionalExtensionMarker() | (ExtensionEndMarker() "," ComponentTypeList() ) )
            ] )
   | ExtensionAndException() ExtensionAdditions() (OptionalExtensionMarker() | (ExtensionEndMarker() "," ComponentTypeList() ))
}

void ExtensionEndMarker(): {}
{
    "," "..."
}

void ExtensionAdditions(): {}
{
    ["," ExtensionAdditionsList()]
}

void ExtensionAdditionsList(): {}
{
    ExtensionAddition() ( "," ExtensionAddition() )*
}

void ExtensionAddition(): {}
{
    ComponentType() | ExtensionAdditionGroup()
}

void ExtensionAdditionGroup(): {}
{
    "[[" VersionNumber() ComponentTypeList() "]]"
}

void VersionNumber(): {}
{
    [Number() ":"]
}

void ComponentTypeList(): {}
{
    ComponentType() ( "," ComponentType() )*
}

void ComponentType(): {}
{
    (NamedType() [ <RESERVED_OPTIONAL> | (<RESERVED_DEFAULT> Value()) ])
    | (<RESERVED_COMPONENTS> <RESERVED_OF> Type())
}

void SequenceValue(): {}
{
    "{" [ComponentValueList()] "}"
}

void ComponentValueList(): {}
{
    NamedValue() ( "," NamedValue() )*
}

void SequenceOfType(): {}
{
    <RESERVED_SEQUENCE> <RESERVED_OF> ( Type() | NamedType() )
}

void SequenceOfValue(): {}
{
    "{" [ ValueList() | NamedValueList() ] "}"
}

void ValueList(): {}
{
    Value() ( "," Value() )*
}

void NamedValueList(): {}
{
    NamedValue() ( "," NamedValue() )*
}

void SetType(): {}
{
    <RESERVED_SET> "{" [ComponentTypeLists() | (ExtensionAndException() OptionalExtensionMarker() )] "}"
}

void SetValue(): {}
{
    "{" [ComponentValueList()] "}"
}

void SetOfType(): {}
{
    <RESERVED_SET> <RESERVED_OF> ( Type() | NamedType() )
}

void SetOfValue(): {}
{
    "{" [ ValueList() | NamedValueList() ] "}"
}

void ChoiceType(): {}
{
    <RESERVED_CHOICE> "{" AlternativeTypeLists() "}"
}

void AlternativeTypeLists(): {}
{
    AlternativeTypeList() [ "," ExtensionAndException() ExtensionAdditionAlternatives() OptionalExtensionMarker() ]
}

void ExtensionAdditionAlternatives(): {}
{
    [ "," ExtensionAdditionAlternativesList() ]
}

void ExtensionAdditionAlternativesList(): {}
{
    ExtensionAdditionAlternative() ( "," ExtensionAdditionAlternative() )*
}

void ExtensionAdditionAlternative(): {}
{
    NamedType() | ExtensionAdditionAlternativesGroup()
}

void ExtensionAdditionAlternativesGroup(): {}
{
    "[[" VersionNumber() AlternativeTypeList() "]]"
}

void AlternativeTypeList(): {}
{
    NamedType() ( "," NamedType() )*
}

void ChoiceValue(): {}
{
    identifier() ":" Value()
}

void SelectionType(): {}
{
    identifier() "<" Type()
}

void TaggedType(): {}
{
    Tag() [ <RESERVED_EXPLICIT> | <RESERVED_IMPLICIT> ] Type()
}

void Tag(): {}
{
    "[" Class() ClassNumber() "]"
}

void ClassNumber(): {}
{
    Number() | DefinedValue()
}

void Class(): {}
{
    [<RESERVED_UNIVERSAL> | <RESERVED_APPLICATION> | <RESERVED_PRIVATE> ]
}

void EmbeddedPDVType(): {}
{
    <RESERVED_EMBEDDED> <RESERVED_PDV>
}

void EmbeddedPDVValue(): {}
{
    SequenceValue()
}

void ExternalType(): {}
{
    <RESERVED_EXTERNAL>
}

void ExternalValue(): {}
{
    SequenceValue()
}

void ObjectIdentifierType(): {}
{
    <RESERVED_OBJECT> <RESERVED_IDENTIFIER>
}

void ObjectIdentifierValue(): {}
{
    "{" (ObjIdComponentsList() | ( DefinedValue() ObjIdComponentsList() ) ) "}"
}

void RelativeOIDType(): {}
{
    <RESERVED_RELATIVE_OID>
}

void RelativeOIDValue(): {}
{
    "{" RelativeOIDComponentsList() "}"
}

void RelativeOIDComponentsList(): {}
{
    RelativeOIDComponents() ( RelativeOIDComponents() )*
}

void RelativeOIDComponents(): {}
{
    NumberForm() | NameAndNumberForm() | DefinedValue()
}

void CharacterStringType(): {}
{
    RestrictedCharacterStringType() | UnrestrictedCharacterStringType()
}

void RestrictedCharacterStringType(): {}
{
    <RESERVED_BMP_STRING>
    | <RESERVED_GENERAL_STRING>
    | <RESERVED_GRAPHIC_STRING>
    | <RESERVED_IA5_STRING>
    | <RESERVED_ISO646_STRING>
    | <RESERVED_NUMERIC_STRING>
    | <RESERVED_PRINTABLE_STRING>
    | <RESERVED_TELETEX_STRING>
    | <RESERVED_T61_STRING>
    | <RESERVED_UNIVERSAL_STRING>
    | <RESERVED_UTF8_STRING>
    | <RESERVED_VIDEOTEX_STRING>
    | <RESERVED_VISIBLE_STRING>
}

void RestrictedCharacterStringValue(): {}
{
    <STRING> | CharacterStringList() | Quadruple() | Tuple()
}

void CharacterStringList(): {}
{
    "{" CharSyms() "}"
}

void CharSyms(): {}
{
    CharsDefn() ( "," CharsDefn() )*
}

void CharsDefn(): {}
{
    <STRING> | Quadruple() | Tuple() | DefinedValue()
}

void Quadruple(): {}
{
    "{" Group() "," Plane() "," Row() "," Cell() "}"
}

void Group(): {}
{
    Number()
}

void Plane(): {}
{
    Number()
}

void Row(): {}
{
    Number()
}

void Cell(): {}
{
    Number()
}

void Tuple(): {}
{
    "{" TableColumn() "," TableRow() "}"
}

void TableColumn(): {}
{
    Number()
}

void TableRow(): {}
{
    Number()
}

void UnrestrictedCharacterStringType(): {}
{
    <RESERVED_CHARACTER> <RESERVED_STRING>
}

void CharacterStringValue(): {}
{
    RestrictedCharacterStringValue() | UnrestrictedCharacterStringValue()
}

void UnrestrictedCharacterStringValue(): {}
{
    SequenceValue()
}

void UsefulType(): {}
{
    TypeReference()
}

void TypeWithConstraint(): {}
{
    (<RESERVED_SET> (Constraint() | SizeConstraint() ) <RESERVED_OF> (Type() | NamedType()))
    | (<RESERVED_SEQUENCE> (Constraint() | SizeConstraint() ) <RESERVED_OF> (Type() | NamedType()))
}

void Constraint(): {}
{
    "(" ConstraintSpec() ExceptionSpec() ")"
}

void ConstraintSpec(): {}
{
    SubtypeConstraint() /*| GeneralConstraint()*/
}

void ExceptionSpec() : {}
{
    ["!" ExceptionIdentification()]
}

void ExceptionIdentification(): {}
{
    SignedNumber() | DefinedValue() | (Type() ":" Value())
}

void SubtypeConstraint(): {}
{
    ElementSetSpecs()
}

void ElementSetSpecs(): {}
{
    ElementSetSpec() ["," "..." ["," AdditionalElementSetSpec()]]
}

void AdditionalElementSetSpec(): {}
{
    ElementSetSpec()
}

void ElementSetSpec(): {}
{
    Unions() | (<RESERVED_ALL> Exclusions())
}

void Unions(): {}
{
   ([ UnionMark() ] Intersections())+
}


void Intersections(): {}
{
    ([ IntersectionMark() ] IntersectionElements())+
}

void IntersectionElements(): {}
{
    Elements() | ( Elems() Exclusions())
}

void Elems(): {}
{
    Elements()
}

void Exclusions(): {}
{
    <RESERVED_EXCEPT> Elements()
}

void UnionMark(): {}
{
    "|" | <RESERVED_UNION>
}

void IntersectionMark(): {}
{
    "^" | <RESERVED_INTERSECTION>
}

void Elements(): {}
{
    SubtypeElements()
    /*| ObjectSetElements()*/
    | ( "(" ElementSetSpec() ")" )
}

void SubtypeElements(): {}
{
    Value()
    | ContainedSubtype()
    | ValueRange()
    | PermittedAlphabet()
    | SizeConstraint()
    | TypeConstraint()
    | InnerTypeConstraints()
    | PatternConstraint()
}

void ContainedSubtype(): {}
{
    [<RESERVED_INCLUDES>] Type()
}

void ValueRange(): {}
{
    LowerEndpoint() ".." UpperEndpoint()
}

void LowerEndpoint(): {}
{
    LowerEndValue() ["<"]
}

void UpperEndpoint(): {}
{
    ["<"] UpperEndValue()
}

void LowerEndValue(): {}
{
    <RESERVED_MIN> | Value()
}

void UpperEndValue(): {}
{
    <RESERVED_MAX> | Value()
}

void SizeConstraint(): {}
{
    <RESERVED_SIZE> Constraint()
}

void PermittedAlphabet(): {}
{
    <RESERVED_FROM> Constraint()
}

void TypeConstraint(): {}
{
    Type()
}

void InnerTypeConstraints(): {}
{
    <RESERVED_WITH> ( (<RESERVED_COMPONENT> SingleTypeConstraint() ) | (<RESERVED_COMPONENTS> MultipleTypeConstraint() ) )
}

void SingleTypeConstraint(): {}
{
    Constraint()
}

void MultipleTypeConstraint(): {}
{
    FullSpecification() | PartialSpecification()
}

void FullSpecification(): {}
{
    "{" TypeConstraints() "}"
}

void PartialSpecification(): {}
{
    "{" "..." "," TypeConstraints() "}"
}

void TypeConstraints(): {}
{
    NamedConstraint() ( "," NamedConstraint() )*
}

void NamedConstraint(): {}
{
    identifier() ComponentConstraint()
}

void ComponentConstraint(): {}
{
    ValueConstraint() PresenceConstraint()
}

void ValueConstraint(): {}
{
    [Constraint()]
}

void PresenceConstraint(): {}
{
    [<RESERVED_PRESENT> | <RESERVED_ABSENT> | <RESERVED_OPTIONAL>]
}

void PatternConstraint(): {}
{
    <RESERVED_PATTERN> Value()
}

void TypeReference(): {}
{
    <UPPERCASE_START>
}

void identifier(): {}
{
    <LOWERCASE_START>
}

void ValueReference(): {}
{
    identifier()
}

void ModuleReference(): {}
{
    <UPPERCASE_START>
}

void ObjectClassReference(): {}
{
    <UPPERCASE>
}

void ObjectReference(): {}
{
    identifier()
}

void TypeFieldReference(): {}
{
    <TYPE_FIELD_REFERENCE>
}

void ValueFieldReference(): {}
{
    <VALUE_FIELD_REFERENCE>
}

void ValueSetFieldReference(): {}
{
    <TYPE_FIELD_REFERENCE>
}

void ObjectFieldReference(): {}
{
    <VALUE_FIELD_REFERENCE>
}

void ParametrizedAssignment(): {}
{
    ParametrizedTypeAssignment()
    | ParametrizedTypeAssignment()
    | ParametrizedValueAssignment()
    | ParametrizedValueSetTypeAssignment()
    /*| ParametrizedObjectClassAssignment()
    | ParametrizedObjectAssignment()
    | ParametrizedObjectSetAssignment()*/
}

void ParametrizedTypeAssignment(): {}
{
    TypeReference() ParameterList() "::=" Type()
}

void ParametrizedValueAssignment(): {}
{
    ValueReference() ParameterList() "::=" Value()
}

void ParametrizedValueSetTypeAssignment(): {}
{
    TypeReference() ParameterList() "::=" ValueSet()
}

/*
void ParametrizedObjectClassAssignment(): {}
{
    ObjectClassReference() ParameterList() DefinedObjectClass() "::=" ObjectClass()
}

void ParametrizedObjectAssignment(): {}
{
    ObjectReference() ParameterList() DefinedObjectClass() "::=" Object()
}

void ParametrizedObjectSetAssignment(): {}
{
    ObjectSetReference() ParameterList() DefinedObjectClass() "::=" ObjectSet()
}
*/

void ParameterList(): {}
{
    "{" Parameter() ("," Parameter())* "}"
}

void Parameter(): {}
{
    [ParamGovernor() ":"] DummyReference()
}

void ParamGovernor(): {}
{
    Governor() | DummyGovernor()
}

void Governor(): {}
{
    Type() /*| DefinedObjectClass()*/
}

void DummyGovernor(): {}
{
    DummyReference()
}

void DummyReference(): {}
{
    Reference()
}

void ParametrizedType(): {}
{
    SimpleDefinedType() ActualParameterList()
}

void SimpleDefinedType(): {}
{
    ExternalTypeReference() | TypeReference()
}

void ParametrizedValue(): {}
{
    SimpleDefinedValue() ActualParameterList()
}

void SimpleDefinedValue(): {}
{
    ExternalValueReference() | ValueReference()
}

void ParametrizedValueSetType(): {}
{
    SimpleDefinedType() ActualParameterList()
}

/*
void ParametrizedObjectClass(): {}
{
    DefinedObjectClass() ActualParameterList()
}

void ParametrizedObjectSet(): {}
{
    DefinedObjectSet() ActualParameterList()
}

void ParametrizedObject(): {}
{
    DefinedObject() ActualParameterList()
}
*/
void ActualParameterList(): {}
{
    "{" ActualParameter() ("," ActualParameter() )* "}"
}

void ActualParameter(): {}
{
    Type()
    | Value()
    | ValueSet()
    /*| DefinedObjectClass()
    | Object()
    | ObjectSet()*/
}
