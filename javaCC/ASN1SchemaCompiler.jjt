/******************************************************************************
 * Copyright (C) 2010-2011 Lastrix                                            *
 * This file is part of ASN1S.                                                *
 *                                                                            *
 * ASN1S is free software: you can redistribute it and/or modify              *
 * it under the terms of the GNU General Public License as published by       *
 * the Free Software Foundation, either version 2 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * ASN1S is distributed in the hope that it will be useful,                   *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with ASN1S. If not, see <http://www.gnu.org/licenses/>.              *
 ******************************************************************************/

options {
SANITY_CHECK=true;
DEBUG_PARSER=false;
DEBUG_TOKEN_MANAGER=false;
MULTI=true;
VISITOR=true;
NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(ASN1SchemaCompiler)
//package org.lastrix.asn1s.schema.parser;

import java.io.*;
import java.util.*;

public class ASN1SchemaCompiler {

	    public static void main(String args[]) throws ParseException
    	{
    		boolean showUsage = true;

    		ASN1SchemaCompiler parser;
    		try
    		{
    			int i;
    			for(i = 0; i < args.length; i++)
                {

    				parser = new ASN1SchemaCompiler(new FileInputStream(args[i]));
    				parser.Parse();
    				System.out.println("ASN.1 file parsed successfully.");


    				SimpleNode root = (SimpleNode)jjtree.rootNode();
    				root.dump("\t");
    			}
    		}
    		catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}


    static void jjtreeOpenNodeScope(Node n)
    {
        ((SimpleNode)n).first_token = getToken(1);
    }

    static void jjtreeCloseNodeScope(Node n)
    {
    }

    public final static String[] usefulTypes = new String[]{
      "GeneralizedTime", "UTCTime", "ObjectDescriptor"
    };

    public final static String[] characterStringTypes = new String[]{
      "NumericString", "PrintableString", "TeletexString", "T61String", "VideotexString",
      "UniversalString", "VisibleString", "ISO646String", "IA5String", "GraphicString",
      "GeneralString", "BMPString"
    };
}

PARSER_END(ASN1SchemaCompiler)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  "--" : WithinASNComment
}

<WithinASNComment> SPECIAL_TOKEN :
{
  <("--" | "\n" | "\r" | "\r\n" )> : DEFAULT
}

<WithinASNComment> MORE :
{
  <~[]>
}

TOKEN:
{
    <TOKEN_DOT : ".">
    | <TOKEN_ASSIGNMENT : "::=">
    | <TOKEN_MINUS : "-">
    | <TOKEN_REF : "@" >
    | <TOKEN_STAR : "*" >
    | <TOKEN_RANGE : ".." >
    | <TOKEN_ELLIPSIS : "...">
    | <TOKEN_LESS : "<">
    | <TOKEN_MORE : ">">
    | <TOKEN_COMMA : ",">
    | <TOKEN_APOSTROPHE : "'">
    | <TOKEN_BAR : "|">
    | <TOKEN_COLON : ":">
    | <TOKEN_SEMICOLON : ";">
    | <TOKEN_BRACKET_LEFT : "[">
    | <TOKEN_BRACKET_RIGHT : "]">
    | <TOKEN_PAREN_LEFT : "(">
    | <TOKEN_PAREN_RIGHT : ")">
    | <TOKEN_BRACE_LEFT : "{">
    | <TOKEN_BRACE_RIGHT : "}">
}

/**
    Reserved words
*/
TOKEN:
{
    <RESERVED_ABSENT : "ABSENT">
    | <RESERVED_ABSTRACT_SYNTAX : "ABSTRACT-SYNTAX">
    | <RESERVED_ALL : "ALL">
    | <RESERVED_APPLICATION : "APPLICATION">
    | <RESERVED_AUTOMATIC : "AUTOMATIC">
    | <RESERVED_BEGIN : "BEGIN">
    | <RESERVED_BIT : "BIT">
    | <RESERVED_BMP_STRING : "BMPString">
    | <RESERVED_BOOLEAN : "BOOLEAN">
    | <RESERVED_BY : "BY">
    | <RESERVED_CHARACTER : "CHARACTER">
    | <RESERVED_CHOICE : "CHOICE">
    | <RESERVED_CLASS : "CLASS">
    | <RESERVED_COMPONENT : "COMPONENT">
    | <RESERVED_COMPONENTS : "COMPONENTS">
    | <RESERVED_CONSTRAINED : "CONSTRAINED">
    | <RESERVED_CONTAINING : "CONTAINING">
    | <RESERVED_DEFAULT : "DEFAULT">
    | <RESERVED_DEFINITIONS : "DEFINITIONS">
    | <RESERVED_EMBEDDED : "EMBEDDED">
    | <RESERVED_ENCODED : "ENCODED">
    | <RESERVED_END : "END">
    | <RESERVED_ENUMERATED : "ENUMERATED">
    | <RESERVED_EXCEPT : "EXCEPT">
    | <RESERVED_EXPLICIT : "EXPLICIT">
    | <RESERVED_EXPORTS : "EXPORTS">
    | <RESERVED_EXTENSIBILITY : "EXTENSIBILITY">
    | <RESERVED_EXTERNAL : "EXTERNAL">
    | <RESERVED_FALSE : "FALSE">
    | <RESERVED_FROM : "FROM">
    | <RESERVED_GENERALIZED_TIME : "GeneralizedTime">
    | <RESERVED_GENERAL_STRING : "GeneralString">
    | <RESERVED_GRAPHIC_STRING : "GraphicString">
    | <RESERVED_IA5_STRING : "IA5String">
    | <RESERVED_IDENTIFIER : "IDENTIFIER">
    | <RESERVED_IMPLICIT : "IMPLICIT">
    | <RESERVED_IMPLIED : "IMPLIED">
    | <RESERVED_IMPORTS : "IMPORTS">
    | <RESERVED_INCLUDES : "INCLUDES">
    | <RESERVED_INSTANCE : "INSTANCE">
    | <RESERVED_INTEGER : "INTEGER">
    | <RESERVED_INTERSECTION : "INTERSECTION">
    | <RESERVED_ISO646_STRING : "ISO646String">
    | <RESERVED_MAX : "MAX">
    | <RESERVED_MIN : "MIN">
    | <RESERVED_MINUS_INFINITY : "MINUS-INFINITY">
    | <RESERVED_NULL : "NULL">
    | <RESERVED_NUMERIC_STRING : "NumericString">
    | <RESERVED_OBJECT : "OBJECT">
    | <RESERVED_OBJECT_DESCRIPTOR : "ObjectDescriptor">
    | <RESERVED_OCTET : "OCTET">
    | <RESERVED_OF : "OF">
    | <RESERVED_OPTIONAL : "OPTIONAL">
    | <RESERVED_PATTERN : "PATTERN">
    | <RESERVED_PDV : "PDV">
    | <RESERVED_PLUS_INFINITY : "PLUS-INFINITY">
    | <RESERVED_PRESENT : "PRESENT">
    | <RESERVED_PRINTABLE_STRING : "PrintableString">
    | <RESERVED_PRIVATE : "PRIVATE">
    | <RESERVED_REAL : "REAL">
    | <RESERVED_RELATIVE_OID : "RELATIVE-OID">
    | <RESERVED_SEQUENCE : "SEQUENCE">
    | <RESERVED_SET : "SET">
    | <RESERVED_SIZE : "SIZE">
    | <RESERVED_STRING : "STRING">
    | <RESERVED_SYNTAX : "SYNTAX">
    | <RESERVED_T61_STRING : "T61String">
    | <RESERVED_TAGS : "TAGS">
    | <RESERVED_TELETEX_STRING : "TeletexString">
    | <RESERVED_TRUE : "TRUE">
    | <RESERVED_UPPERCASE_START : "TYPE-IDENTIFIER">
    | <RESERVED_UNION : "UNION">
    | <RESERVED_UNIQUE : "UNIQUE">
    | <RESERVED_UNIVERSAL : "UNIVERSAL">
    | <RESERVED_UNIVERSAL_STRING : "UniversalString">
    | <RESERVED_UTC_TIME : "UTCTime">
    | <RESERVED_UTF8_STRING : "UTF8String">
    | <RESERVED_VIDEOTEX_STRING : "VideotexString">
    | <RESERVED_VISIBLE_STRING : "VisibleString">
    | <RESERVED_WITH : "WITH">
}

TOKEN:
{
    <UPPERCASE_START: (["A"-"Z"] ((<TOKEN_MINUS>["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])*)>
    | <LOWERCASE_START: ["a"-"z"] ((<TOKEN_MINUS>["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])* >
    | <UPPERCASE: ["A"-"Z"] ((<TOKEN_MINUS>["A"-"Z","0"-"9"])|["A"-"Z","0"-"9"])* >
    | <LOWERCASE: ["a"-"z"] ((<TOKEN_MINUS>["a"-"z","0"-"9"])|["a"-"z","0"-"9"])* >
    | <TYPE_FIELD_REFERENCE: "&" <UPPERCASE_START> >
    | <VALUE_FIELD_REFERENCE: "&" <LOWERCASE_START> >
}

TOKEN:
{
    <#EXPONENT: "e" | "E">
}

TOKEN:
{
    <ZERO: "0">
}

TOKEN:
{
    <NUMBER : ["1"-"9"](["0"-"9"])*>
}

TOKEN:
{
    <#REAL_EXPONENT: <EXPONENT> (( (["-","+"])? ["1"-"9"](["0"-"9"])*) | <ZERO>) >
}
TOKEN:
{
    <REAL: (( (["-"])? ["1"-"9"](["0"-"9"])*)|<ZERO>) "." (["0"-"9"])+ (<REAL_EXPONENT>)? >
}

TOKEN:
{
    <BIT_STRING : <TOKEN_APOSTROPHE> (["0"-"1"])+ "'B">
}

TOKEN :
{
    <HEX_STRING: <TOKEN_APOSTROPHE> (["0"-"9","A"-"F","a"-"f"])* "'H">
}

TOKEN :
{
    <STRING: "\"" ( ~["\""] )* "\"" >
}

TOKEN :
{
 <OBJECT_IDENTIFIER: <RESERVED_OBJECT> ([" ","\n","\t","\r"])? <RESERVED_IDENTIFIER>>
}


/**************************************/
/**********  ENTRY POINT  *************/
/**************************************/

void Parse() : {}
{
 (ModuleDefinition())*
}


void ModuleDefinition() : {}
{
    ModuleIdentifier()
    <RESERVED_DEFINITIONS> [TagDefault()] [ExtensionDefault()]
        <TOKEN_ASSIGNMENT>
    <RESERVED_BEGIN> ModuleBody() <RESERVED_END>
}

void ExternalValueReference(): {}
{
    ModuleReference() "." ValueReference()
}

void SignedNumber(): {}
{
    ([<TOKEN_MINUS>] <NUMBER>) | <ZERO>
}

/*************************************************/
/**********  MODULE IDENTIFIER PART  *************/
/*************************************************/


void ModuleIdentifier(): {}
{
    ModuleReference() [DefiniteIdentifier()]
}

void DefiniteIdentifier(): {}
{
     <TOKEN_BRACE_LEFT> ObjIdComponentsList() <TOKEN_BRACE_RIGHT>
}

void ObjIdComponentsList() : {}
{
   ObjIdComponent() (ObjIdComponent())*
}

void ObjIdComponent() : {}
{
  ( LOOKAHEAD(2) NameAndNumberForm() | NumberForm() | LOOKAHEAD(2) DefinedValue() | LOOKAHEAD(2) identifier() )
}

void NumberForm(): {}
{
    Number()
}

void Number() #void: {}
{
    <NUMBER> | <ZERO>
}

void NameAndNumberForm(): {}
{
    identifier() [ <TOKEN_PAREN_LEFT> (NumberForm() | DefinedValue()) <TOKEN_PAREN_RIGHT>]
}

void TagDefault() : {}
{
    (<RESERVED_EXPLICIT> | <RESERVED_IMPLICIT> | <RESERVED_AUTOMATIC>) <RESERVED_TAGS>
}

void ExtensionDefault(): {}
{
    <RESERVED_EXTENSIBILITY> <RESERVED_IMPLIED>
}

/**********  MODULE BODY PART  *************/

void ModuleBody(): {}
{
    [[Exports()] [Imports()] AssignmentList()]
}


/**********  EXPORTS PART  *************/

void Exports(): {}
{
    <RESERVED_EXPORTS> ( <RESERVED_ALL> | SymbolsExported() ) <TOKEN_SEMICOLON>
}

void SymbolsExported(): {}
{
   [ SymbolList() ]
}

void Imports(): {}
{
    <RESERVED_IMPORTS> SymbolsImported() <TOKEN_SEMICOLON>
}

/**********  IMPORTS PART  *************/

void SymbolsImported(): {}
{
    [ SymbolsFromModuleList() ]
}

void SymbolsFromModuleList(): {}
{
    SymbolsFromModule() ( SymbolsFromModule() )*
}

void SymbolsFromModule(): {}
{
    SymbolList() <RESERVED_FROM> GlobalModuleReference()
}

void GlobalModuleReference(): {}
{
    ModuleReference() [LOOKAHEAD(5) AssignedIdentifier()]
}

void AssignedIdentifier(): {}
{
    ObjectIdentifierValue() | DefinedValue()
}

void SymbolList(): {}
{
    Symbol() ( <TOKEN_COMMA> Symbol())*
}

void Symbol() : {}
{
   Reference() /*| ParametrizedReference()*/
}

void Reference(): {}
{
    LOOKAHEAD(2) TypeReference()
    | LOOKAHEAD(2) ValueReference()
    | LOOKAHEAD(2) ObjectClassReference()
    | LOOKAHEAD(2) ObjectReference()
    /*| ObjectSetReference()*/
}

/**********  ASSIGNMENTS LIST PART  *************/

void AssignmentList() : {}
{
  Assignment() [<TOKEN_SEMICOLON>] ( Assignment() [<TOKEN_SEMICOLON>] )*
}

void Assignment() #void: {}
{
   LOOKAHEAD(2)
   TypeAssignment()
   | LOOKAHEAD(2) ValueAssignment()
   | LOOKAHEAD(2) ValueSetTypeAssignment()
   /*| ObjectClassAssignment()
   | LOOKAHEAD(2) ObjectAssignment()
   | LOOKAHEAD(2) ObjectSetAssignment()*/
   | LOOKAHEAD(2) ParametrizedAssignment()
}

void DefinedType(): {}
{
    LOOKAHEAD(2) ExternalTypeReference()
    | LOOKAHEAD(2) TypeReference()
    | LOOKAHEAD(2) ParametrizedType()
    | LOOKAHEAD(2) ParametrizedValueSetType()
}

void ExternalTypeReference():{}
{
    ModuleReference() "." TypeReference()
}

void AbsoluteReference(): {}
{
    <TOKEN_REF> ModuleIdentifier() "." ItemSpec()
}

void ItemSpec(): {}
{
    (TypeReference())+  "." ComponentId()
}

void ComponentId(): {}
{
    identifier()
    | Number()
    | <TOKEN_STAR>
}

void TypeAssignment(): {}
{
    TypeReference() <TOKEN_ASSIGNMENT> Type()
}

void ValueAssignment(): {}
{
    ValueReference() Type() <TOKEN_ASSIGNMENT> Value()
}

void ValueSetTypeAssignment(): {}
{
    TypeReference() Type() <TOKEN_ASSIGNMENT> ValueSet()
}

void ValueSet(): {}
{
    <TOKEN_BRACE_LEFT> ElementSetSpecs() <TOKEN_BRACE_RIGHT>
}

void Type(): {}
{
    LOOKAHEAD(4) TypeWithConstraint() | ( (LOOKAHEAD(2) BuiltinType() | LOOKAHEAD(2)DefinedType()) [LOOKAHEAD(2) Constraint()] )
}

void BuiltinType(): {}
{
    BitStringType()
    | BooleanType()
    | CharacterStringType()
    | ChoiceType()
    | EmbeddedPDVType()
    | EnumeratedType()
    | ExternalType()
    /*| InstanceOfType()*/
    | LOOKAHEAD(3) IntegerType()
    | NullType()
    /*| ObjectClassFieldType()*/
    | ObjectIdentifierType()
    | OctetStringType()
    | RealType()
    | RelativeOIDType()
    | LOOKAHEAD(3) SequenceType()
    | LOOKAHEAD(3) SequenceOfType()
    | LOOKAHEAD(3) SetType()
    | LOOKAHEAD(3) SetOfType()
    | TaggedType()
}

void NamedType(): {}
{
    identifier() Type()
}

void ReferencedType(): {}
{
    LOOKAHEAD(2) DefinedType()
    | UsefulType()
    | SelectionType()
    /*| TypeFromObject()*/
    /*| ValueSetFromObjects()*/
}

void BooleanType(): {}
{
    <RESERVED_BOOLEAN>
}

void IntegerType(): {}
{
    <RESERVED_INTEGER> [ LOOKAHEAD(2) <TOKEN_BRACE_LEFT> NamedNumberList() <TOKEN_BRACE_RIGHT> ]
}

void NamedNumberList(): {}
{
    NamedNumber()  (<TOKEN_COMMA> NamedNumber())*
}

void NamedNumber(): {}
{
    identifier() <TOKEN_PAREN_LEFT> ( SignedNumber() | DefinedValue() ) <TOKEN_PAREN_RIGHT>
}

void EnumeratedType(): {}
{
    <RESERVED_ENUMERATED> <TOKEN_BRACE_LEFT> Enumerations() <TOKEN_BRACE_RIGHT>
}

void Enumerations(): {}
{
    Enumeration() [LOOKAHEAD(2)  <TOKEN_COMMA> <TOKEN_ELLIPSIS> ExceptionSpec() [ <TOKEN_COMMA> Enumeration() ] ]
}

void Enumeration(): {}
{
    EnumerationItem() (LOOKAHEAD(2) <TOKEN_COMMA> EnumerationItem() )*
}

void EnumerationItem(): {}
{
    LOOKAHEAD(2) NamedNumber() | identifier()
}

void RealType(): {}
{
    <RESERVED_REAL>
}

void BitStringType(): {}
{
    <RESERVED_BIT> <RESERVED_STRING> [LOOKAHEAD(2) <TOKEN_BRACE_LEFT> NamedBitList() <TOKEN_BRACE_RIGHT>]
}

void NamedBitList(): {}
{
    NamedBit() (<TOKEN_COMMA> NamedBit())*
}

void NamedBit(): {}
{
    identifier() <TOKEN_PAREN_LEFT> (Number() | DefinedValue()) <TOKEN_PAREN_RIGHT>
}

void OctetStringType(): {}
{
    <RESERVED_OCTET> <RESERVED_STRING>
}

void NullType(): {}
{
    <RESERVED_NULL>
}

void SequenceType(): {}
{
    <RESERVED_SEQUENCE> <TOKEN_BRACE_LEFT> [LOOKAHEAD(3) (ExtensionAndException() OptionalExtensionMarker()) | ComponentTypeLists()] <TOKEN_BRACE_RIGHT>
}

void ExtensionAndException(): {}
{
    <TOKEN_ELLIPSIS> ExceptionSpec()
}

void OptionalExtensionMarker(): {}
{
    [<TOKEN_COMMA> <TOKEN_ELLIPSIS> ]
}

void ComponentTypeLists(): {}
{
   ( ComponentTypeList()
            [ <TOKEN_COMMA> ExtensionAndException() ExtensionAdditions()
                                (LOOKAHEAD(3) OptionalExtensionMarker() | (ExtensionEndMarker() <TOKEN_COMMA> ComponentTypeList() ) )
            ] )
   | ExtensionAndException() ExtensionAdditions() (LOOKAHEAD(3) OptionalExtensionMarker() | (ExtensionEndMarker() <TOKEN_COMMA> ComponentTypeList() ))
}

void ExtensionEndMarker(): {}
{
    <TOKEN_COMMA> <TOKEN_ELLIPSIS>
}

void ExtensionAdditions(): {}
{
    [LOOKAHEAD(2) <TOKEN_COMMA> ExtensionAdditionsList()]
}

void ExtensionAdditionsList(): {}
{
    ExtensionAddition() (LOOKAHEAD(2)  <TOKEN_COMMA> ExtensionAddition() )*
}

void ExtensionAddition(): {}
{
    ComponentType() | ExtensionAdditionGroup()
}

void ExtensionAdditionGroup(): {}
{
    "[[" VersionNumber() ComponentTypeList() "]]"
}

void VersionNumber(): {}
{
    [Number() <TOKEN_COLON>]
}

void ComponentTypeList(): {}
{
    ComponentType() (LOOKAHEAD(2)  <TOKEN_COMMA> ComponentType() )*
}

void ComponentType(): {}
{
    (NamedType() [ <RESERVED_OPTIONAL> | (<RESERVED_DEFAULT> Value()) ])
    | (<RESERVED_COMPONENTS> <RESERVED_OF> Type())
}

void SequenceOfType(): {}
{
    <RESERVED_SEQUENCE> <RESERVED_OF> ( Type() | NamedType() )
}

void SetType(): {}
{
    <RESERVED_SET> <TOKEN_BRACE_LEFT> [LOOKAHEAD(3) ComponentTypeLists() | (ExtensionAndException() OptionalExtensionMarker() )] <TOKEN_BRACE_RIGHT>
}

void SetOfType(): {}
{
    <RESERVED_SET> <RESERVED_OF> ( Type() | NamedType() )
}

void ChoiceType(): {}
{
    <RESERVED_CHOICE> <TOKEN_BRACE_LEFT> AlternativeTypeLists() <TOKEN_BRACE_RIGHT>
}

void AlternativeTypeLists(): {}
{
    AlternativeTypeList() [ <TOKEN_COMMA> ExtensionAndException() ExtensionAdditionAlternatives() OptionalExtensionMarker() ]
}

void ExtensionAdditionAlternatives(): {}
{
    [LOOKAHEAD(2)  <TOKEN_COMMA> ExtensionAdditionAlternativesList() ]
}

void ExtensionAdditionAlternativesList(): {}
{
    ExtensionAdditionAlternative() (LOOKAHEAD(2)  <TOKEN_COMMA> ExtensionAdditionAlternative() )*
}

void ExtensionAdditionAlternative(): {}
{
    NamedType() | ExtensionAdditionAlternativesGroup()
}

void ExtensionAdditionAlternativesGroup(): {}
{
    "[[" VersionNumber() AlternativeTypeList() "]]"
}

void AlternativeTypeList(): {}
{
    NamedType() (LOOKAHEAD(2)  <TOKEN_COMMA> NamedType() )*
}

void SelectionType(): {}
{
    identifier() <TOKEN_LESS> Type()
}

void TaggedType(): {}
{
    Tag() [TaggingMethod()] Type()
}

void TaggingMethod(): {}
{
    <RESERVED_EXPLICIT> | <RESERVED_IMPLICIT>
}

void Tag(): {}
{
    <TOKEN_BRACKET_LEFT> [Class()] ClassNumber() <TOKEN_BRACKET_RIGHT>
}

void ClassNumber(): {}
{
    Number() | DefinedValue()
}

void Class(): {}
{
    <RESERVED_UNIVERSAL> | <RESERVED_APPLICATION> | <RESERVED_PRIVATE>
}

void EmbeddedPDVType(): {}
{
    <RESERVED_EMBEDDED> <RESERVED_PDV>
}

void ExternalType(): {}
{
    <RESERVED_EXTERNAL>
}

void CharacterStringType(): {}
{
    RestrictedCharacterStringType() | UnrestrictedCharacterStringType()
}

void RestrictedCharacterStringType(): {}
{
    <RESERVED_BMP_STRING>
    | <RESERVED_GENERAL_STRING>
    | <RESERVED_GRAPHIC_STRING>
    | <RESERVED_IA5_STRING>
    | <RESERVED_ISO646_STRING>
    | <RESERVED_NUMERIC_STRING>
    | <RESERVED_PRINTABLE_STRING>
    | <RESERVED_TELETEX_STRING>
    | <RESERVED_T61_STRING>
    | <RESERVED_UNIVERSAL_STRING>
    | <RESERVED_UTF8_STRING>
    | <RESERVED_VIDEOTEX_STRING>
    | <RESERVED_VISIBLE_STRING>
}


void UnrestrictedCharacterStringType(): {}
{
    <RESERVED_CHARACTER> <RESERVED_STRING>
}

void CharacterStringValue(): {}
{
    LOOKAHEAD(3) RestrictedCharacterStringValue() | UnrestrictedCharacterStringValue()
}

void UnrestrictedCharacterStringValue(): {}
{
    SequenceValue()
}

void UsefulType(): {}
{
    TypeReference()
}

void TypeWithConstraint(): {}
{
    (<RESERVED_SET> (Constraint() | SizeConstraint() ) <RESERVED_OF> (Type() | NamedType()))
    | (<RESERVED_SEQUENCE> (Constraint() | SizeConstraint() ) <RESERVED_OF> (Type() | NamedType()))
}

void Constraint(): {}
{
    <TOKEN_PAREN_LEFT> ConstraintSpec() ExceptionSpec() <TOKEN_PAREN_RIGHT>
}

void ConstraintSpec(): {}
{
    LOOKAHEAD(3) SubtypeConstraint() | GeneralConstraint()
}

void GeneralConstraint(): {}
{
    UserDefinedConstraint() | /*TableConstraint() |*/ ContentsConstraint()
}

void UserDefinedConstraint(): {}
{
    <RESERVED_CONSTRAINED> <RESERVED_BY>
    <TOKEN_BRACE_LEFT> UserDefinedConstraintParameter() (<TOKEN_COMMA> UserDefinedConstraintParameter())*  <TOKEN_BRACE_RIGHT>
}

void UserDefinedConstraintParameter(): {}
{
    LOOKAHEAD(3) (Governor() <TOKEN_COLON> Value())
    | LOOKAHEAD(3) (Governor() <TOKEN_COLON>  ValueSet())
    /*| (Governor() <TOKEN_COLON> Object() )
    | LOOKAHEAD(3) (Governor() <TOKEN_COLON> ObjectSet())*/
    | Type()
    /*| DefinedObjectClass()*/
}

void ContentsConstraint(): {}
{
    (<RESERVED_CONTAINING> Type() [<RESERVED_ENCODED> <RESERVED_BY> Value()])
    | (<RESERVED_ENCODED> <RESERVED_BY> Value())
}

void ExceptionSpec() : {}
{
    ["!" ExceptionIdentification()]
}

void ExceptionIdentification(): {}
{
    LOOKAHEAD(2) SignedNumber() | LOOKAHEAD(2) DefinedValue() | (Type() <TOKEN_COLON> Value())
}

void SubtypeConstraint(): {}
{
    ElementSetSpecs()
}

void ElementSetSpecs(): {}
{
    ElementSetSpec() [<TOKEN_COMMA> <TOKEN_ELLIPSIS> [<TOKEN_COMMA> AdditionalElementSetSpec()]]
}

void AdditionalElementSetSpec(): {}
{
    ElementSetSpec()
}

void ElementSetSpec(): {}
{
    Unions() | (<RESERVED_ALL> Exclusions())
}

void Unions(): {}
{
   ([ UnionMark() ] Intersections())+
}


void Intersections(): {}
{
    (LOOKAHEAD(2) [ IntersectionMark() ] IntersectionElements())+
}

void IntersectionElements(): {}
{
    Elements() [LOOKAHEAD(2) Exclusions() ]
}

void Exclusions(): {}
{
    <RESERVED_EXCEPT> Elements()
}

void UnionMark(): {}
{
    <TOKEN_BAR> | <RESERVED_UNION>
}

void IntersectionMark(): {}
{
    "^" | <RESERVED_INTERSECTION>
}

void Elements(): {}
{
    SubtypeElements()
    /*| ObjectSetElements()*/
    | ( <TOKEN_PAREN_LEFT> ElementSetSpec() <TOKEN_PAREN_RIGHT> )
}

void SubtypeElements(): {}
{
    LOOKAHEAD(2) ValueRange()
    | LOOKAHEAD(2) Value()
    | LOOKAHEAD(2) ContainedSubtype()
    | LOOKAHEAD(2) PermittedAlphabet()
    | LOOKAHEAD(2) SizeConstraint()
    | LOOKAHEAD(2) TypeConstraint()
    | LOOKAHEAD(2) InnerTypeConstraints()
    | LOOKAHEAD(2) PatternConstraint()
}

void ContainedSubtype(): {}
{
    [<RESERVED_INCLUDES>] Type()
}

void ValueRange(): {}
{
    LowerEndpoint() <TOKEN_RANGE> UpperEndpoint()
}

void LowerEndpoint(): {}
{
    LowerEndValue() [<TOKEN_LESS>]
}

void UpperEndpoint(): {}
{
    [<TOKEN_LESS>] UpperEndValue()
}

void LowerEndValue(): {}
{
    <RESERVED_MIN> | Value()
}

void UpperEndValue(): {}
{
    <RESERVED_MAX> | Value()
}

void SizeConstraint(): {}
{
    <RESERVED_SIZE> Constraint()
}

void PermittedAlphabet(): {}
{
    <RESERVED_FROM> Constraint()
}

void TypeConstraint(): {}
{
    Type()
}

void InnerTypeConstraints(): {}
{
    <RESERVED_WITH> ( (<RESERVED_COMPONENT> SingleTypeConstraint() ) | (<RESERVED_COMPONENTS> MultipleTypeConstraint() ) )
}

void SingleTypeConstraint(): {}
{
    Constraint()
}

void MultipleTypeConstraint(): {}
{
    LOOKAHEAD(2) FullSpecification() | PartialSpecification()
}

void FullSpecification(): {}
{
    <TOKEN_BRACE_LEFT> TypeConstraints() <TOKEN_BRACE_RIGHT>
}

void PartialSpecification(): {}
{
    <TOKEN_BRACE_LEFT> <TOKEN_ELLIPSIS> <TOKEN_COMMA> TypeConstraints() <TOKEN_BRACE_RIGHT>
}

void TypeConstraints(): {}
{
    NamedConstraint() ( <TOKEN_COMMA> NamedConstraint() )*
}

void NamedConstraint(): {}
{
    identifier() ComponentConstraint()
}

void ComponentConstraint(): {}
{
    ValueConstraint() PresenceConstraint()
}

void ValueConstraint(): {}
{
    [Constraint()]
}


void ParametrizedAssignment(): {}
{
    LOOKAHEAD(2) ParametrizedTypeAssignment()
    | LOOKAHEAD(2) ParametrizedTypeAssignment()
    | LOOKAHEAD(2) ParametrizedValueAssignment()
    | LOOKAHEAD(2) ParametrizedValueSetTypeAssignment()
    /*| LOOKAHEAD(2) ParametrizedObjectClassAssignment()
    | LOOKAHEAD(2) ParametrizedObjectAssignment()
    | LOOKAHEAD(2) ParametrizedObjectSetAssignment()*/
}

void ParametrizedTypeAssignment(): {}
{
    TypeReference() ParameterList() <TOKEN_ASSIGNMENT> Type()
}

void ParametrizedValueAssignment(): {}
{
    ValueReference() ParameterList() <TOKEN_ASSIGNMENT> Value()
}

void ParametrizedValueSetTypeAssignment(): {}
{
    TypeReference() ParameterList() <TOKEN_ASSIGNMENT> ValueSet()
}

/*
void ParametrizedObjectClassAssignment(): {}
{
    ObjectClassReference() ParameterList() DefinedObjectClass() <TOKEN_ASSIGNMENT> ObjectClass()
}

void ParametrizedObjectAssignment(): {}
{
    ObjectReference() ParameterList() DefinedObjectClass() <TOKEN_ASSIGNMENT> Object()
}

void ParametrizedObjectSetAssignment(): {}
{
    ObjectSetReference() ParameterList() DefinedObjectClass() <TOKEN_ASSIGNMENT> ObjectSet()
}
*/

void ParameterList(): {}
{
    <TOKEN_BRACE_LEFT> Parameter() (<TOKEN_COMMA> Parameter())* <TOKEN_BRACE_RIGHT>
}

void Parameter(): {}
{
    [LOOKAHEAD(2) ParamGovernor() <TOKEN_COLON>] DummyReference()
}

void ParamGovernor(): {}
{
    LOOKAHEAD(2) Governor() | DummyGovernor()
}

void Governor(): {}
{
    Type() /*| DefinedObjectClass()*/
}

void DummyGovernor(): {}
{
    DummyReference()
}

void DummyReference(): {}
{
    Reference()
}

void ParametrizedType(): {}
{
    SimpleDefinedType() ActualParameterList()
}

void SimpleDefinedType(): {}
{
    LOOKAHEAD(2) ExternalTypeReference() | LOOKAHEAD(2) TypeReference()
}


void ParametrizedValueSetType(): {}
{
    SimpleDefinedType() ActualParameterList()
}

/*
void ParametrizedObjectClass(): {}
{
    DefinedObjectClass() ActualParameterList()
}

void ParametrizedObjectSet(): {}
{
    DefinedObjectSet() ActualParameterList()
}

void ParametrizedObject(): {}
{
    DefinedObject() ActualParameterList()
}
*/
void ActualParameterList(): {}
{
    <TOKEN_BRACE_LEFT> ActualParameter() (<TOKEN_COMMA> ActualParameter() )* <TOKEN_BRACE_RIGHT>
}

void ActualParameter(): {}
{
    LOOKAHEAD(3) Type()
    | LOOKAHEAD(3) Value()
    | LOOKAHEAD(3) ValueSet()
    /*| LOOKAHEAD(3) DefinedObjectClass()
    | LOOKAHEAD(3) Object()
    | LOOKAHEAD(3) ObjectSet()*/
}


void PresenceConstraint(): {}
{
    [<RESERVED_PRESENT> | <RESERVED_ABSENT> | <RESERVED_OPTIONAL>]
}

void PatternConstraint(): {}
{
    <RESERVED_PATTERN> Value()
}

void TypeReference(): {}
{
    <UPPERCASE_START>
}

void identifier(): {}
{
    <LOWERCASE_START>
}

void ValueReference(): {}
{
    identifier()
}

void ModuleReference(): {}
{
    <UPPERCASE_START>
}

void ObjectClassReference(): {}
{
    <UPPERCASE>
}

void ObjectReference(): {}
{
    identifier()
}

void TypeFieldReference(): {}
{
    <TYPE_FIELD_REFERENCE>
}

void ValueFieldReference(): {}
{
    <VALUE_FIELD_REFERENCE>
}

void ValueSetFieldReference(): {}
{
    <TYPE_FIELD_REFERENCE>
}

void ObjectFieldReference(): {}
{
    <VALUE_FIELD_REFERENCE>
}

void Value(): {}
{
    LOOKAHEAD(2) BuiltinValue()
    | ReferencedValue()
    /*| ObjectClassFieldValue()*/
}

void DefinedValue(): {}
{
    LOOKAHEAD(2) ExternalValueReference()
    | LOOKAHEAD(2) ValueReference()
    | LOOKAHEAD(2) ParametrizedValue()
}

void ObjectIdentifierType(): {}
{
    <RESERVED_OBJECT> <RESERVED_IDENTIFIER>
}

void ObjectIdentifierValue(): {}
{
    <TOKEN_BRACE_LEFT> (LOOKAHEAD(3) ObjIdComponentsList() | ( DefinedValue() ObjIdComponentsList() ) ) <TOKEN_BRACE_RIGHT>
}

void RelativeOIDType(): {}
{
    <RESERVED_RELATIVE_OID>
}

void RelativeOIDValue(): {}
{
    <TOKEN_BRACE_LEFT> RelativeOIDComponentsList() <TOKEN_BRACE_RIGHT>
}

void RelativeOIDComponentsList(): {}
{
    RelativeOIDComponents() ( RelativeOIDComponents() )*
}

void RelativeOIDComponents(): {}
{
    LOOKAHEAD(2) NumberForm() | LOOKAHEAD(2) NameAndNumberForm() | DefinedValue()
}

void BuiltinValue(): {}
{
    LOOKAHEAD(2) BitStringValue()
    | BooleanValue()
    | LOOKAHEAD(2) CharacterStringValue()
    | LOOKAHEAD(2) ChoiceValue()
    | LOOKAHEAD(2) EmbeddedPDVValue()
    | LOOKAHEAD(2) EnumeratedValue()
    | LOOKAHEAD(2) ExternalValue()
    /*| InstanceOfValue()*/
    | LOOKAHEAD(3) IntegerValue()
    | LOOKAHEAD(2) RealValue()
    | NullValue()
    /*| ObjectClassFieldValue()*/
    | LOOKAHEAD(3) ObjectIdentifierValue()
    | LOOKAHEAD(3) OctetStringValue()
    | LOOKAHEAD(3) RelativeOIDValue()
    | LOOKAHEAD(3) SequenceValue()
    | LOOKAHEAD(3) SequenceOfValue()
    | LOOKAHEAD(2) SetValue()
    | LOOKAHEAD(2) SetOfValue()
}

void ReferencedValue(): {}
{
    DefinedValue() /*| ValueFromObject()*/
}

void NamedValue(): {}
{
    identifier() Value()
}

void BooleanValue(): {}
{
    <RESERVED_TRUE> | <RESERVED_FALSE>
}

void EnumeratedValue(): {}
{
    identifier()
}

void IntegerValue(): {}
{
    SignedNumber() | identifier()
}

double RealValue(): {double x;}
{
    x = NumericRealValue(){return x;}
    | x = SpecialRealValue(){return x;}
}

double NumericRealValue(): {}
{
    <REAL>{return Double.parseDouble(token.image);} /* | SequenceValue())*/
}

double SpecialRealValue(): {}
{
    <RESERVED_MINUS_INFINITY>{return Double.NEGATIVE_INFINITY;}
    | <RESERVED_PLUS_INFINITY>{return Double.POSITIVE_INFINITY;}
}

void BitStringValue(): {}
{
    <BIT_STRING>
    | <HEX_STRING>
    | (<TOKEN_BRACE_LEFT> [IdentifierList()] <TOKEN_BRACE_RIGHT>)
    | (<RESERVED_CONTAINING> Value())
}

void ChoiceValue(): {}
{
    identifier() <TOKEN_COLON> Value()
}


void ExternalValue(): {}
{
    SequenceValue()
}

void SetOfValue(): {}
{
    <TOKEN_BRACE_LEFT> [ LOOKAHEAD(3) ValueList() | NamedValueList() ] <TOKEN_BRACE_RIGHT>
}

void SetValue(): {}
{
    <TOKEN_BRACE_LEFT> [ComponentValueList()] <TOKEN_BRACE_RIGHT>
}

void SequenceOfValue(): {}
{
    <TOKEN_BRACE_LEFT> [ LOOKAHEAD(3) ValueList() | NamedValueList() ] <TOKEN_BRACE_RIGHT>
}

void ValueList(): {}
{
    Value() ( <TOKEN_COMMA> Value() )*
}

void NamedValueList(): {}
{
    NamedValue() ( <TOKEN_COMMA> NamedValue() )*
}

void SequenceValue(): {}
{
    <TOKEN_BRACE_LEFT> [ComponentValueList()] <TOKEN_BRACE_RIGHT>
}

void ComponentValueList(): {}
{
    NamedValue() ( <TOKEN_COMMA> NamedValue() )*
}

void OctetStringValue(): {}
{
    <BIT_STRING>
    | <HEX_STRING>
    | (<RESERVED_CONTAINING> Value())
}

void NullValue(): {}
{
    <RESERVED_NULL>
}

void IdentifierList(): {}
{
    identifier() ( <TOKEN_COMMA> identifier() )*
}

void ParametrizedValue(): {}
{
    SimpleDefinedValue() ActualParameterList()
}

void SimpleDefinedValue(): {}
{
    ExternalValueReference() | ValueReference()
}

void RestrictedCharacterStringValue(): {}
{
    <STRING> | LOOKAHEAD(2) CharacterStringList() | LOOKAHEAD(5) Quadruple() | Tuple()
}

void CharacterStringList(): {}
{
    <TOKEN_BRACE_LEFT> CharSyms() <TOKEN_BRACE_RIGHT>
}

void CharSyms(): {}
{
    CharsDefn() ( <TOKEN_COMMA> CharsDefn() )*
}

void CharsDefn(): {}
{
    <STRING> | LOOKAHEAD(5) Quadruple() | Tuple() | DefinedValue()
}

void Quadruple(): {}
{
    <TOKEN_BRACE_LEFT> Group() <TOKEN_COMMA> Plane() <TOKEN_COMMA> Row() <TOKEN_COMMA> Cell() <TOKEN_BRACE_RIGHT>
}

void Group(): {}
{
    Number()
}

void Plane(): {}
{
    Number()
}

void Row(): {}
{
    Number()
}

void Cell(): {}
{
    Number()
}

void Tuple(): {}
{
    <TOKEN_BRACE_LEFT> TableColumn() <TOKEN_COMMA> TableRow() <TOKEN_BRACE_RIGHT>
}

void TableColumn(): {}
{
    Number()
}

void TableRow(): {}
{
    Number()
}

void EmbeddedPDVValue(): {}
{
    SequenceValue()
}
