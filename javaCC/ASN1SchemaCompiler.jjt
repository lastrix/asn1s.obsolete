/******************************************************************************
 * Copyright (C) 2010-2011 Lastrix                                            *
 * This file is part of ASN1S.                                                *
 *                                                                            *
 * ASN1S is free software: you can redistribute it and/or modify              *
 * it under the terms of the GNU General Public License as published by       *
 * the Free Software Foundation, either version 2 of the License, or          *
 * (at your option) any later version.                                        *
 *                                                                            *
 * ASN1S is distributed in the hope that it will be useful,                   *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with ASN1S. If not, see <http://www.gnu.org/licenses/>.              *
 ******************************************************************************/

/**
*    This file has been taken from ASN.1 Compiler for Java project, see http://sourceforge.net/projects/jac-asn1/ for details.
*/

options {
SANITY_CHECK=true;
DEBUG_PARSER=false;
DEBUG_TOKEN_MANAGER=false;
MULTI=true;
VISITOR=true;
NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(ASN1SchemaCompiler)
package org.lastrix.asn1s.schema.parser;

import java.io.*;
import java.util.*;

public class ASN1SchemaCompiler {

    static void jjtreeOpenNodeScope(Node n)
    {
    }

    static void jjtreeCloseNodeScope(Node n)
    {
    }
}

PARSER_END(ASN1SchemaCompiler)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  "--" : WithinASNComment
}

<WithinASNComment> SPECIAL_TOKEN :
{
  <("--" | "\n" | "\r" | "\r\n" )> : DEFAULT
}

<WithinASNComment> MORE :
{
  <~[]>
}

TOKEN:
{
    <TYPE_IDENTIFIER: ["A"-"Z"] (("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])* >
    | <VALUE_IDENTIFIER: ["a"-"z"] (("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])* >
}

TOKEN:
{
    <TOKEN_DOT : ".">
    | <TOKEN_ASSIGNMENT : "::=">
    | <TOKEN_MINUS : "-" >
    | <TOKEN_REF : "@" >
    | <TOKEN_STAR : "*" >
    | <TOKEN_RANGE : ".." >
    | <TOKEN_ELLIPSIS : "..." >
    | <TOKEN_LESS : "<">
    | <TOKEN_MORE : ">">
    | <TOKEN_COMMA : ",">
    | <TOKEN_APOSTROPHE : "'">
    | <TOKEN_BAR : "|">
    | <TOKEN_COLON : ":">
    | <TOKEN_SEMICOLON : ";">
    | <TOKEN_BRACKET_LEFT : "[">
    | <TOKEN_BRACKET_RIGHT : "]">
    | <TOKEN_PAREN_LEFT : "(">
    | <TOKEN_PAREN_RIGHT : ")">
    | <TOKEN_BRACE_LEFT : "{">
    | <TOKEN_BRACE_RIGHT : "}">
}

/**
    Reserved words
*/
TOKEN:
{
    <RESERVED_ABSENT : "ABSENT">
    | <RESERVED_ABSTRACT_SYNTAX : "ABSTRACT-SYNTAX">
    | <RESERVED_ALL : "ALL">
    | <RESERVED_APPLICATION : "APPLICATION">
    | <RESERVED_AUTOMATIC : "AUTOMATIC">
    | <RESERVED_BEGIN : "BEGIN">
    | <RESERVED_BIT : "BIT">
    | <RESERVED_BMP_STRING : "BMPString">
    | <RESERVED_BOOLEAN : "BOOLEAN">
    | <RESERVED_BY : "BY">
    | <RESERVED_CHARACTER : "CHARACTER">
    | <RESERVED_CHOICE : "CHOICE">
    | <RESERVED_CLASS : "CLASS">
    | <RESERVED_COMPONENT : "COMPONENT">
    | <RESERVED_COMPONENTS : "COMPONENTS">
    | <RESERVED_CONSTRAINED : "CONSTRAINED">
    | <RESERVED_CONTAINING : "CONTAINING">
    | <RESERVED_DEFAULT : "DEFAULT">
    | <RESERVED_DEFINITIONS : "DEFINITIONS">
    | <RESERVED_EMBEDDED : "EMBEDDED">
    | <RESERVED_ENCODED : "ENCODED">
    | <RESERVED_END : "END">
    | <RESERVED_ENUMERATED : "ENUMERATED">
    | <RESERVED_EXCEPT : "EXCEPT">
    | <RESERVED_EXPLICIT : "EXPLICIT">
    | <RESERVED_EXPORTS : "EXPORTS">
    | <RESERVED_EXTENSIBILITY : "EXTENSIBILITY">
    | <RESERVED_EXTERNAL : "EXTERNAL">
    | <RESERVED_FALSE : "FALSE">
    | <RESERVED_FROM : "FROM">
    | <RESERVED_GENERALIZED_TIME : "GeneralizedTime">
    | <RESERVED_GENERAL_STRING : "GeneralString">
    | <RESERVED_GRAPHIC_STRING : "GraphicString">
    | <RESERVED_IA5_STRING : "IA5String">
    | <RESERVED_IDENTIFIER : "IDENTIFIER">
    | <RESERVED_IMPLICIT : "IMPLICIT">
    | <RESERVED_IMPLIED : "IMPLIED">
    | <RESERVED_IMPORTS : "IMPORTS">
    | <RESERVED_INCLUDES : "INCLUDES">
    | <RESERVED_INSTANCE : "INSTANCE">
    | <RESERVED_INTEGER : "INTEGER">
    | <RESERVED_INTERSECTION : "INTERSECTION">
    | <RESERVED_ISO646_STRING : "ISO646String">
    | <RESERVED_MAX : "MAX">
    | <RESERVED_MIN : "MIN">
    | <RESERVED_MINUS_INFINITY : "MINUS-INFINITY">
    | <RESERVED_NULL : "NULL">
    | <RESERVED_NUMERIC_STRING : "NumericString">
    | <RESERVED_OBJECT : "OBJECT">
    | <RESERVED_OBJECT_DESCRIPTOR : "ObjectDescriptor">
    | <RESERVED_OCTET : "OCTET">
    | <RESERVED_OF : "OF">
    | <RESERVED_OPTIONAL : "OPTIONAL">
    | <RESERVED_PATTERN : "PATTERN">
    | <RESERVED_PDV : "PDV">
    | <RESERVED_PLUS_INFINITY : "PLUS-INFINITY">
    | <RESERVED_PRESENT : "PRESENT">
    | <RESERVED_PRINTABLE_STRING : "PrintableString">
    | <RESERVED_PRIVATE : "PRIVATE">
    | <RESERVED_REAL : "REAL">
    | <RESERVED_RELATIVE_OID : "RELATIVE-OID">
    | <RESERVED_SEQUENCE : "SEQUENCE">
    | <RESERVED_SET : "SET">
    | <RESERVED_SIZE : "SIZE">
    | <RESERVED_STRING : "STRING">
    | <RESERVED_SYNTAX : "SYNTAX">
    | <RESERVED_T61_STRING : "T61String">
    | <RESERVED_TAGS : "TAGS">
    | <RESERVED_TELETEX_STRING : "TeletexString">
    | <RESERVED_TRUE : "TRUE">
    | <RESERVED_TYPE_IDENTIFIER : "TYPE-IDENTIFIER">
    | <RESERVED_UNION : "UNION">
    | <RESERVED_UNIQUE : "UNIQUE">
    | <RESERVED_UNIVERSAL : "UNIVERSAL">
    | <RESERVED_UNIVERSAL_STRING : "UniversalString">
    | <RESERVED_UTC_TIME : "UTCTime">
    | <RESERVED_UTF8_STRING : "UTF8String">
    | <RESERVED_VIDEOTEX_STRING : "VideotexString">
    | <RESERVED_VISIBLE_STRING : "VisibleString">
    | <RESERVED_WITH : "WITH">
}

TOKEN:
{
    <NUMBER : "0" | ["1"-"9"](["0"-"9"])*>
}

TOKEN:
{
    <REAL : (<NUMBER> "." ("0")* <NUMBER> ("e" | "E") <NUMBER>) | (<NUMBER> ("e" | "E") <NUMBER>) >
}

TOKEN:
{
    <BIT_STRING : "'" (["0"-"1"])+ "'B">
}

TOKEN :
{
    <HEX_STRING: "'" (["0"-"9","A"-"F","a"-"f"])* "'H">
}

TOKEN :
{
    <STRING: "\"" ( ~["\""] )* "\"" >
}

TOKEN:
{
    <BOOLEAN: <RESERVED_TRUE> | <RESERVED_FALSE> >
}

TOKEN :
{
 <OBJECT_IDENTIFIER: <RESERVED_OBJECT> ([" ","\n","\t","\r"])? <RESERVED_IDENTIFIER>>
}


/**********  ENTRY POINT  *************/

void Parse() : {}
{
 (ModuleDefinition())*
}


void ModuleDefinition() : {}
{
    ModuleIdentifier()
    <RESERVED_DEFINITIONS> TagDefault() ExtensionDefault()
        <TOKEN_ASSIGNMENT>
    <RESERVED_BEGIN> ModuleBody() <RESERVED_END>
}

/**********  MODULE IDENTIFIER PART  *************/


void ModuleIdentifier(): {}
{
    ModuleReference() DefiniteIdentifier()
}

void DefiniteIdentifier(): {}
{
     [<TOKEN_BRACE_LEFT> ObjIdComponentList() <TOKEN_BRACE_RIGHT> ]
}

void ObjIdComponentList() : {}
{
   ObjIdComponent() (ObjIdComponent())*
}

void ObjIdComponent() : {}
{
  ( NumberForm() |   NameAndNumberForm())
}

void NumberForm(): {}
{
    <NUMBER>
}

void NameAndNumberForm(): {}
{
    identifier() [ <TOKEN_PAREN_LEFT> (NumberForm() | DefinedValue()) <TOKEN_PAREN_RIGHT>]
}

void TagDefault() : {}
{
    [ (<RESERVED_EXPLICIT> | <RESERVED_IMPLICIT> | <RESERVED_AUTOMATIC>) <RESERVED_TAGS> ]
}

void ExtensionDefault(): {}
{
    [ <RESERVED_EXTENSIBILITY> <RESERVED_IMPLIED> ]
}

void DefinedValue(): {}
{
    [ <TYPE_IDENTIFIER> <TOKEN_DOT> ] <VALUE_IDENTIFIER>
}

/**********  MODULE BODY PART  *************/

void ModuleBody(): {}
{
    [Exports() Imports() AssignmentList()]
}

/**********  EXPORTS PART  *************/

void Exports(): {}
{
    [<RESERVED_EXPORTS> ( <RESERVED_ALL> | SymbolsExported() ) <TOKEN_SEMICOLON> ]
}

void SymbolsExported(): {}
{
   [ SymbolList() ]
}

void Imports(): {}
{
    <RESERVED_IMPORTS> SymbolsImported() <TOKEN_SEMICOLON>
}

/**********  IMPORTS PART  *************/

void SymbolsImported(): {}
{
    [ SymbolsFromModuleList() ]
}

void SymbolsFromModuleList(): {}
{
    SymbolsFromModule() ( SymbolsFromModule() )*
}

void SymbolsFromModule(): {}
{
    SymbolList() <RESERVED_FROM> GlobalModuleReference()
}

void GlobalModuleReference(): {}
{
    ModuleReference() AssignedIdentifier()
}

void AssignedIdentifier(): {}
{
    [ObjectIdentifierValue() | DefinedValue()]
}

void SymbolList(): {}
{
    Symbol() ([ <TOKEN_COMMA> Symbol()])*
}

void Symbol() : {}
{
   Reference() | ParametrizedReference()
}

void Reference(): {}
{
    TypeReference()
    | ValueReference()
    | ObjectClassReference()
    | ObjectReference()
    | ObjectSetReference()
}

/**********  ASSIGNMENTS LIST PART  *************/

void AssignmentList() : {}
{
  Assignment() [<TOKEN_SEMICOLON>] ( Assignment() [<TOKEN_SEMICOLON>] )*
}

void Assignment() #void: {}
{
   LOOKAHEAD(2)
   TypeAssignment()
   | ValueAssignment()
   | ValueSetTypeAssignment()
   | ObjectClassAssignment()
   | ObjectAssignment()
   | ObjectSetAssignment()
   | ParametrizedAssignment()
}

void DefinedType(): {}
{
    ExternalTypeReference()
    | TypeReference()
    | ParametrizedType()
    | ParametrizedValueSetType()
}

void DefinedValue(): {}
{
    ExternalValueReference()
    | ValueReference()
    | ParametrizedValue()
}

void NonParametrizedTypeName(): {}
{
    ExternalTypeReference()
    | TypeReference()
    | XMLASN1TypeName()
}

void ExternalTypeReference():{}
{
    ModuleReference() <TOKEN_DOT> TypeReference()
}

void ExternalValueReference(): {}
{
    ModuleReference() <TOKEN_DOT> ValueReference()
}

void AbsoluteReference(): {}
{
    <TOKEN_REF> ModuleIdentifier() <TOKEN_DOT> ItemSpec()
}

void ItemSpec(): {}
{
    (TypeReference())+  <TOKEN_DOT> ComponentId()
}

void ComponentId(): {}
{
    identifier()
    | number()
    | <TOKEN_STAR>
}

void TypeAssignment(): {}
{
    TypeReference() <TOKEN_ASSIGNMENT> Type()
}

void ValueAssignment(): {}
{
    ValueReference() Type() <TOKEN_ASSIGNMENT> Value()
}

void ValueSetTypeAssignment(): {}
{
    TypeReference() Type() <TOKEN_ASSIGNMENT> ValueSet()
}

void ValueSet(): {}
{
    <TOKEN_BRACE_LEFT> ElementSetSpecs() <TOKEN_BRACE_RIGHT>
}

void Type(): {}
{
    BuiltinType() | ReferencedType() | ConstrainedType()
}

void BuiltinType(): {}
{
    BitStringType()
    | BooleanType()
    | CharacterStringType()
    | ChoiceType()
    | EmbeddedPDVType()
    | EnumeratedType()
    | ExternalType()
    | InstanceOfType()
    | IntegerType()
    | NullType()
    | ObjectClassFieldType()
    | ObjectIdentifierType()
    | OctetStringType()
    | RealType()
    | RelativeOIDType()
    | SequenceType()
    | SequenceOfType()
    | SetType()
    | SetOfType()
    | TaggedType()
}

void NamedType(): {}
{
    identifier() Type()
}

void ReferencedType(): {}
{
    DefinedType()
    | UsefulType()
    | SelectionType()
    | TypeFromObject()
    | ValueSetFromObjects()
}

void Value(): {}
{
    BuiltinValue()
    | ReferencedValue()
    | ObjectClassFieldValue()
}

void BuiltinValue(): {}
{
    BitStringValue()
    | BooleanValue()
    | CharacterStringValue()
    | ChoiceValue()
    | EmbeddedPDVValue()
    | EnumeratedValue()
    | ExternalValue()
    | InstanceOfValue()
    | IntegerValue()
    | NullValue()
    | ObjectClassFieldValue()
    | ObjectIdentifierValue()
    | OctetStringValue()
    | RealValue()
    | RelativeOIDValue()
    | SequenceValue()
    | SequenceOfValue()
    | SetValue()
    | SetOfValue()
    | TaggedValue()
}

void ReferencedValue(): {}
{
    DefinedValue() | ValueFromObject()
}

void NamedValue(): {}
{
    identifier() Value()
}

void BooleanType(): {}
{
    <RESERVED_BOOLEAN>
}

void BooleanValue(): {}
{
    <RESERVED_TRUE> | <RESERVED_FALSE>
}

void IntegerType(): {}
{
    <RESERVED_INTEGER> [ <TOKEN_BRACE_LEFT> NamedNumberList() <TOKEN_BRACE_RIGHT> ]
}

void NamedNumberList(): {}
{
    NamedNumber()  (<TOKEN_COMMA> NamedNumber())*
}

void NamedNumber(): {}
{
    identifier() (DefinedValue() | SignedNumber() )
}

void SignedNumber(): {}
{
    [<TOKEN_MINUS>] number()
}

void IntegerValue(): {}
{
    SignedNumber() | identifier()
}

void EnumeratedType(): {}
{
    <RESERVED_ENUMERATED> <TOKEN_BRACE_LEFT> Enumerations() <TOKEN_BRACE_RIGHT>
}

void Enumerations(): {}
{
    RootEnumeration() [ <TOKEN_COMMA> <TOKEN_ELLIPSIS> ExceptionSpec() [ <TOKEN_COMMA> AdditionalEnumeration() ] ]
}

void RootEnumeration(): {}
{
    Enumeration()
}

void AdditionalEnumeration(): {}
{
    Enumeration()
}

void Enumeration(): {}
{
    EnumerationItem() (<TOKEN_COMMA> EnumerationItem() )*
}

void EnumerationItem(): {}
{
    identifier() | NamedNumber()
}

void EnumeratedValue(): {}
{
    identifier()
}